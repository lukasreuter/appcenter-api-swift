//
// ExportAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation



open class ExportAPI {
    /**

     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter properties: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func exportConfigurationsCreate(ownerName: String, appName: String, properties: InlineObject46, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: InlineResponse20039?,_ error: Error?) -> Void)) {
        exportConfigurationsCreateWithRequestBuilder(ownerName: ownerName, appName: appName, properties: properties).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /v0.1/apps/{owner_name}/{app_name}/export_configurations
     - Create new export configuration
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter properties: (body)  
     - returns: RequestBuilder<InlineResponse20039> 
     */
    open class func exportConfigurationsCreateWithRequestBuilder(ownerName: String, appName: String, properties: InlineObject46) -> RequestBuilder<InlineResponse20039> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/export_configurations"
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: properties)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<InlineResponse20039>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter exportConfigurationId: (path) The id of the export configuration. 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func exportConfigurationsDelete(exportConfigurationId: String, ownerName: String, appName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        exportConfigurationsDeleteWithRequestBuilder(exportConfigurationId: exportConfigurationId, ownerName: ownerName, appName: appName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /v0.1/apps/{owner_name}/{app_name}/export_configurations/{export_configuration_id}
     - Delete export configuration.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter exportConfigurationId: (path) The id of the export configuration. 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - returns: RequestBuilder<Void> 
     */
    open class func exportConfigurationsDeleteWithRequestBuilder(exportConfigurationId: String, ownerName: String, appName: String) -> RequestBuilder<Void> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/export_configurations/{export_configuration_id}"
        let exportConfigurationIdPreEscape = "\(APIHelper.mapValueToPathItem(exportConfigurationId))"
        let exportConfigurationIdPostEscape = exportConfigurationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{export_configuration_id}", with: exportConfigurationIdPostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = API.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter exportConfigurationId: (path) The id of the export configuration. 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func exportConfigurationsDisable(exportConfigurationId: String, ownerName: String, appName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        exportConfigurationsDisableWithRequestBuilder(exportConfigurationId: exportConfigurationId, ownerName: ownerName, appName: appName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /v0.1/apps/{owner_name}/{app_name}/export_configurations/{export_configuration_id}/disable
     - Disable export configuration.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter exportConfigurationId: (path) The id of the export configuration. 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - returns: RequestBuilder<Void> 
     */
    open class func exportConfigurationsDisableWithRequestBuilder(exportConfigurationId: String, ownerName: String, appName: String) -> RequestBuilder<Void> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/export_configurations/{export_configuration_id}/disable"
        let exportConfigurationIdPreEscape = "\(APIHelper.mapValueToPathItem(exportConfigurationId))"
        let exportConfigurationIdPostEscape = exportConfigurationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{export_configuration_id}", with: exportConfigurationIdPostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = API.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter exportConfigurationId: (path) The id of the export configuration. 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func exportConfigurationsEnable(exportConfigurationId: String, ownerName: String, appName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        exportConfigurationsEnableWithRequestBuilder(exportConfigurationId: exportConfigurationId, ownerName: ownerName, appName: appName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /v0.1/apps/{owner_name}/{app_name}/export_configurations/{export_configuration_id}/enable
     - Enable export configuration.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter exportConfigurationId: (path) The id of the export configuration. 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - returns: RequestBuilder<Void> 
     */
    open class func exportConfigurationsEnableWithRequestBuilder(exportConfigurationId: String, ownerName: String, appName: String) -> RequestBuilder<Void> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/export_configurations/{export_configuration_id}/enable"
        let exportConfigurationIdPreEscape = "\(APIHelper.mapValueToPathItem(exportConfigurationId))"
        let exportConfigurationIdPostEscape = exportConfigurationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{export_configuration_id}", with: exportConfigurationIdPostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = API.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter exportConfigurationId: (path) The id of the export configuration. 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func exportConfigurationsGet(exportConfigurationId: String, ownerName: String, appName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: InlineResponse20039?,_ error: Error?) -> Void)) {
        exportConfigurationsGetWithRequestBuilder(exportConfigurationId: exportConfigurationId, ownerName: ownerName, appName: appName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/export_configurations/{export_configuration_id}
     - Get export configuration.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter exportConfigurationId: (path) The id of the export configuration. 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - returns: RequestBuilder<InlineResponse20039> 
     */
    open class func exportConfigurationsGetWithRequestBuilder(exportConfigurationId: String, ownerName: String, appName: String) -> RequestBuilder<InlineResponse20039> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/export_configurations/{export_configuration_id}"
        let exportConfigurationIdPreEscape = "\(APIHelper.mapValueToPathItem(exportConfigurationId))"
        let exportConfigurationIdPostEscape = exportConfigurationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{export_configuration_id}", with: exportConfigurationIdPostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<InlineResponse20039>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func exportConfigurationsList(ownerName: String, appName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: InlineResponse20040?,_ error: Error?) -> Void)) {
        exportConfigurationsListWithRequestBuilder(ownerName: ownerName, appName: appName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/export_configurations
     - List export configurations.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - returns: RequestBuilder<InlineResponse20040> 
     */
    open class func exportConfigurationsListWithRequestBuilder(ownerName: String, appName: String) -> RequestBuilder<InlineResponse20040> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/export_configurations"
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<InlineResponse20040>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter exportConfigurationId: (path) The id of the export configuration. 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter properties: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func exportConfigurationsPartialUpdate(exportConfigurationId: String, ownerName: String, appName: String, properties: InlineObject45, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: InlineResponse20039?,_ error: Error?) -> Void)) {
        exportConfigurationsPartialUpdateWithRequestBuilder(exportConfigurationId: exportConfigurationId, ownerName: ownerName, appName: appName, properties: properties).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /v0.1/apps/{owner_name}/{app_name}/export_configurations/{export_configuration_id}
     - Partially update export configuration.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter exportConfigurationId: (path) The id of the export configuration. 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter properties: (body)  
     - returns: RequestBuilder<InlineResponse20039> 
     */
    open class func exportConfigurationsPartialUpdateWithRequestBuilder(exportConfigurationId: String, ownerName: String, appName: String, properties: InlineObject45) -> RequestBuilder<InlineResponse20039> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/export_configurations/{export_configuration_id}"
        let exportConfigurationIdPreEscape = "\(APIHelper.mapValueToPathItem(exportConfigurationId))"
        let exportConfigurationIdPostEscape = exportConfigurationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{export_configuration_id}", with: exportConfigurationIdPostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: properties)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<InlineResponse20039>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
