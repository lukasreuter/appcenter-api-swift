//
// DistributeAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation



open class DistributeAPI {
    /**

     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter body: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func appleMappingCreate(ownerName: String, appName: String, body: InlineObject66, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        appleMappingCreateWithRequestBuilder(ownerName: ownerName, appName: appName, body: body).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /v0.1/apps/{owner_name}/{app_name}/apple_mapping
     - Create a mapping for an existing app in apple store for the specified application.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter body: (body)  
     - returns: RequestBuilder<Any> 
     */
    open class func appleMappingCreateWithRequestBuilder(ownerName: String, appName: String, body: InlineObject66) -> RequestBuilder<Any> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/apple_mapping"
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Any>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter body: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func appleMappingDelete(ownerName: String, appName: String, body: String? = nil, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        appleMappingDeleteWithRequestBuilder(ownerName: ownerName, appName: appName, body: body).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /v0.1/apps/{owner_name}/{app_name}/apple_mapping
     - Delete mapping of apple app to an existing app in apple store.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter body: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func appleMappingDeleteWithRequestBuilder(ownerName: String, appName: String, body: String? = nil) -> RequestBuilder<Void> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/apple_mapping"
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = API.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func appleMappingGet(ownerName: String, appName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        appleMappingGetWithRequestBuilder(ownerName: ownerName, appName: appName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/apple_mapping
     - Get mapping of apple app to an existing app in apple store.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - returns: RequestBuilder<Any> 
     */
    open class func appleMappingGetWithRequestBuilder(ownerName: String, appName: String) -> RequestBuilder<Any> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/apple_mapping"
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Any>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func appleMappingTestFlightGroups(ownerName: String, appName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: [InlineResponse20080]?,_ error: Error?) -> Void)) {
        appleMappingTestFlightGroupsWithRequestBuilder(ownerName: ownerName, appName: appName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/apple_test_flight_groups
     - Fetch all apple test flight groups
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - returns: RequestBuilder<[InlineResponse20080]> 
     */
    open class func appleMappingTestFlightGroupsWithRequestBuilder(ownerName: String, appName: String) -> RequestBuilder<[InlineResponse20080]> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/apple_test_flight_groups"
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[InlineResponse20080]>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter deviceUdid: (path) The UDID of the device 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func devicesDeviceDetails(deviceUdid: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        devicesDeviceDetailsWithRequestBuilder(deviceUdid: deviceUdid).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/user/devices/{device_udid}
     - Returns the device details.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter deviceUdid: (path) The UDID of the device 
     - returns: RequestBuilder<Any> 
     */
    open class func devicesDeviceDetailsWithRequestBuilder(deviceUdid: String) -> RequestBuilder<Any> {
        var path = "/v0.1/user/devices/{device_udid}"
        let deviceUdidPreEscape = "\(APIHelper.mapValueToPathItem(deviceUdid))"
        let deviceUdidPostEscape = deviceUdidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{device_udid}", with: deviceUdidPostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Any>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter releaseId: (path) The ID of the release. 
     - parameter resignId: (path) The ID of the resign operation. 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter includeProvisioningProfile: (query) A boolean value that indicates if the provisioning profile should be return in addition to the status. When set to true, the provisioning profile will be returned only when status is &#39;complete&#39; or &#39;preparing_for_testers&#39;. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func devicesGetReleaseUpdateDevicesStatus(releaseId: String, resignId: String, ownerName: String, appName: String, includeProvisioningProfile: Bool? = nil, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        devicesGetReleaseUpdateDevicesStatusWithRequestBuilder(releaseId: releaseId, resignId: resignId, ownerName: ownerName, appName: appName, includeProvisioningProfile: includeProvisioningProfile).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/update_devices/{resign_id}
     - Returns the resign status to the caller
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter releaseId: (path) The ID of the release. 
     - parameter resignId: (path) The ID of the resign operation. 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter includeProvisioningProfile: (query) A boolean value that indicates if the provisioning profile should be return in addition to the status. When set to true, the provisioning profile will be returned only when status is &#39;complete&#39; or &#39;preparing_for_testers&#39;. (optional)
     - returns: RequestBuilder<Any> 
     */
    open class func devicesGetReleaseUpdateDevicesStatusWithRequestBuilder(releaseId: String, resignId: String, ownerName: String, appName: String, includeProvisioningProfile: Bool? = nil) -> RequestBuilder<Any> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/update_devices/{resign_id}"
        let releaseIdPreEscape = "\(APIHelper.mapValueToPathItem(releaseId))"
        let releaseIdPostEscape = releaseIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{release_id}", with: releaseIdPostEscape, options: .literal, range: nil)
        let resignIdPreEscape = "\(APIHelper.mapValueToPathItem(resignId))"
        let resignIdPostEscape = resignIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{resign_id}", with: resignIdPostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "include_provisioning_profile": includeProvisioningProfile?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<Any>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter distributionGroupName: (path) The name of the distribution group. 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter releaseId: (query) when provided, gets the provisioning state of the devices owned by users of this distribution group when compared to the provided release. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func devicesList(distributionGroupName: String, ownerName: String, appName: String, releaseId: Double? = nil, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: [InlineResponse2003]?,_ error: Error?) -> Void)) {
        devicesListWithRequestBuilder(distributionGroupName: distributionGroupName, ownerName: ownerName, appName: appName, releaseId: releaseId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/devices
     - Returns all devices associated with the given distribution group
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter distributionGroupName: (path) The name of the distribution group. 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter releaseId: (query) when provided, gets the provisioning state of the devices owned by users of this distribution group when compared to the provided release. (optional)
     - returns: RequestBuilder<[InlineResponse2003]> 
     */
    open class func devicesListWithRequestBuilder(distributionGroupName: String, ownerName: String, appName: String, releaseId: Double? = nil) -> RequestBuilder<[InlineResponse2003]> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/devices"
        let distributionGroupNamePreEscape = "\(APIHelper.mapValueToPathItem(distributionGroupName))"
        let distributionGroupNamePostEscape = distributionGroupNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{distribution_group_name}", with: distributionGroupNamePostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "release_id": releaseId?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[InlineResponse2003]>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter distributionGroupName: (path) The name of the distribution group. 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter unprovisionedOnly: (query) when true, filters out provisioned devices (optional, default to false)
     - parameter udids: (query) multiple UDIDs which should be part of the resulting CSV. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func devicesListCsvFormat(distributionGroupName: String, ownerName: String, appName: String, unprovisionedOnly: Bool? = nil, udids: [String]? = nil, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        devicesListCsvFormatWithRequestBuilder(distributionGroupName: distributionGroupName, ownerName: ownerName, appName: appName, unprovisionedOnly: unprovisionedOnly, udids: udids).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/devices/download_devices_list
     - Returns all devices associated with the given distribution group.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter distributionGroupName: (path) The name of the distribution group. 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter unprovisionedOnly: (query) when true, filters out provisioned devices (optional, default to false)
     - parameter udids: (query) multiple UDIDs which should be part of the resulting CSV. (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func devicesListCsvFormatWithRequestBuilder(distributionGroupName: String, ownerName: String, appName: String, unprovisionedOnly: Bool? = nil, udids: [String]? = nil) -> RequestBuilder<Void> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/devices/download_devices_list"
        let distributionGroupNamePreEscape = "\(APIHelper.mapValueToPathItem(distributionGroupName))"
        let distributionGroupNamePostEscape = distributionGroupNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{distribution_group_name}", with: distributionGroupNamePostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "unprovisioned_only": unprovisionedOnly?.encodeToJSON(), 
            "udids": udids?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<Void>.Type = API.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter userId: (path) The ID of the user 
     - parameter body: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func devicesRegisterUserForDevice(userId: String, body: InlineObject, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        devicesRegisterUserForDeviceWithRequestBuilder(userId: userId, body: body).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /v0.1/users/{user_id}/devices/register
     - Registers a user for an existing device
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter userId: (path) The ID of the user 
     - parameter body: (body)  
     - returns: RequestBuilder<Any> 
     */
    open class func devicesRegisterUserForDeviceWithRequestBuilder(userId: String, body: InlineObject) -> RequestBuilder<Any> {
        var path = "/v0.1/users/{user_id}/devices/register"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{user_id}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Any>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter deviceUdid: (path) The UDID of the device 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func devicesRemoveUserDevice(deviceUdid: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        devicesRemoveUserDeviceWithRequestBuilder(deviceUdid: deviceUdid).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /v0.1/user/devices/{device_udid}
     - Removes an existing device from a user
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter deviceUdid: (path) The UDID of the device 
     - returns: RequestBuilder<Void> 
     */
    open class func devicesRemoveUserDeviceWithRequestBuilder(deviceUdid: String) -> RequestBuilder<Void> {
        var path = "/v0.1/user/devices/{device_udid}"
        let deviceUdidPreEscape = "\(APIHelper.mapValueToPathItem(deviceUdid))"
        let deviceUdidPostEscape = deviceUdidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{device_udid}", with: deviceUdidPostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = API.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func devicesUserDevicesList(apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: [InlineResponse2003]?,_ error: Error?) -> Void)) {
        devicesUserDevicesListWithRequestBuilder().execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/user/devices
     - Returns all devices associated with the given user.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - returns: RequestBuilder<[InlineResponse2003]> 
     */
    open class func devicesUserDevicesListWithRequestBuilder() -> RequestBuilder<[InlineResponse2003]> {
        let path = "/v0.1/user/devices"
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[InlineResponse2003]>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter ownerName: (path) The name of the app owner 
     - parameter appName: (path) The name of the app 
     - parameter body: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func distibutionReleasesInstallAnalytics(ownerName: String, appName: String, body: InlineObject5, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        distibutionReleasesInstallAnalyticsWithRequestBuilder(ownerName: ownerName, appName: appName, body: body).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /v0.1/public/apps/{owner_name}/{app_name}/install_analytics
     - Notify download(s) for the provided distribution release(s).
     - parameter ownerName: (path) The name of the app owner 
     - parameter appName: (path) The name of the app 
     - parameter body: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func distibutionReleasesInstallAnalyticsWithRequestBuilder(ownerName: String, appName: String, body: InlineObject5) -> RequestBuilder<Void> {
        var path = "/v0.1/public/apps/{owner_name}/{app_name}/install_analytics"
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = API.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter releaseId: (path) The release_id 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func provisioningProfile(releaseId: Int, ownerName: String, appName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: ProvisioningProfileResponse?,_ error: Error?) -> Void)) {
        provisioningProfileWithRequestBuilder(releaseId: releaseId, ownerName: ownerName, appName: appName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/provisioning_profile
     - Return information about the provisioning profile. Only available for iOS.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter releaseId: (path) The release_id 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - returns: RequestBuilder<ProvisioningProfileResponse> 
     */
    open class func provisioningProfileWithRequestBuilder(releaseId: Int, ownerName: String, appName: String) -> RequestBuilder<ProvisioningProfileResponse> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/provisioning_profile"
        let releaseIdPreEscape = "\(APIHelper.mapValueToPathItem(releaseId))"
        let releaseIdPostEscape = releaseIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{release_id}", with: releaseIdPostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ProvisioningProfileResponse>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter uploadId: (path) The ID of the upload 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter body: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func releaseUploadsComplete(uploadId: String, ownerName: String, appName: String, body: InlineObject37, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        releaseUploadsCompleteWithRequestBuilder(uploadId: uploadId, ownerName: ownerName, appName: appName, body: body).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /v0.1/apps/{owner_name}/{app_name}/release_uploads/{upload_id}
     - Commits or aborts the upload process for a release for the specified application
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter uploadId: (path) The ID of the upload 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter body: (body)  
     - returns: RequestBuilder<Any> 
     */
    open class func releaseUploadsCompleteWithRequestBuilder(uploadId: String, ownerName: String, appName: String, body: InlineObject37) -> RequestBuilder<Any> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/release_uploads/{upload_id}"
        let uploadIdPreEscape = "\(APIHelper.mapValueToPathItem(uploadId))"
        let uploadIdPostEscape = uploadIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{upload_id}", with: uploadIdPostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Any>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter body: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func releaseUploadsCreate(ownerName: String, appName: String, body: InlineObject38, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        releaseUploadsCreateWithRequestBuilder(ownerName: ownerName, appName: appName, body: body).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /v0.1/apps/{owner_name}/{app_name}/release_uploads
     - Begins the upload process for a new release for the specified application.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter body: (body)  
     - returns: RequestBuilder<Any> 
     */
    open class func releaseUploadsCreateWithRequestBuilder(ownerName: String, appName: String, body: InlineObject38) -> RequestBuilder<Any> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/release_uploads"
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Any>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter releaseId: (path) The ID of the release 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter body: (body) The release information. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func releasesAddDistributionGroup(releaseId: Int, ownerName: String, appName: String, body: UNKNOWN_BASE_TYPE, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: InlineResponse2011?,_ error: Error?) -> Void)) {
        releasesAddDistributionGroupWithRequestBuilder(releaseId: releaseId, ownerName: ownerName, appName: appName, body: body).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/groups
     - Distributes a release to a group
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter releaseId: (path) The ID of the release 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter body: (body) The release information. 
     - returns: RequestBuilder<InlineResponse2011> 
     */
    open class func releasesAddDistributionGroupWithRequestBuilder(releaseId: Int, ownerName: String, appName: String, body: UNKNOWN_BASE_TYPE) -> RequestBuilder<InlineResponse2011> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/groups"
        let releaseIdPreEscape = "\(APIHelper.mapValueToPathItem(releaseId))"
        let releaseIdPostEscape = releaseIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{release_id}", with: releaseIdPostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<InlineResponse2011>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter releaseId: (path) The ID of the release 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter body: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func releasesAddStore(releaseId: Int, ownerName: String, appName: String, body: InlineObject33, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: InlineResponse2012?,_ error: Error?) -> Void)) {
        releasesAddStoreWithRequestBuilder(releaseId: releaseId, ownerName: ownerName, appName: appName, body: body).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/stores
     - Distributes a release to a store
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter releaseId: (path) The ID of the release 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter body: (body)  
     - returns: RequestBuilder<InlineResponse2012> 
     */
    open class func releasesAddStoreWithRequestBuilder(releaseId: Int, ownerName: String, appName: String, body: InlineObject33) -> RequestBuilder<InlineResponse2012> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/stores"
        let releaseIdPreEscape = "\(APIHelper.mapValueToPathItem(releaseId))"
        let releaseIdPostEscape = releaseIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{release_id}", with: releaseIdPostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<InlineResponse2012>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter releaseId: (path) The ID of the release 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter body: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func releasesAddTesters(releaseId: Int, ownerName: String, appName: String, body: InlineObject32, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: InlineResponse2011?,_ error: Error?) -> Void)) {
        releasesAddTestersWithRequestBuilder(releaseId: releaseId, ownerName: ownerName, appName: appName, body: body).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/testers
     - Distributes a release to a user
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter releaseId: (path) The ID of the release 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter body: (body)  
     - returns: RequestBuilder<InlineResponse2011> 
     */
    open class func releasesAddTestersWithRequestBuilder(releaseId: Int, ownerName: String, appName: String, body: InlineObject32) -> RequestBuilder<InlineResponse2011> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/testers"
        let releaseIdPreEscape = "\(APIHelper.mapValueToPathItem(releaseId))"
        let releaseIdPostEscape = releaseIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{release_id}", with: releaseIdPostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<InlineResponse2011>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter publishedOnly: (query) when *true*, filters out releases that were uploaded but were never distributed. Releases that under deleted distribution groups will not be filtered out. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func releasesAvailableToTester(ownerName: String, appName: String, publishedOnly: Bool? = nil, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: [InlineResponse20034]?,_ error: Error?) -> Void)) {
        releasesAvailableToTesterWithRequestBuilder(ownerName: ownerName, appName: appName, publishedOnly: publishedOnly).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/releases/filter_by_tester
     - Return detailed information about releases avaiable to a tester.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter publishedOnly: (query) when *true*, filters out releases that were uploaded but were never distributed. Releases that under deleted distribution groups will not be filtered out. (optional)
     - returns: RequestBuilder<[InlineResponse20034]> 
     */
    open class func releasesAvailableToTesterWithRequestBuilder(ownerName: String, appName: String, publishedOnly: Bool? = nil) -> RequestBuilder<[InlineResponse20034]> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/releases/filter_by_tester"
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "published_only": publishedOnly?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[InlineResponse20034]>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter releaseId: (path) The ID of the release 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func releasesDelete(releaseId: Int, ownerName: String, appName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        releasesDeleteWithRequestBuilder(releaseId: releaseId, ownerName: ownerName, appName: appName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /v0.1/apps/{owner_name}/{app_name}/releases/{release_id}
     - Deletes a release.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter releaseId: (path) The ID of the release 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - returns: RequestBuilder<Void> 
     */
    open class func releasesDeleteWithRequestBuilder(releaseId: Int, ownerName: String, appName: String) -> RequestBuilder<Void> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}"
        let releaseIdPreEscape = "\(APIHelper.mapValueToPathItem(releaseId))"
        let releaseIdPostEscape = releaseIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{release_id}", with: releaseIdPostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = API.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter releaseId: (path) The ID of the release 
     - parameter groupId: (path) The id of the distribution group 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func releasesDeleteDistributionGroup(releaseId: Int, groupId: String, ownerName: String, appName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        releasesDeleteDistributionGroupWithRequestBuilder(releaseId: releaseId, groupId: groupId, ownerName: ownerName, appName: appName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/groups/{group_id}
     - Delete the given distribution group from the release
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter releaseId: (path) The ID of the release 
     - parameter groupId: (path) The id of the distribution group 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - returns: RequestBuilder<Void> 
     */
    open class func releasesDeleteDistributionGroupWithRequestBuilder(releaseId: Int, groupId: String, ownerName: String, appName: String) -> RequestBuilder<Void> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/groups/{group_id}"
        let releaseIdPreEscape = "\(APIHelper.mapValueToPathItem(releaseId))"
        let releaseIdPostEscape = releaseIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{release_id}", with: releaseIdPostEscape, options: .literal, range: nil)
        let groupIdPreEscape = "\(APIHelper.mapValueToPathItem(groupId))"
        let groupIdPostEscape = groupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{group_id}", with: groupIdPostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = API.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter releaseId: (path) The ID of the release 
     - parameter storeId: (path) The id of the distribution store 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func releasesDeleteDistributionStore(releaseId: Int, storeId: String, ownerName: String, appName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        releasesDeleteDistributionStoreWithRequestBuilder(releaseId: releaseId, storeId: storeId, ownerName: ownerName, appName: appName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/stores/{store_id}
     - Delete the given distribution store from the release
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter releaseId: (path) The ID of the release 
     - parameter storeId: (path) The id of the distribution store 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - returns: RequestBuilder<Void> 
     */
    open class func releasesDeleteDistributionStoreWithRequestBuilder(releaseId: Int, storeId: String, ownerName: String, appName: String) -> RequestBuilder<Void> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/stores/{store_id}"
        let releaseIdPreEscape = "\(APIHelper.mapValueToPathItem(releaseId))"
        let releaseIdPostEscape = releaseIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{release_id}", with: releaseIdPostEscape, options: .literal, range: nil)
        let storeIdPreEscape = "\(APIHelper.mapValueToPathItem(storeId))"
        let storeIdPostEscape = storeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{store_id}", with: storeIdPostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = API.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter releaseId: (path) The ID of the release 
     - parameter testerId: (path) The id of the tester 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func releasesDeleteDistributionTester(releaseId: Int, testerId: String, ownerName: String, appName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        releasesDeleteDistributionTesterWithRequestBuilder(releaseId: releaseId, testerId: testerId, ownerName: ownerName, appName: appName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/testers/{tester_id}
     - Delete the given tester from the release
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter releaseId: (path) The ID of the release 
     - parameter testerId: (path) The id of the tester 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - returns: RequestBuilder<Void> 
     */
    open class func releasesDeleteDistributionTesterWithRequestBuilder(releaseId: Int, testerId: String, ownerName: String, appName: String) -> RequestBuilder<Void> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/testers/{tester_id}"
        let releaseIdPreEscape = "\(APIHelper.mapValueToPathItem(releaseId))"
        let releaseIdPostEscape = releaseIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{release_id}", with: releaseIdPostEscape, options: .literal, range: nil)
        let testerIdPreEscape = "\(APIHelper.mapValueToPathItem(testerId))"
        let testerIdPostEscape = testerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{tester_id}", with: testerIdPostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = API.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter testerId: (path) The id of the tester 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func releasesDeleteTesterFromDestinations(testerId: String, ownerName: String, appName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        releasesDeleteTesterFromDestinationsWithRequestBuilder(testerId: testerId, ownerName: ownerName, appName: appName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /v0.1/apps/{owner_name}/{app_name}/testers/{tester_id}
     - Delete the given tester from the all releases
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter testerId: (path) The id of the tester 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - returns: RequestBuilder<Void> 
     */
    open class func releasesDeleteTesterFromDestinationsWithRequestBuilder(testerId: String, ownerName: String, appName: String) -> RequestBuilder<Void> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/testers/{tester_id}"
        let testerIdPreEscape = "\(APIHelper.mapValueToPathItem(testerId))"
        let testerIdPostEscape = testerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{tester_id}", with: testerIdPostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = API.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter ownerName: (path) The name of the app owner 
     - parameter appName: (path) The name of the app 
     - parameter distributionGroupName: (path) The name of the distribution group. 
     - parameter releaseId: (path) The ID identifying the unique release. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func releasesDeleteWithDistributionGroupId(ownerName: String, appName: String, distributionGroupName: String, releaseId: Int, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        releasesDeleteWithDistributionGroupIdWithRequestBuilder(ownerName: ownerName, appName: appName, distributionGroupName: distributionGroupName, releaseId: releaseId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/releases/{release_id}
     - Deletes a release with id 'release_id' in a given distribution group.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter ownerName: (path) The name of the app owner 
     - parameter appName: (path) The name of the app 
     - parameter distributionGroupName: (path) The name of the distribution group. 
     - parameter releaseId: (path) The ID identifying the unique release. 
     - returns: RequestBuilder<Void> 
     */
    open class func releasesDeleteWithDistributionGroupIdWithRequestBuilder(ownerName: String, appName: String, distributionGroupName: String, releaseId: Int) -> RequestBuilder<Void> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/releases/{release_id}"
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let distributionGroupNamePreEscape = "\(APIHelper.mapValueToPathItem(distributionGroupName))"
        let distributionGroupNamePostEscape = distributionGroupNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{distribution_group_name}", with: distributionGroupNamePostEscape, options: .literal, range: nil)
        let releaseIdPreEscape = "\(APIHelper.mapValueToPathItem(releaseId))"
        let releaseIdPostEscape = releaseIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{release_id}", with: releaseIdPostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = API.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter appId: (path) The ID of the application 
     - parameter releaseId: (path) The release_id 
     - parameter token: (query) A hash that authorizes the download if it matches the release info. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func releasesGetIosManifest(appId: String, releaseId: Int, token: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        releasesGetIosManifestWithRequestBuilder(appId: appId, releaseId: releaseId, token: token).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/public/apps/{app_id}/releases/{release_id}/ios_manifest
     - Returns the manifest.plist in XML format for installing the release on a device. Only available for iOS.
     - parameter appId: (path) The ID of the application 
     - parameter releaseId: (path) The release_id 
     - parameter token: (query) A hash that authorizes the download if it matches the release info. 
     - returns: RequestBuilder<Void> 
     */
    open class func releasesGetIosManifestWithRequestBuilder(appId: String, releaseId: Int, token: String) -> RequestBuilder<Void> {
        var path = "/v0.1/public/apps/{app_id}/releases/{release_id}/ios_manifest"
        let appIdPreEscape = "\(APIHelper.mapValueToPathItem(appId))"
        let appIdPostEscape = appIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_id}", with: appIdPostEscape, options: .literal, range: nil)
        let releaseIdPreEscape = "\(APIHelper.mapValueToPathItem(releaseId))"
        let releaseIdPostEscape = releaseIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{release_id}", with: releaseIdPostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "token": token.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<Void>.Type = API.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter ownerName: (path) The name of the app owner 
     - parameter appName: (path) The name of the app 
     - parameter distributionGroupName: (path) The name of the distribution group. 
     - parameter releaseId: (path) Also supports the constant &#x60;latest&#x60;, which will return the latest release in the distribution group. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func releasesGetLatestByDistributionGroup(ownerName: String, appName: String, distributionGroupName: String, releaseId: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        releasesGetLatestByDistributionGroupWithRequestBuilder(ownerName: ownerName, appName: appName, distributionGroupName: distributionGroupName, releaseId: releaseId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/releases/{release_id}
     - Return detailed information about a distributed release in a given distribution group.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter ownerName: (path) The name of the app owner 
     - parameter appName: (path) The name of the app 
     - parameter distributionGroupName: (path) The name of the distribution group. 
     - parameter releaseId: (path) Also supports the constant &#x60;latest&#x60;, which will return the latest release in the distribution group. 
     - returns: RequestBuilder<Any> 
     */
    open class func releasesGetLatestByDistributionGroupWithRequestBuilder(ownerName: String, appName: String, distributionGroupName: String, releaseId: String) -> RequestBuilder<Any> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/releases/{release_id}"
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let distributionGroupNamePreEscape = "\(APIHelper.mapValueToPathItem(distributionGroupName))"
        let distributionGroupNamePostEscape = distributionGroupNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{distribution_group_name}", with: distributionGroupNamePostEscape, options: .literal, range: nil)
        let releaseIdPreEscape = "\(APIHelper.mapValueToPathItem(releaseId))"
        let releaseIdPostEscape = releaseIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{release_id}", with: releaseIdPostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Any>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter appSecret: (path) The secret of the target application 
     - parameter releaseHash: (path) The hash of the release or &#39;latest&#39; to get the latest release from all the distribution groups assigned to the current user. 
     - parameter udid: (query) When passing &#x60;udid&#x60; in the query string, a provisioning check for the given device ID will be done. Will be ignored for non-iOS platforms. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func releasesGetLatestByHash(appSecret: String, releaseHash: String, udid: String? = nil, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        releasesGetLatestByHashWithRequestBuilder(appSecret: appSecret, releaseHash: releaseHash, udid: udid).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/sdk/apps/{app_secret}/releases/{release_hash}
     - If 'latest' is not specified then it will return the specified release if it's enabled. If 'latest' is specified, regardless of whether a release hash is provided, the latest enabled release is returned.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter appSecret: (path) The secret of the target application 
     - parameter releaseHash: (path) The hash of the release or &#39;latest&#39; to get the latest release from all the distribution groups assigned to the current user. 
     - parameter udid: (query) When passing &#x60;udid&#x60; in the query string, a provisioning check for the given device ID will be done. Will be ignored for non-iOS platforms. (optional)
     - returns: RequestBuilder<Any> 
     */
    open class func releasesGetLatestByHashWithRequestBuilder(appSecret: String, releaseHash: String, udid: String? = nil) -> RequestBuilder<Any> {
        var path = "/v0.1/sdk/apps/{app_secret}/releases/{release_hash}"
        let appSecretPreEscape = "\(APIHelper.mapValueToPathItem(appSecret))"
        let appSecretPostEscape = appSecretPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_secret}", with: appSecretPostEscape, options: .literal, range: nil)
        let releaseHashPreEscape = "\(APIHelper.mapValueToPathItem(releaseHash))"
        let releaseHashPostEscape = releaseHashPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{release_hash}", with: releaseHashPostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "udid": udid?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<Any>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter appSecret: (path) The secret of the target application 
     - parameter distributionGroupId: (path) the id for destination 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func releasesGetLatestByPublicDistributionGroup(appSecret: String, distributionGroupId: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        releasesGetLatestByPublicDistributionGroupWithRequestBuilder(appSecret: appSecret, distributionGroupId: distributionGroupId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/public/sdk/apps/{app_secret}/distribution_groups/{distribution_group_id}/releases/latest
     - Get a release with 'latest' for the given public group.
     - parameter appSecret: (path) The secret of the target application 
     - parameter distributionGroupId: (path) the id for destination 
     - returns: RequestBuilder<Any> 
     */
    open class func releasesGetLatestByPublicDistributionGroupWithRequestBuilder(appSecret: String, distributionGroupId: String) -> RequestBuilder<Any> {
        var path = "/v0.1/public/sdk/apps/{app_secret}/distribution_groups/{distribution_group_id}/releases/latest"
        let appSecretPreEscape = "\(APIHelper.mapValueToPathItem(appSecret))"
        let appSecretPostEscape = appSecretPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_secret}", with: appSecretPostEscape, options: .literal, range: nil)
        let distributionGroupIdPreEscape = "\(APIHelper.mapValueToPathItem(distributionGroupId))"
        let distributionGroupIdPostEscape = distributionGroupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{distribution_group_id}", with: distributionGroupIdPostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Any>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter releaseId: (path) The ID of the release, or &#x60;latest&#x60; to get the latest release from all the distribution groups assigned to the current user. 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter udid: (query) when supplied, this call will also check if the given UDID is provisioned. Will be ignored for non-iOS platforms. The value will be returned in the property is_udid_provisioned. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func releasesGetLatestByUser(releaseId: String, ownerName: String, appName: String, udid: String? = nil, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        releasesGetLatestByUserWithRequestBuilder(releaseId: releaseId, ownerName: ownerName, appName: appName, udid: udid).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/releases/{release_id}
     - Get a release with id `release_id`. If `release_id` is `latest`, return the latest release that was distributed to the current user (from all the distribution groups).
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter releaseId: (path) The ID of the release, or &#x60;latest&#x60; to get the latest release from all the distribution groups assigned to the current user. 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter udid: (query) when supplied, this call will also check if the given UDID is provisioned. Will be ignored for non-iOS platforms. The value will be returned in the property is_udid_provisioned. (optional)
     - returns: RequestBuilder<Any> 
     */
    open class func releasesGetLatestByUserWithRequestBuilder(releaseId: String, ownerName: String, appName: String, udid: String? = nil) -> RequestBuilder<Any> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}"
        let releaseIdPreEscape = "\(APIHelper.mapValueToPathItem(releaseId))"
        let releaseIdPostEscape = releaseIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{release_id}", with: releaseIdPostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "udid": udid?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<Any>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter appSecret: (path) The secret of the target application 
     - parameter udid: (query) When passing &#x60;udid&#x60; in the query string, a provisioning check for the given device ID will be done. Will be ignored for non-iOS platforms. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func releasesGetLatestPrivateRelease(appSecret: String, udid: String? = nil, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        releasesGetLatestPrivateReleaseWithRequestBuilder(appSecret: appSecret, udid: udid).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/sdk/apps/{app_secret}/releases/private/latest
     - Get the latest release distributed to a private group the given user is a member of for the given app.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter appSecret: (path) The secret of the target application 
     - parameter udid: (query) When passing &#x60;udid&#x60; in the query string, a provisioning check for the given device ID will be done. Will be ignored for non-iOS platforms. (optional)
     - returns: RequestBuilder<Any> 
     */
    open class func releasesGetLatestPrivateReleaseWithRequestBuilder(appSecret: String, udid: String? = nil) -> RequestBuilder<Any> {
        var path = "/v0.1/sdk/apps/{app_secret}/releases/private/latest"
        let appSecretPreEscape = "\(APIHelper.mapValueToPathItem(appSecret))"
        let appSecretPostEscape = appSecretPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_secret}", with: appSecretPostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "udid": udid?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<Any>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter appSecret: (path) The secret of the target application 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func releasesGetLatestPublicRelease(appSecret: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        releasesGetLatestPublicReleaseWithRequestBuilder(appSecret: appSecret).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/public/sdk/apps/{app_secret}/releases/latest
     - Get the latest public release for the given app.
     - parameter appSecret: (path) The secret of the target application 
     - returns: RequestBuilder<Any> 
     */
    open class func releasesGetLatestPublicReleaseWithRequestBuilder(appSecret: String) -> RequestBuilder<Any> {
        var path = "/v0.1/public/sdk/apps/{app_secret}/releases/latest"
        let appSecretPreEscape = "\(APIHelper.mapValueToPathItem(appSecret))"
        let appSecretPostEscape = appSecretPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_secret}", with: appSecretPostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Any>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter appSecret: (path) The secret of the target application 
     - parameter releaseHash: (path) The hash of the release 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func releasesGetPublicGroupsForReleaseByHash(appSecret: String, releaseHash: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: [InlineResponse2005]?,_ error: Error?) -> Void)) {
        releasesGetPublicGroupsForReleaseByHashWithRequestBuilder(appSecret: appSecret, releaseHash: releaseHash).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/public/sdk/apps/{app_secret}/releases/{release_hash}/public_distribution_groups
     - Get all public distribution groups that a given release has been distributed to
     - parameter appSecret: (path) The secret of the target application 
     - parameter releaseHash: (path) The hash of the release 
     - returns: RequestBuilder<[InlineResponse2005]> 
     */
    open class func releasesGetPublicGroupsForReleaseByHashWithRequestBuilder(appSecret: String, releaseHash: String) -> RequestBuilder<[InlineResponse2005]> {
        var path = "/v0.1/public/sdk/apps/{app_secret}/releases/{release_hash}/public_distribution_groups"
        let appSecretPreEscape = "\(APIHelper.mapValueToPathItem(appSecret))"
        let appSecretPostEscape = appSecretPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_secret}", with: appSecretPostEscape, options: .literal, range: nil)
        let releaseHashPreEscape = "\(APIHelper.mapValueToPathItem(releaseHash))"
        let releaseHashPostEscape = releaseHashPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{release_hash}", with: releaseHashPostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[InlineResponse2005]>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter appSecret: (path) The secret of the application. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func releasesGetSparkleFeed(appSecret: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        releasesGetSparkleFeedWithRequestBuilder(appSecret: appSecret).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/public/sparkle/apps/{app_secret}
     - Gets the sparkle feed of the releases that are distributed to all the public distribution groups.
     - parameter appSecret: (path) The secret of the application. 
     - returns: RequestBuilder<Void> 
     */
    open class func releasesGetSparkleFeedWithRequestBuilder(appSecret: String) -> RequestBuilder<Void> {
        var path = "/v0.1/public/sparkle/apps/{app_secret}"
        let appSecretPreEscape = "\(APIHelper.mapValueToPathItem(appSecret))"
        let appSecretPostEscape = appSecretPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_secret}", with: appSecretPostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = API.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter publishedOnly: (query) When *true*, filters out releases that were uploaded but were never distributed. Releases that under deleted distribution groups will not be filtered out. (optional)
     - parameter scope: (query) When the scope is &#39;tester&#39;, only includes releases that have been distributed to groups that the user belongs to. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func releasesList(ownerName: String, appName: String, publishedOnly: Bool? = nil, scope: String? = nil, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: [InlineResponse20034]?,_ error: Error?) -> Void)) {
        releasesListWithRequestBuilder(ownerName: ownerName, appName: appName, publishedOnly: publishedOnly, scope: scope).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/releases
     - Return basic information about releases.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter publishedOnly: (query) When *true*, filters out releases that were uploaded but were never distributed. Releases that under deleted distribution groups will not be filtered out. (optional)
     - parameter scope: (query) When the scope is &#39;tester&#39;, only includes releases that have been distributed to groups that the user belongs to. (optional)
     - returns: RequestBuilder<[InlineResponse20034]> 
     */
    open class func releasesListWithRequestBuilder(ownerName: String, appName: String, publishedOnly: Bool? = nil, scope: String? = nil) -> RequestBuilder<[InlineResponse20034]> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/releases"
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "published_only": publishedOnly?.encodeToJSON(), 
            "scope": scope?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[InlineResponse20034]>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter distributionGroupName: (path) The name of the distribution group. 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func releasesListByDistributionGroup(distributionGroupName: String, ownerName: String, appName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: [InlineResponse20062]?,_ error: Error?) -> Void)) {
        releasesListByDistributionGroupWithRequestBuilder(distributionGroupName: distributionGroupName, ownerName: ownerName, appName: appName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/releases
     - Return basic information about distributed releases in a given distribution group.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter distributionGroupName: (path) The name of the distribution group. 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - returns: RequestBuilder<[InlineResponse20062]> 
     */
    open class func releasesListByDistributionGroupWithRequestBuilder(distributionGroupName: String, ownerName: String, appName: String) -> RequestBuilder<[InlineResponse20062]> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/releases"
        let distributionGroupNamePreEscape = "\(APIHelper.mapValueToPathItem(distributionGroupName))"
        let distributionGroupNamePostEscape = distributionGroupNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{distribution_group_name}", with: distributionGroupNamePostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[InlineResponse20062]>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func releasesListLatest(ownerName: String, appName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: [InlineResponse20034]?,_ error: Error?) -> Void)) {
        releasesListLatestWithRequestBuilder(ownerName: ownerName, appName: appName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/recent_releases
     - Get the latest release from every distribution group associated with an application.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - returns: RequestBuilder<[InlineResponse20034]> 
     */
    open class func releasesListLatestWithRequestBuilder(ownerName: String, appName: String) -> RequestBuilder<[InlineResponse20034]> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/recent_releases"
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[InlineResponse20034]>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func releasesListTesterApps(apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: [InlineResponse2004]?,_ error: Error?) -> Void)) {
        releasesListTesterAppsWithRequestBuilder().execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/tester/apps
     - Return a list of applications that the user has tester permission to with the latest release for each.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - returns: RequestBuilder<[InlineResponse2004]> 
     */
    open class func releasesListTesterAppsWithRequestBuilder() -> RequestBuilder<[InlineResponse2004]> {
        let path = "/v0.1/tester/apps"
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[InlineResponse2004]>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter releaseId: (path) The ID of the release 
     - parameter groupId: (path) The id of the releases destination 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter destinationGroupUpdateDetails: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func releasesPutDistributionGroup(releaseId: Int, groupId: UUID, ownerName: String, appName: String, destinationGroupUpdateDetails: InlineObject34? = nil, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        releasesPutDistributionGroupWithRequestBuilder(releaseId: releaseId, groupId: groupId, ownerName: ownerName, appName: appName, destinationGroupUpdateDetails: destinationGroupUpdateDetails).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/groups/{group_id}
     - Update details about the specified distribution group associated with the release
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter releaseId: (path) The ID of the release 
     - parameter groupId: (path) The id of the releases destination 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter destinationGroupUpdateDetails: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func releasesPutDistributionGroupWithRequestBuilder(releaseId: Int, groupId: UUID, ownerName: String, appName: String, destinationGroupUpdateDetails: InlineObject34? = nil) -> RequestBuilder<Void> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/groups/{group_id}"
        let releaseIdPreEscape = "\(APIHelper.mapValueToPathItem(releaseId))"
        let releaseIdPostEscape = releaseIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{release_id}", with: releaseIdPostEscape, options: .literal, range: nil)
        let groupIdPreEscape = "\(APIHelper.mapValueToPathItem(groupId))"
        let groupIdPostEscape = groupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{group_id}", with: groupIdPostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: destinationGroupUpdateDetails)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = API.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter releaseId: (path) The ID of the release 
     - parameter testerId: (path) The id of the tester 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter destinationTesterUpdateDetails: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func releasesPutDistributionTester(releaseId: Int, testerId: UUID, ownerName: String, appName: String, destinationTesterUpdateDetails: InlineObject31? = nil, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        releasesPutDistributionTesterWithRequestBuilder(releaseId: releaseId, testerId: testerId, ownerName: ownerName, appName: appName, destinationTesterUpdateDetails: destinationTesterUpdateDetails).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/testers/{tester_id}
     - Update details about the specified tester associated with the release
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter releaseId: (path) The ID of the release 
     - parameter testerId: (path) The id of the tester 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter destinationTesterUpdateDetails: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func releasesPutDistributionTesterWithRequestBuilder(releaseId: Int, testerId: UUID, ownerName: String, appName: String, destinationTesterUpdateDetails: InlineObject31? = nil) -> RequestBuilder<Void> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/testers/{tester_id}"
        let releaseIdPreEscape = "\(APIHelper.mapValueToPathItem(releaseId))"
        let releaseIdPostEscape = releaseIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{release_id}", with: releaseIdPostEscape, options: .literal, range: nil)
        let testerIdPreEscape = "\(APIHelper.mapValueToPathItem(testerId))"
        let testerIdPostEscape = testerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{tester_id}", with: testerIdPostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: destinationTesterUpdateDetails)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = API.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter releaseId: (path) The ID of the release 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter body: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func releasesUpdate(releaseId: Int, ownerName: String, appName: String, body: InlineObject36, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        releasesUpdateWithRequestBuilder(releaseId: releaseId, ownerName: ownerName, appName: appName, body: body).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /v0.1/apps/{owner_name}/{app_name}/releases/{release_id}
     - Updates a release.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter releaseId: (path) The ID of the release 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter body: (body)  
     - returns: RequestBuilder<Any> 
     */
    open class func releasesUpdateWithRequestBuilder(releaseId: Int, ownerName: String, appName: String, body: InlineObject36) -> RequestBuilder<Any> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}"
        let releaseIdPreEscape = "\(APIHelper.mapValueToPathItem(releaseId))"
        let releaseIdPostEscape = releaseIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{release_id}", with: releaseIdPostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Any>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter releaseId: (path) The ID of the release 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter body: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func releasesUpdateDetails(releaseId: Int, ownerName: String, appName: String, body: InlineObject35, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        releasesUpdateDetailsWithRequestBuilder(releaseId: releaseId, ownerName: ownerName, appName: appName, body: body).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /v0.1/apps/{owner_name}/{app_name}/releases/{release_id}
     - Update details of a release.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter releaseId: (path) The ID of the release 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter body: (body)  
     - returns: RequestBuilder<Any> 
     */
    open class func releasesUpdateDetailsWithRequestBuilder(releaseId: Int, ownerName: String, appName: String, body: InlineObject35) -> RequestBuilder<Any> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}"
        let releaseIdPreEscape = "\(APIHelper.mapValueToPathItem(releaseId))"
        let releaseIdPostEscape = releaseIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{release_id}", with: releaseIdPostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Any>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func storeNotificationsGetNotificationByAppId(ownerName: String, appName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        storeNotificationsGetNotificationByAppIdWithRequestBuilder(ownerName: ownerName, appName: appName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/store_service_status
     - Application specific store service status
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - returns: RequestBuilder<Any> 
     */
    open class func storeNotificationsGetNotificationByAppIdWithRequestBuilder(ownerName: String, appName: String) -> RequestBuilder<Any> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/store_service_status"
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Any>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter storeName: (path) The name of the store 
     - parameter releaseId: (path) The ID of the realease 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func storeReleasePublishLogsGet(storeName: String, releaseId: String, ownerName: String, appName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        storeReleasePublishLogsGetWithRequestBuilder(storeName: storeName, releaseId: releaseId, ownerName: ownerName, appName: appName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}/releases/{release_id}/publish_logs
     - Returns publish logs for a particular release published to a particular store
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter storeName: (path) The name of the store 
     - parameter releaseId: (path) The ID of the realease 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - returns: RequestBuilder<Void> 
     */
    open class func storeReleasePublishLogsGetWithRequestBuilder(storeName: String, releaseId: String, ownerName: String, appName: String) -> RequestBuilder<Void> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}/releases/{release_id}/publish_logs"
        let storeNamePreEscape = "\(APIHelper.mapValueToPathItem(storeName))"
        let storeNamePostEscape = storeNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{store_name}", with: storeNamePostEscape, options: .literal, range: nil)
        let releaseIdPreEscape = "\(APIHelper.mapValueToPathItem(releaseId))"
        let releaseIdPostEscape = releaseIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{release_id}", with: releaseIdPostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = API.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter storeName: (path) The name of the store 
     - parameter releaseId: (path) The id of the release 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter body: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func storeReleasesDelete(storeName: String, releaseId: String, ownerName: String, appName: String, body: String? = nil, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        storeReleasesDeleteWithRequestBuilder(storeName: storeName, releaseId: releaseId, ownerName: ownerName, appName: appName, body: body).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}/releases/{release_id}
     - delete the release with release Id
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter storeName: (path) The name of the store 
     - parameter releaseId: (path) The id of the release 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter body: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func storeReleasesDeleteWithRequestBuilder(storeName: String, releaseId: String, ownerName: String, appName: String, body: String? = nil) -> RequestBuilder<Void> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}/releases/{release_id}"
        let storeNamePreEscape = "\(APIHelper.mapValueToPathItem(storeName))"
        let storeNamePostEscape = storeNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{store_name}", with: storeNamePostEscape, options: .literal, range: nil)
        let releaseIdPreEscape = "\(APIHelper.mapValueToPathItem(releaseId))"
        let releaseIdPostEscape = releaseIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{release_id}", with: releaseIdPostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = API.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter storeName: (path) The name of the store 
     - parameter releaseId: (path) The name of the store 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func storeReleasesGet(storeName: String, releaseId: String, ownerName: String, appName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: [InlineResponse20059]?,_ error: Error?) -> Void)) {
        storeReleasesGetWithRequestBuilder(storeName: storeName, releaseId: releaseId, ownerName: ownerName, appName: appName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}/releases/{release_id}
     - Return releases published in a store for releaseId and storeId
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter storeName: (path) The name of the store 
     - parameter releaseId: (path) The name of the store 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - returns: RequestBuilder<[InlineResponse20059]> 
     */
    open class func storeReleasesGetWithRequestBuilder(storeName: String, releaseId: String, ownerName: String, appName: String) -> RequestBuilder<[InlineResponse20059]> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}/releases/{release_id}"
        let storeNamePreEscape = "\(APIHelper.mapValueToPathItem(storeName))"
        let storeNamePostEscape = storeNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{store_name}", with: storeNamePostEscape, options: .literal, range: nil)
        let releaseIdPreEscape = "\(APIHelper.mapValueToPathItem(releaseId))"
        let releaseIdPostEscape = releaseIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{release_id}", with: releaseIdPostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[InlineResponse20059]>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter storeName: (path) The name of the store 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func storeReleasesGetLatest(storeName: String, ownerName: String, appName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: [InlineResponse20059]?,_ error: Error?) -> Void)) {
        storeReleasesGetLatestWithRequestBuilder(storeName: storeName, ownerName: ownerName, appName: appName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}/latest_release
     - Returns the latest release published in a store.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter storeName: (path) The name of the store 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - returns: RequestBuilder<[InlineResponse20059]> 
     */
    open class func storeReleasesGetLatestWithRequestBuilder(storeName: String, ownerName: String, appName: String) -> RequestBuilder<[InlineResponse20059]> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}/latest_release"
        let storeNamePreEscape = "\(APIHelper.mapValueToPathItem(storeName))"
        let storeNamePostEscape = storeNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{store_name}", with: storeNamePostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[InlineResponse20059]>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter storeName: (path) The name of the store 
     - parameter releaseId: (path) The id of the release 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func storeReleasesGetPublishError(storeName: String, releaseId: Double, ownerName: String, appName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        storeReleasesGetPublishErrorWithRequestBuilder(storeName: storeName, releaseId: releaseId, ownerName: ownerName, appName: appName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}/releases/{release_id}/publish_error_details
     - Return the Error Details of release which failed in publishing.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter storeName: (path) The name of the store 
     - parameter releaseId: (path) The id of the release 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - returns: RequestBuilder<Any> 
     */
    open class func storeReleasesGetPublishErrorWithRequestBuilder(storeName: String, releaseId: Double, ownerName: String, appName: String) -> RequestBuilder<Any> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}/releases/{release_id}/publish_error_details"
        let storeNamePreEscape = "\(APIHelper.mapValueToPathItem(storeName))"
        let storeNamePostEscape = storeNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{store_name}", with: storeNamePostEscape, options: .literal, range: nil)
        let releaseIdPreEscape = "\(APIHelper.mapValueToPathItem(releaseId))"
        let releaseIdPostEscape = releaseIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{release_id}", with: releaseIdPostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Any>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter storeName: (path) The name of the store 
     - parameter releaseId: (path) The id of the release 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func storeReleasesGetRealTimeStatusByReleaseId(storeName: String, releaseId: Double, ownerName: String, appName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        storeReleasesGetRealTimeStatusByReleaseIdWithRequestBuilder(storeName: storeName, releaseId: releaseId, ownerName: ownerName, appName: appName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}/releases/{release_id}/realtimestatus
     - Return the Real time Status publishing of release from store.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter storeName: (path) The name of the store 
     - parameter releaseId: (path) The id of the release 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - returns: RequestBuilder<Any> 
     */
    open class func storeReleasesGetRealTimeStatusByReleaseIdWithRequestBuilder(storeName: String, releaseId: Double, ownerName: String, appName: String) -> RequestBuilder<Any> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}/releases/{release_id}/realtimestatus"
        let storeNamePreEscape = "\(APIHelper.mapValueToPathItem(storeName))"
        let storeNamePostEscape = storeNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{store_name}", with: storeNamePostEscape, options: .literal, range: nil)
        let releaseIdPreEscape = "\(APIHelper.mapValueToPathItem(releaseId))"
        let releaseIdPostEscape = releaseIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{release_id}", with: releaseIdPostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Any>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter storeName: (path) The name of the store 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func storeReleasesList(storeName: String, ownerName: String, appName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: [InlineResponse20060]?,_ error: Error?) -> Void)) {
        storeReleasesListWithRequestBuilder(storeName: storeName, ownerName: ownerName, appName: appName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}/releases
     - Return all releases published  in a store
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter storeName: (path) The name of the store 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - returns: RequestBuilder<[InlineResponse20060]> 
     */
    open class func storeReleasesListWithRequestBuilder(storeName: String, ownerName: String, appName: String) -> RequestBuilder<[InlineResponse20060]> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}/releases"
        let storeNamePreEscape = "\(APIHelper.mapValueToPathItem(storeName))"
        let storeNamePostEscape = storeNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{store_name}", with: storeNamePostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[InlineResponse20060]>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter body: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func storesCreate(ownerName: String, appName: String, body: InlineObject50, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        storesCreateWithRequestBuilder(ownerName: ownerName, appName: appName, body: body).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /v0.1/apps/{owner_name}/{app_name}/distribution_stores
     - Create a new external store for the specified application.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter body: (body)  
     - returns: RequestBuilder<Any> 
     */
    open class func storesCreateWithRequestBuilder(ownerName: String, appName: String, body: InlineObject50) -> RequestBuilder<Any> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/distribution_stores"
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Any>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter storeName: (path) The name of the store 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter body: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func storesDelete(storeName: String, ownerName: String, appName: String, body: String? = nil, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        storesDeleteWithRequestBuilder(storeName: storeName, ownerName: ownerName, appName: appName, body: body).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}
     - delete the store based on specific store name.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter storeName: (path) The name of the store 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter body: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func storesDeleteWithRequestBuilder(storeName: String, ownerName: String, appName: String, body: String? = nil) -> RequestBuilder<Void> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}"
        let storeNamePreEscape = "\(APIHelper.mapValueToPathItem(storeName))"
        let storeNamePostEscape = storeNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{store_name}", with: storeNamePostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = API.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter storeName: (path) The name of the store 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func storesGet(storeName: String, ownerName: String, appName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        storesGetWithRequestBuilder(storeName: storeName, ownerName: ownerName, appName: appName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}
     - Return the store details for specified store name.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter storeName: (path) The name of the store 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - returns: RequestBuilder<Any> 
     */
    open class func storesGetWithRequestBuilder(storeName: String, ownerName: String, appName: String) -> RequestBuilder<Any> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}"
        let storeNamePreEscape = "\(APIHelper.mapValueToPathItem(storeName))"
        let storeNamePostEscape = storeNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{store_name}", with: storeNamePostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Any>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func storesList(ownerName: String, appName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: [InlineResponse20061]?,_ error: Error?) -> Void)) {
        storesListWithRequestBuilder(ownerName: ownerName, appName: appName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/distribution_stores
     - Get all the store details from Storage store table for a particular application.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - returns: RequestBuilder<[InlineResponse20061]> 
     */
    open class func storesListWithRequestBuilder(ownerName: String, appName: String) -> RequestBuilder<[InlineResponse20061]> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/distribution_stores"
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[InlineResponse20061]>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter storeName: (path) The name of the store 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter body: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func storesPatch(storeName: String, ownerName: String, appName: String, body: InlineObject49, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        storesPatchWithRequestBuilder(storeName: storeName, ownerName: ownerName, appName: appName, body: body).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}
     - Update the store.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter storeName: (path) The name of the store 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter body: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func storesPatchWithRequestBuilder(storeName: String, ownerName: String, appName: String, body: InlineObject49) -> RequestBuilder<Void> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}"
        let storeNamePreEscape = "\(APIHelper.mapValueToPathItem(storeName))"
        let storeNamePostEscape = storeNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{store_name}", with: storeNamePostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = API.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
