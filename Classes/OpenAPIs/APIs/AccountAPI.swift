//
// AccountAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation



open class AccountAPI {
    /**

     - parameter invitationToken: (path) The app invitation token that was sent to the user 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func appInvitationsAccept(invitationToken: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        appInvitationsAcceptWithRequestBuilder(invitationToken: invitationToken).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /v0.1/user/invitations/apps/{invitation_token}/accept
     - Accepts a pending invitation for the specified user
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter invitationToken: (path) The app invitation token that was sent to the user 
     - returns: RequestBuilder<Void> 
     */
    open class func appInvitationsAcceptWithRequestBuilder(invitationToken: String) -> RequestBuilder<Void> {
        var path = "/v0.1/user/invitations/apps/{invitation_token}/accept"
        let invitationTokenPreEscape = "\(APIHelper.mapValueToPathItem(invitationToken))"
        let invitationTokenPostEscape = invitationTokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{invitation_token}", with: invitationTokenPostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = API.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter userEmail: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func appInvitationsCreate(ownerName: String, appName: String, userEmail: InlineObject44? = nil, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        appInvitationsCreateWithRequestBuilder(ownerName: ownerName, appName: appName, userEmail: userEmail).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /v0.1/apps/{owner_name}/{app_name}/invitations
     - Invites a new or existing user to an app
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter userEmail: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func appInvitationsCreateWithRequestBuilder(ownerName: String, appName: String, userEmail: InlineObject44? = nil) -> RequestBuilder<Void> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/invitations"
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: userEmail)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = API.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter userEmail: (path) The email of the user to invite 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func appInvitationsCreateByEmail(ownerName: String, appName: String, userEmail: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        appInvitationsCreateByEmailWithRequestBuilder(ownerName: ownerName, appName: appName, userEmail: userEmail).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /v0.1/apps/{owner_name}/{app_name}/invitations/{user_email}
     - Invites a new or existing user to an app
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter userEmail: (path) The email of the user to invite 
     - returns: RequestBuilder<Void> 
     */
    open class func appInvitationsCreateByEmailWithRequestBuilder(ownerName: String, appName: String, userEmail: String) -> RequestBuilder<Void> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/invitations/{user_email}"
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let userEmailPreEscape = "\(APIHelper.mapValueToPathItem(userEmail))"
        let userEmailPostEscape = userEmailPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{user_email}", with: userEmailPostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = API.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter userEmail: (path) The email of the user to invite 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func appInvitationsDelete(ownerName: String, appName: String, userEmail: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        appInvitationsDeleteWithRequestBuilder(ownerName: ownerName, appName: appName, userEmail: userEmail).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /v0.1/apps/{owner_name}/{app_name}/invitations/{user_email}
     - Removes a user's invitation to an app
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter userEmail: (path) The email of the user to invite 
     - returns: RequestBuilder<Void> 
     */
    open class func appInvitationsDeleteWithRequestBuilder(ownerName: String, appName: String, userEmail: String) -> RequestBuilder<Void> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/invitations/{user_email}"
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let userEmailPreEscape = "\(APIHelper.mapValueToPathItem(userEmail))"
        let userEmailPostEscape = userEmailPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{user_email}", with: userEmailPostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = API.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func appInvitationsList(ownerName: String, appName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        appInvitationsListWithRequestBuilder(ownerName: ownerName, appName: appName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/invitations
     - Gets the pending invitations for the app
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - returns: RequestBuilder<Any> 
     */
    open class func appInvitationsListWithRequestBuilder(ownerName: String, appName: String) -> RequestBuilder<Any> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/invitations"
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Any>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter invitationToken: (path) The app invitation token that was sent to the user 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func appInvitationsReject(invitationToken: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        appInvitationsRejectWithRequestBuilder(invitationToken: invitationToken).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /v0.1/user/invitations/apps/{invitation_token}/reject
     - Rejects a pending invitation for the specified user
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter invitationToken: (path) The app invitation token that was sent to the user 
     - returns: RequestBuilder<Void> 
     */
    open class func appInvitationsRejectWithRequestBuilder(invitationToken: String) -> RequestBuilder<Void> {
        var path = "/v0.1/user/invitations/apps/{invitation_token}/reject"
        let invitationTokenPreEscape = "\(APIHelper.mapValueToPathItem(invitationToken))"
        let invitationTokenPostEscape = invitationTokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{invitation_token}", with: invitationTokenPostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = API.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter userEmail: (path) The email of the user to invite 
     - parameter userInvitationPermissionsData: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func appInvitationsUpdatePermissions(ownerName: String, appName: String, userEmail: String, userInvitationPermissionsData: InlineObject43? = nil, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        appInvitationsUpdatePermissionsWithRequestBuilder(ownerName: ownerName, appName: appName, userEmail: userEmail, userInvitationPermissionsData: userInvitationPermissionsData).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /v0.1/apps/{owner_name}/{app_name}/invitations/{user_email}
     - Update pending invitation permission
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter userEmail: (path) The email of the user to invite 
     - parameter userInvitationPermissionsData: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func appInvitationsUpdatePermissionsWithRequestBuilder(ownerName: String, appName: String, userEmail: String, userInvitationPermissionsData: InlineObject43? = nil) -> RequestBuilder<Void> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/invitations/{user_email}"
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let userEmailPreEscape = "\(APIHelper.mapValueToPathItem(userEmail))"
        let userEmailPostEscape = userEmailPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{user_email}", with: userEmailPostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: userInvitationPermissionsData)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = API.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter app: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func appsCreate(app: InlineObject72, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        appsCreateWithRequestBuilder(app: app).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /v0.1/apps
     - Creates a new app and returns it to the caller
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter app: (body)  
     - returns: RequestBuilder<Any> 
     */
    open class func appsCreateWithRequestBuilder(app: InlineObject72) -> RequestBuilder<Any> {
        let path = "/v0.1/apps"
        let URLString = API.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: app)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Any>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter orgName: (path) The organization&#39;s name 
     - parameter app: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func appsCreateForOrg(orgName: String, app: InlineObject23, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        appsCreateForOrgWithRequestBuilder(orgName: orgName, app: app).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /v0.1/orgs/{org_name}/apps
     - Creates a new app for the organization and returns it to the caller
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter orgName: (path) The organization&#39;s name 
     - parameter app: (body)  
     - returns: RequestBuilder<Any> 
     */
    open class func appsCreateForOrgWithRequestBuilder(orgName: String, app: InlineObject23) -> RequestBuilder<Any> {
        var path = "/v0.1/orgs/{org_name}/apps"
        let orgNamePreEscape = "\(APIHelper.mapValueToPathItem(orgName))"
        let orgNamePostEscape = orgNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org_name}", with: orgNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: app)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Any>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter appName: (path) The name of the application 
     - parameter ownerName: (path) The name of the owner 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func appsDelete(appName: String, ownerName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        appsDeleteWithRequestBuilder(appName: appName, ownerName: ownerName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /v0.1/apps/{owner_name}/{app_name}
     - Delete an app
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter appName: (path) The name of the application 
     - parameter ownerName: (path) The name of the owner 
     - returns: RequestBuilder<Void> 
     */
    open class func appsDeleteWithRequestBuilder(appName: String, ownerName: String) -> RequestBuilder<Void> {
        var path = "/v0.1/apps/{owner_name}/{app_name}"
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = API.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func appsDeleteAvatar(ownerName: String, appName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        appsDeleteAvatarWithRequestBuilder(ownerName: ownerName, appName: appName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /v0.1/apps/{owner_name}/{app_name}/avatar
     - Deletes the uploaded app avatar
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - returns: RequestBuilder<Any> 
     */
    open class func appsDeleteAvatarWithRequestBuilder(ownerName: String, appName: String) -> RequestBuilder<Any> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/avatar"
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Any>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func appsGet(ownerName: String, appName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        appsGetWithRequestBuilder(ownerName: ownerName, appName: appName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}
     - Return a specific app with the given app name which belongs to the given owner.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - returns: RequestBuilder<Any> 
     */
    open class func appsGetWithRequestBuilder(ownerName: String, appName: String) -> RequestBuilder<Any> {
        var path = "/v0.1/apps/{owner_name}/{app_name}"
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Any>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter orgName: (path) The organization&#39;s name 
     - parameter userName: (path) The slug name of the user 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func appsGetForOrgUser(orgName: String, userName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: [Any]?,_ error: Error?) -> Void)) {
        appsGetForOrgUserWithRequestBuilder(orgName: orgName, userName: userName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/orgs/{org_name}/users/{user_name}/apps
     - Get a user apps information from an organization by name
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter orgName: (path) The organization&#39;s name 
     - parameter userName: (path) The slug name of the user 
     - returns: RequestBuilder<[Any]> 
     */
    open class func appsGetForOrgUserWithRequestBuilder(orgName: String, userName: String) -> RequestBuilder<[Any]> {
        var path = "/v0.1/orgs/{org_name}/users/{user_name}/apps"
        let orgNamePreEscape = "\(APIHelper.mapValueToPathItem(orgName))"
        let orgNamePostEscape = orgNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org_name}", with: orgNamePostEscape, options: .literal, range: nil)
        let userNamePreEscape = "\(APIHelper.mapValueToPathItem(userName))"
        let userNamePostEscape = userNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{user_name}", with: userNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Any]>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter appName: (path) The name of the application 
     - parameter ownerName: (path) The name of the owner 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func appsGetTeams(appName: String, ownerName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: [Any]?,_ error: Error?) -> Void)) {
        appsGetTeamsWithRequestBuilder(appName: appName, ownerName: ownerName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/teams
     - Returns the details of all teams that have access to the app.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter appName: (path) The name of the application 
     - parameter ownerName: (path) The name of the owner 
     - returns: RequestBuilder<[Any]> 
     */
    open class func appsGetTeamsWithRequestBuilder(appName: String, ownerName: String) -> RequestBuilder<[Any]> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/teams"
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Any]>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter orderBy
     */
    public enum OrderBy_appsList: String, CaseIterable {
        case displayName = "display_name"
        case name = "name"
    }

    /**

     - parameter orderBy: (query) The name of the attribute by which to order the response by. By default, apps are in order of creation. All results are ordered in ascending order. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func appsList(orderBy: OrderBy_appsList? = nil, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: [Any]?,_ error: Error?) -> Void)) {
        appsListWithRequestBuilder(orderBy: orderBy).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps
     - Returns a list of apps
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter orderBy: (query) The name of the attribute by which to order the response by. By default, apps are in order of creation. All results are ordered in ascending order. (optional)
     - returns: RequestBuilder<[Any]> 
     */
    open class func appsListWithRequestBuilder(orderBy: OrderBy_appsList? = nil) -> RequestBuilder<[Any]> {
        let path = "/v0.1/apps"
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "$orderBy": orderBy?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[Any]>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter orgName: (path) The organization&#39;s name 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func appsListForOrg(orgName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: [Any]?,_ error: Error?) -> Void)) {
        appsListForOrgWithRequestBuilder(orgName: orgName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/orgs/{org_name}/apps
     - Returns a list of apps for the organization
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter orgName: (path) The organization&#39;s name 
     - returns: RequestBuilder<[Any]> 
     */
    open class func appsListForOrgWithRequestBuilder(orgName: String) -> RequestBuilder<[Any]> {
        var path = "/v0.1/orgs/{org_name}/apps"
        let orgNamePreEscape = "\(APIHelper.mapValueToPathItem(orgName))"
        let orgNamePostEscape = orgNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org_name}", with: orgNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Any]>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func appsListTesters(ownerName: String, appName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: [InlineResponse20020]?,_ error: Error?) -> Void)) {
        appsListTestersWithRequestBuilder(ownerName: ownerName, appName: appName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/testers
     - Returns the testers associated with the app specified with the given app name which belongs to the given owner.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - returns: RequestBuilder<[InlineResponse20020]> 
     */
    open class func appsListTestersWithRequestBuilder(ownerName: String, appName: String) -> RequestBuilder<[InlineResponse20020]> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/testers"
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[InlineResponse20020]>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter userEmail: (path) The user email of the user to delete 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func appsRemoveUser(ownerName: String, appName: String, userEmail: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        appsRemoveUserWithRequestBuilder(ownerName: ownerName, appName: appName, userEmail: userEmail).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /v0.1/apps/{owner_name}/{app_name}/users/{user_email}
     - Removes the user from the app
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter userEmail: (path) The user email of the user to delete 
     - returns: RequestBuilder<Void> 
     */
    open class func appsRemoveUserWithRequestBuilder(ownerName: String, appName: String, userEmail: String) -> RequestBuilder<Void> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/users/{user_email}"
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let userEmailPreEscape = "\(APIHelper.mapValueToPathItem(userEmail))"
        let userEmailPostEscape = userEmailPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{user_email}", with: userEmailPostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = API.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter destinationOwnerName: (path) The name of the owner (user or organization) to which the app is being transferred 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func appsTransferOwnership(ownerName: String, appName: String, destinationOwnerName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        appsTransferOwnershipWithRequestBuilder(ownerName: ownerName, appName: appName, destinationOwnerName: destinationOwnerName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /v0.1/apps/{owner_name}/{app_name}/transfer/{destination_owner_name}
     - Transfers ownership of an app to a different user or organization
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter destinationOwnerName: (path) The name of the owner (user or organization) to which the app is being transferred 
     - returns: RequestBuilder<Any> 
     */
    open class func appsTransferOwnershipWithRequestBuilder(ownerName: String, appName: String, destinationOwnerName: String) -> RequestBuilder<Any> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/transfer/{destination_owner_name}"
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let destinationOwnerNamePreEscape = "\(APIHelper.mapValueToPathItem(destinationOwnerName))"
        let destinationOwnerNamePostEscape = destinationOwnerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{destination_owner_name}", with: destinationOwnerNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Any>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func appsTransferToOrg(ownerName: String, appName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        appsTransferToOrgWithRequestBuilder(ownerName: ownerName, appName: appName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /v0.1/apps/{owner_name}/{app_name}/transfer_to_org
     - Transfers ownership of an app to a new organization
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - returns: RequestBuilder<Any> 
     */
    open class func appsTransferToOrgWithRequestBuilder(ownerName: String, appName: String) -> RequestBuilder<Any> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/transfer_to_org"
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Any>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter appName: (path) The name of the application 
     - parameter ownerName: (path) The name of the owner 
     - parameter app: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func appsUpdate(appName: String, ownerName: String, app: InlineObject71? = nil, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        appsUpdateWithRequestBuilder(appName: appName, ownerName: ownerName, app: app).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /v0.1/apps/{owner_name}/{app_name}
     - Partially updates a single app
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter appName: (path) The name of the application 
     - parameter ownerName: (path) The name of the owner 
     - parameter app: (body)  (optional)
     - returns: RequestBuilder<Any> 
     */
    open class func appsUpdateWithRequestBuilder(appName: String, ownerName: String, app: InlineObject71? = nil) -> RequestBuilder<Any> {
        var path = "/v0.1/apps/{owner_name}/{app_name}"
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: app)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Any>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter avatar: (form) The image for an app avatar to upload. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func appsUpdateAvatar(ownerName: String, appName: String, avatar: URL? = nil, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        appsUpdateAvatarWithRequestBuilder(ownerName: ownerName, appName: appName, avatar: avatar).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /v0.1/apps/{owner_name}/{app_name}/avatar
     - Sets the app avatar
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter avatar: (form) The image for an app avatar to upload. (optional)
     - returns: RequestBuilder<Any> 
     */
    open class func appsUpdateAvatarWithRequestBuilder(ownerName: String, appName: String, avatar: URL? = nil) -> RequestBuilder<Any> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/avatar"
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let formParams: [String:Any?] = [
            "avatar": avatar?.encodeToJSON()
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Any>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter userEmail: (path) The user email of the user to patch 
     - parameter userAppPermissionsData: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func appsUpdateUserPermissions(ownerName: String, appName: String, userEmail: String, userAppPermissionsData: InlineObject28? = nil, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        appsUpdateUserPermissionsWithRequestBuilder(ownerName: ownerName, appName: appName, userEmail: userEmail, userAppPermissionsData: userAppPermissionsData).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /v0.1/apps/{owner_name}/{app_name}/users/{user_email}
     - Update user permission for the app
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter userEmail: (path) The user email of the user to patch 
     - parameter userAppPermissionsData: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func appsUpdateUserPermissionsWithRequestBuilder(ownerName: String, appName: String, userEmail: String, userAppPermissionsData: InlineObject28? = nil) -> RequestBuilder<Void> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/users/{user_email}"
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let userEmailPreEscape = "\(APIHelper.mapValueToPathItem(userEmail))"
        let userEmailPostEscape = userEmailPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{user_email}", with: userEmailPostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: userAppPermissionsData)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = API.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter azureSubscriptionId: (path) The unique ID (UUID) of the azure subscription 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func azureSubscriptionDeleteForApp(azureSubscriptionId: UUID, ownerName: String, appName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        azureSubscriptionDeleteForAppWithRequestBuilder(azureSubscriptionId: azureSubscriptionId, ownerName: ownerName, appName: appName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /v0.1/apps/{owner_name}/{app_name}/azure_subscriptions/{azure_subscription_id}
     - Delete the azure subscriptions for the app
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter azureSubscriptionId: (path) The unique ID (UUID) of the azure subscription 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - returns: RequestBuilder<Void> 
     */
    open class func azureSubscriptionDeleteForAppWithRequestBuilder(azureSubscriptionId: UUID, ownerName: String, appName: String) -> RequestBuilder<Void> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/azure_subscriptions/{azure_subscription_id}"
        let azureSubscriptionIdPreEscape = "\(APIHelper.mapValueToPathItem(azureSubscriptionId))"
        let azureSubscriptionIdPostEscape = azureSubscriptionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{azure_subscription_id}", with: azureSubscriptionIdPostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = API.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter azureSubscriptionToAppData: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func azureSubscriptionLinkForApp(ownerName: String, appName: String, azureSubscriptionToAppData: InlineObject65, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        azureSubscriptionLinkForAppWithRequestBuilder(ownerName: ownerName, appName: appName, azureSubscriptionToAppData: azureSubscriptionToAppData).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /v0.1/apps/{owner_name}/{app_name}/azure_subscriptions
     - Link azure subscription to an app
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter azureSubscriptionToAppData: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func azureSubscriptionLinkForAppWithRequestBuilder(ownerName: String, appName: String, azureSubscriptionToAppData: InlineObject65) -> RequestBuilder<Void> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/azure_subscriptions"
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: azureSubscriptionToAppData)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = API.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func azureSubscriptionListForApp(ownerName: String, appName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: [InlineResponse20012]?,_ error: Error?) -> Void)) {
        azureSubscriptionListForAppWithRequestBuilder(ownerName: ownerName, appName: appName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/azure_subscriptions
     - Returns a list of azure subscriptions for the app
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - returns: RequestBuilder<[InlineResponse20012]> 
     */
    open class func azureSubscriptionListForAppWithRequestBuilder(ownerName: String, appName: String) -> RequestBuilder<[InlineResponse20012]> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/azure_subscriptions"
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[InlineResponse20012]>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter orgName: (path) The organization&#39;s name 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func azureSubscriptionListForOrg(orgName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: [InlineResponse20012]?,_ error: Error?) -> Void)) {
        azureSubscriptionListForOrgWithRequestBuilder(orgName: orgName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/orgs/{org_name}/azure_subscriptions
     - Returns a list of azure subscriptions for the organization
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter orgName: (path) The organization&#39;s name 
     - returns: RequestBuilder<[InlineResponse20012]> 
     */
    open class func azureSubscriptionListForOrgWithRequestBuilder(orgName: String) -> RequestBuilder<[InlineResponse20012]> {
        var path = "/v0.1/orgs/{org_name}/azure_subscriptions"
        let orgNamePreEscape = "\(APIHelper.mapValueToPathItem(orgName))"
        let orgNamePostEscape = orgNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org_name}", with: orgNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[InlineResponse20012]>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func azureSubscriptionListForUser(apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: [InlineResponse20012]?,_ error: Error?) -> Void)) {
        azureSubscriptionListForUserWithRequestBuilder().execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/azure_subscriptions
     - Returns a list of azure subscriptions for the user
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - returns: RequestBuilder<[InlineResponse20012]> 
     */
    open class func azureSubscriptionListForUserWithRequestBuilder() -> RequestBuilder<[InlineResponse20012]> {
        let path = "/v0.1/azure_subscriptions"
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[InlineResponse20012]>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func distributionGroupInvitationsAcceptAll(apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        distributionGroupInvitationsAcceptAllWithRequestBuilder().execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /v0.1/user/invitations/distribution_groups/accept
     - Accepts all pending invitations to distribution groups for the specified user
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - returns: RequestBuilder<Void> 
     */
    open class func distributionGroupInvitationsAcceptAllWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/v0.1/user/invitations/distribution_groups/accept"
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = API.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter orgName: (path) The organization&#39;s name 
     - parameter distributionGroupName: (path) The name of the distribution group 
     - parameter apps: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func distributionGroupsAddApps(orgName: String, distributionGroupName: String, apps: InlineObject20, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        distributionGroupsAddAppsWithRequestBuilder(orgName: orgName, distributionGroupName: distributionGroupName, apps: apps).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}/apps
     - Add apps to distribution group in an org
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter orgName: (path) The organization&#39;s name 
     - parameter distributionGroupName: (path) The name of the distribution group 
     - parameter apps: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func distributionGroupsAddAppsWithRequestBuilder(orgName: String, distributionGroupName: String, apps: InlineObject20) -> RequestBuilder<Void> {
        var path = "/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}/apps"
        let orgNamePreEscape = "\(APIHelper.mapValueToPathItem(orgName))"
        let orgNamePostEscape = orgNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org_name}", with: orgNamePostEscape, options: .literal, range: nil)
        let distributionGroupNamePreEscape = "\(APIHelper.mapValueToPathItem(distributionGroupName))"
        let distributionGroupNamePostEscape = distributionGroupNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{distribution_group_name}", with: distributionGroupNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: apps)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = API.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter distributionGroupName: (path) The name of the distribution group 
     - parameter members: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func distributionGroupsAddUser(ownerName: String, appName: String, distributionGroupName: String, members: InlineObject53, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: [InlineResponse20011]?,_ error: Error?) -> Void)) {
        distributionGroupsAddUserWithRequestBuilder(ownerName: ownerName, appName: appName, distributionGroupName: distributionGroupName, members: members).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/members
     - Adds the members to the specified distribution group
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter distributionGroupName: (path) The name of the distribution group 
     - parameter members: (body)  
     - returns: RequestBuilder<[InlineResponse20011]> 
     */
    open class func distributionGroupsAddUserWithRequestBuilder(ownerName: String, appName: String, distributionGroupName: String, members: InlineObject53) -> RequestBuilder<[InlineResponse20011]> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/members"
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let distributionGroupNamePreEscape = "\(APIHelper.mapValueToPathItem(distributionGroupName))"
        let distributionGroupNamePostEscape = distributionGroupNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{distribution_group_name}", with: distributionGroupNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: members)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[InlineResponse20011]>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter orgName: (path) The organization&#39;s name 
     - parameter distributionGroupName: (path) The name of the distribution group 
     - parameter memberEmails: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func distributionGroupsAddUsersForOrg(orgName: String, distributionGroupName: String, memberEmails: InlineObject18, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: [InlineResponse20011]?,_ error: Error?) -> Void)) {
        distributionGroupsAddUsersForOrgWithRequestBuilder(orgName: orgName, distributionGroupName: distributionGroupName, memberEmails: memberEmails).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}/members
     - Accepts an array of user email addresses to get added to the specified group
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter orgName: (path) The organization&#39;s name 
     - parameter distributionGroupName: (path) The name of the distribution group 
     - parameter memberEmails: (body)  
     - returns: RequestBuilder<[InlineResponse20011]> 
     */
    open class func distributionGroupsAddUsersForOrgWithRequestBuilder(orgName: String, distributionGroupName: String, memberEmails: InlineObject18) -> RequestBuilder<[InlineResponse20011]> {
        var path = "/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}/members"
        let orgNamePreEscape = "\(APIHelper.mapValueToPathItem(orgName))"
        let orgNamePostEscape = orgNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org_name}", with: orgNamePostEscape, options: .literal, range: nil)
        let distributionGroupNamePreEscape = "\(APIHelper.mapValueToPathItem(distributionGroupName))"
        let distributionGroupNamePostEscape = distributionGroupNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{distribution_group_name}", with: distributionGroupNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: memberEmails)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[InlineResponse20011]>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter orgName: (path) The organization&#39;s name 
     - parameter distributionGroupName: (path) The name of the distribution group 
     - parameter apps: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func distributionGroupsBulkDeleteApps(orgName: String, distributionGroupName: String, apps: InlineObject19, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        distributionGroupsBulkDeleteAppsWithRequestBuilder(orgName: orgName, distributionGroupName: distributionGroupName, apps: apps).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}/apps/bulk_delete
     - Delete apps from distribution group in an org
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter orgName: (path) The organization&#39;s name 
     - parameter distributionGroupName: (path) The name of the distribution group 
     - parameter apps: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func distributionGroupsBulkDeleteAppsWithRequestBuilder(orgName: String, distributionGroupName: String, apps: InlineObject19) -> RequestBuilder<Void> {
        var path = "/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}/apps/bulk_delete"
        let orgNamePreEscape = "\(APIHelper.mapValueToPathItem(orgName))"
        let orgNamePostEscape = orgNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org_name}", with: orgNamePostEscape, options: .literal, range: nil)
        let distributionGroupNamePreEscape = "\(APIHelper.mapValueToPathItem(distributionGroupName))"
        let distributionGroupNamePostEscape = distributionGroupNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{distribution_group_name}", with: distributionGroupNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: apps)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = API.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter orgName: (path) The organization&#39;s name 
     - parameter distributionGroupName: (path) The name of the distribution group 
     - parameter members: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func distributionGroupsBulkDeleteUsers(orgName: String, distributionGroupName: String, members: InlineObject17, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        distributionGroupsBulkDeleteUsersWithRequestBuilder(orgName: orgName, distributionGroupName: distributionGroupName, members: members).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}/members/bulk_delete
     - Delete testers from distribution group in an org
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter orgName: (path) The organization&#39;s name 
     - parameter distributionGroupName: (path) The name of the distribution group 
     - parameter members: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func distributionGroupsBulkDeleteUsersWithRequestBuilder(orgName: String, distributionGroupName: String, members: InlineObject17) -> RequestBuilder<Void> {
        var path = "/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}/members/bulk_delete"
        let orgNamePreEscape = "\(APIHelper.mapValueToPathItem(orgName))"
        let orgNamePostEscape = orgNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org_name}", with: orgNamePostEscape, options: .literal, range: nil)
        let distributionGroupNamePreEscape = "\(APIHelper.mapValueToPathItem(distributionGroupName))"
        let distributionGroupNamePostEscape = distributionGroupNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{distribution_group_name}", with: distributionGroupNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: members)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = API.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter distributionGroup: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func distributionGroupsCreate(ownerName: String, appName: String, distributionGroup: InlineObject55, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        distributionGroupsCreateWithRequestBuilder(ownerName: ownerName, appName: appName, distributionGroup: distributionGroup).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /v0.1/apps/{owner_name}/{app_name}/distribution_groups
     - Creates a new distribution group and returns it to the caller
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter distributionGroup: (body)  
     - returns: RequestBuilder<Any> 
     */
    open class func distributionGroupsCreateWithRequestBuilder(ownerName: String, appName: String, distributionGroup: InlineObject55) -> RequestBuilder<Any> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/distribution_groups"
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: distributionGroup)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Any>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter orgName: (path) The organization&#39;s name 
     - parameter distributionGroup: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func distributionGroupsCreateForOrg(orgName: String, distributionGroup: InlineObject22, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        distributionGroupsCreateForOrgWithRequestBuilder(orgName: orgName, distributionGroup: distributionGroup).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /v0.1/orgs/{org_name}/distribution_groups
     - Creates a disribution goup which can be shared across apps under an organization
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter orgName: (path) The organization&#39;s name 
     - parameter distributionGroup: (body)  
     - returns: RequestBuilder<Any> 
     */
    open class func distributionGroupsCreateForOrgWithRequestBuilder(orgName: String, distributionGroup: InlineObject22) -> RequestBuilder<Any> {
        var path = "/v0.1/orgs/{org_name}/distribution_groups"
        let orgNamePreEscape = "\(APIHelper.mapValueToPathItem(orgName))"
        let orgNamePostEscape = orgNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org_name}", with: orgNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: distributionGroup)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Any>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter appName: (path) The name of the application 
     - parameter ownerName: (path) The name of the owner 
     - parameter distributionGroupName: (path) The name of the distribution group 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func distributionGroupsDelete(appName: String, ownerName: String, distributionGroupName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        distributionGroupsDeleteWithRequestBuilder(appName: appName, ownerName: ownerName, distributionGroupName: distributionGroupName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}
     - Deletes a distribution group
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter appName: (path) The name of the application 
     - parameter ownerName: (path) The name of the owner 
     - parameter distributionGroupName: (path) The name of the distribution group 
     - returns: RequestBuilder<Void> 
     */
    open class func distributionGroupsDeleteWithRequestBuilder(appName: String, ownerName: String, distributionGroupName: String) -> RequestBuilder<Void> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}"
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let distributionGroupNamePreEscape = "\(APIHelper.mapValueToPathItem(distributionGroupName))"
        let distributionGroupNamePostEscape = distributionGroupNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{distribution_group_name}", with: distributionGroupNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = API.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter orgName: (path) The organization&#39;s name 
     - parameter distributionGroupName: (path) The name of the distribution group 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func distributionGroupsDeleteForOrg(orgName: String, distributionGroupName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        distributionGroupsDeleteForOrgWithRequestBuilder(orgName: orgName, distributionGroupName: distributionGroupName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}
     - Deletes a single distribution group from an org with a given distribution group name
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter orgName: (path) The organization&#39;s name 
     - parameter distributionGroupName: (path) The name of the distribution group 
     - returns: RequestBuilder<Void> 
     */
    open class func distributionGroupsDeleteForOrgWithRequestBuilder(orgName: String, distributionGroupName: String) -> RequestBuilder<Void> {
        var path = "/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}"
        let orgNamePreEscape = "\(APIHelper.mapValueToPathItem(orgName))"
        let orgNamePostEscape = orgNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org_name}", with: orgNamePostEscape, options: .literal, range: nil)
        let distributionGroupNamePreEscape = "\(APIHelper.mapValueToPathItem(distributionGroupName))"
        let distributionGroupNamePostEscape = distributionGroupNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{distribution_group_name}", with: distributionGroupNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = API.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter orgName: (path) The organization&#39;s name 
     - parameter appsLimit: (query) The max number of apps to include in the response (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func distributionGroupsDetailsForOrg(orgName: String, appsLimit: Double? = nil, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: [Any]?,_ error: Error?) -> Void)) {
        distributionGroupsDetailsForOrgWithRequestBuilder(orgName: orgName, appsLimit: appsLimit).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/orgs/{org_name}/distribution_groups_details
     - Returns a list of distribution groups with details for an organization
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter orgName: (path) The organization&#39;s name 
     - parameter appsLimit: (query) The max number of apps to include in the response (optional)
     - returns: RequestBuilder<[Any]> 
     */
    open class func distributionGroupsDetailsForOrgWithRequestBuilder(orgName: String, appsLimit: Double? = nil) -> RequestBuilder<[Any]> {
        var path = "/v0.1/orgs/{org_name}/distribution_groups_details"
        let orgNamePreEscape = "\(APIHelper.mapValueToPathItem(orgName))"
        let orgNamePostEscape = orgNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org_name}", with: orgNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "apps_limit": appsLimit?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[Any]>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter distributionGroupName: (path) The name of the distribution group 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func distributionGroupsGet(ownerName: String, appName: String, distributionGroupName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        distributionGroupsGetWithRequestBuilder(ownerName: ownerName, appName: appName, distributionGroupName: distributionGroupName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}
     - Returns a single distribution group for a given distribution group name
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter distributionGroupName: (path) The name of the distribution group 
     - returns: RequestBuilder<Any> 
     */
    open class func distributionGroupsGetWithRequestBuilder(ownerName: String, appName: String, distributionGroupName: String) -> RequestBuilder<Any> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}"
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let distributionGroupNamePreEscape = "\(APIHelper.mapValueToPathItem(distributionGroupName))"
        let distributionGroupNamePostEscape = distributionGroupNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{distribution_group_name}", with: distributionGroupNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Any>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter orgName: (path) The organization&#39;s name 
     - parameter distributionGroupName: (path) The name of the distribution group 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func distributionGroupsGetApps(orgName: String, distributionGroupName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: [Any]?,_ error: Error?) -> Void)) {
        distributionGroupsGetAppsWithRequestBuilder(orgName: orgName, distributionGroupName: distributionGroupName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}/apps
     - Get apps from a distribution group in an org
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter orgName: (path) The organization&#39;s name 
     - parameter distributionGroupName: (path) The name of the distribution group 
     - returns: RequestBuilder<[Any]> 
     */
    open class func distributionGroupsGetAppsWithRequestBuilder(orgName: String, distributionGroupName: String) -> RequestBuilder<[Any]> {
        var path = "/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}/apps"
        let orgNamePreEscape = "\(APIHelper.mapValueToPathItem(orgName))"
        let orgNamePostEscape = orgNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org_name}", with: orgNamePostEscape, options: .literal, range: nil)
        let distributionGroupNamePreEscape = "\(APIHelper.mapValueToPathItem(distributionGroupName))"
        let distributionGroupNamePostEscape = distributionGroupNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{distribution_group_name}", with: distributionGroupNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Any]>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter orgName: (path) The organization&#39;s name 
     - parameter distributionGroupName: (path) The name of the distribution group 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func distributionGroupsGetForOrg(orgName: String, distributionGroupName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        distributionGroupsGetForOrgWithRequestBuilder(orgName: orgName, distributionGroupName: distributionGroupName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}
     - Returns a single distribution group in org for a given distribution group name
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter orgName: (path) The organization&#39;s name 
     - parameter distributionGroupName: (path) The name of the distribution group 
     - returns: RequestBuilder<Any> 
     */
    open class func distributionGroupsGetForOrgWithRequestBuilder(orgName: String, distributionGroupName: String) -> RequestBuilder<Any> {
        var path = "/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}"
        let orgNamePreEscape = "\(APIHelper.mapValueToPathItem(orgName))"
        let orgNamePostEscape = orgNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org_name}", with: orgNamePostEscape, options: .literal, range: nil)
        let distributionGroupNamePreEscape = "\(APIHelper.mapValueToPathItem(distributionGroupName))"
        let distributionGroupNamePostEscape = distributionGroupNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{distribution_group_name}", with: distributionGroupNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Any>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func distributionGroupsList(ownerName: String, appName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: [InlineResponse201]?,_ error: Error?) -> Void)) {
        distributionGroupsListWithRequestBuilder(ownerName: ownerName, appName: appName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/distribution_groups
     - Returns a list of distribution groups in the app specified
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - returns: RequestBuilder<[InlineResponse201]> 
     */
    open class func distributionGroupsListWithRequestBuilder(ownerName: String, appName: String) -> RequestBuilder<[InlineResponse201]> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/distribution_groups"
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[InlineResponse201]>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter orgName: (path) The organization&#39;s name 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func distributionGroupsListAllTestersForOrg(orgName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: [InlineResponse2007]?,_ error: Error?) -> Void)) {
        distributionGroupsListAllTestersForOrgWithRequestBuilder(orgName: orgName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/orgs/{org_name}/testers
     - Returns a unique list of users including the whole organization members plus testers in any shared group of that org
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter orgName: (path) The organization&#39;s name 
     - returns: RequestBuilder<[InlineResponse2007]> 
     */
    open class func distributionGroupsListAllTestersForOrgWithRequestBuilder(orgName: String) -> RequestBuilder<[InlineResponse2007]> {
        var path = "/v0.1/orgs/{org_name}/testers"
        let orgNamePreEscape = "\(APIHelper.mapValueToPathItem(orgName))"
        let orgNamePostEscape = orgNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org_name}", with: orgNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[InlineResponse2007]>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter orgName: (path) The organization&#39;s name 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func distributionGroupsListForOrg(orgName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: [InlineResponse201]?,_ error: Error?) -> Void)) {
        distributionGroupsListForOrgWithRequestBuilder(orgName: orgName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/orgs/{org_name}/distribution_groups
     - Returns a list of distribution groups in the org specified
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter orgName: (path) The organization&#39;s name 
     - returns: RequestBuilder<[InlineResponse201]> 
     */
    open class func distributionGroupsListForOrgWithRequestBuilder(orgName: String) -> RequestBuilder<[InlineResponse201]> {
        var path = "/v0.1/orgs/{org_name}/distribution_groups"
        let orgNamePreEscape = "\(APIHelper.mapValueToPathItem(orgName))"
        let orgNamePostEscape = orgNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org_name}", with: orgNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[InlineResponse201]>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter distributionGroupName: (path) The name of the distribution group 
     - parameter excludePendingInvitations: (query) Whether to exclude pending invitations in the response (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func distributionGroupsListUsers(ownerName: String, appName: String, distributionGroupName: String, excludePendingInvitations: Bool? = nil, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: [InlineResponse20010]?,_ error: Error?) -> Void)) {
        distributionGroupsListUsersWithRequestBuilder(ownerName: ownerName, appName: appName, distributionGroupName: distributionGroupName, excludePendingInvitations: excludePendingInvitations).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/members
     - Returns a list of member details in the distribution group specified
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter distributionGroupName: (path) The name of the distribution group 
     - parameter excludePendingInvitations: (query) Whether to exclude pending invitations in the response (optional)
     - returns: RequestBuilder<[InlineResponse20010]> 
     */
    open class func distributionGroupsListUsersWithRequestBuilder(ownerName: String, appName: String, distributionGroupName: String, excludePendingInvitations: Bool? = nil) -> RequestBuilder<[InlineResponse20010]> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/members"
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let distributionGroupNamePreEscape = "\(APIHelper.mapValueToPathItem(distributionGroupName))"
        let distributionGroupNamePostEscape = distributionGroupNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{distribution_group_name}", with: distributionGroupNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "exclude_pending_invitations": excludePendingInvitations?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[InlineResponse20010]>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter orgName: (path) The organization&#39;s name 
     - parameter distributionGroupName: (path) The name of the distribution group 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func distributionGroupsListUsersForOrg(orgName: String, distributionGroupName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: [InlineResponse20010]?,_ error: Error?) -> Void)) {
        distributionGroupsListUsersForOrgWithRequestBuilder(orgName: orgName, distributionGroupName: distributionGroupName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}/members
     - Returns a list of member in the distribution group specified
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter orgName: (path) The organization&#39;s name 
     - parameter distributionGroupName: (path) The name of the distribution group 
     - returns: RequestBuilder<[InlineResponse20010]> 
     */
    open class func distributionGroupsListUsersForOrgWithRequestBuilder(orgName: String, distributionGroupName: String) -> RequestBuilder<[InlineResponse20010]> {
        var path = "/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}/members"
        let orgNamePreEscape = "\(APIHelper.mapValueToPathItem(orgName))"
        let orgNamePostEscape = orgNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org_name}", with: orgNamePostEscape, options: .literal, range: nil)
        let distributionGroupNamePreEscape = "\(APIHelper.mapValueToPathItem(distributionGroupName))"
        let distributionGroupNamePostEscape = distributionGroupNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{distribution_group_name}", with: distributionGroupNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[InlineResponse20010]>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter orgName: (path) The organization&#39;s name 
     - parameter distributionGroupName: (path) The name of the distribution group 
     - parameter distributionGroup: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func distributionGroupsPatchForOrg(orgName: String, distributionGroupName: String, distributionGroup: InlineObject21, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        distributionGroupsPatchForOrgWithRequestBuilder(orgName: orgName, distributionGroupName: distributionGroupName, distributionGroup: distributionGroup).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}
     - Update one given distribution group name in an org
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter orgName: (path) The organization&#39;s name 
     - parameter distributionGroupName: (path) The name of the distribution group 
     - parameter distributionGroup: (body)  
     - returns: RequestBuilder<Any> 
     */
    open class func distributionGroupsPatchForOrgWithRequestBuilder(orgName: String, distributionGroupName: String, distributionGroup: InlineObject21) -> RequestBuilder<Any> {
        var path = "/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}"
        let orgNamePreEscape = "\(APIHelper.mapValueToPathItem(orgName))"
        let orgNamePostEscape = orgNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org_name}", with: orgNamePostEscape, options: .literal, range: nil)
        let distributionGroupNamePreEscape = "\(APIHelper.mapValueToPathItem(distributionGroupName))"
        let distributionGroupNamePostEscape = distributionGroupNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{distribution_group_name}", with: distributionGroupNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: distributionGroup)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Any>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter distributionGroupName: (path) The name of the distribution group 
     - parameter members: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func distributionGroupsRemoveUser(ownerName: String, appName: String, distributionGroupName: String, members: InlineObject52, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: [InlineResponse20063]?,_ error: Error?) -> Void)) {
        distributionGroupsRemoveUserWithRequestBuilder(ownerName: ownerName, appName: appName, distributionGroupName: distributionGroupName, members: members).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/members/bulk_delete
     - Remove the users from the distribution group
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter distributionGroupName: (path) The name of the distribution group 
     - parameter members: (body)  
     - returns: RequestBuilder<[InlineResponse20063]> 
     */
    open class func distributionGroupsRemoveUserWithRequestBuilder(ownerName: String, appName: String, distributionGroupName: String, members: InlineObject52) -> RequestBuilder<[InlineResponse20063]> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/members/bulk_delete"
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let distributionGroupNamePreEscape = "\(APIHelper.mapValueToPathItem(distributionGroupName))"
        let distributionGroupNamePostEscape = distributionGroupNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{distribution_group_name}", with: distributionGroupNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: members)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[InlineResponse20063]>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter distributionGroupName: (path) The name of the distribution group 
     - parameter members: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func distributionGroupsResendInvite(ownerName: String, appName: String, distributionGroupName: String, members: InlineObject51, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        distributionGroupsResendInviteWithRequestBuilder(ownerName: ownerName, appName: appName, distributionGroupName: distributionGroupName, members: members).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/resend_invite
     - Resend distribution group app invite notification to previously invited testers
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter distributionGroupName: (path) The name of the distribution group 
     - parameter members: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func distributionGroupsResendInviteWithRequestBuilder(ownerName: String, appName: String, distributionGroupName: String, members: InlineObject51) -> RequestBuilder<Void> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/resend_invite"
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let distributionGroupNamePreEscape = "\(APIHelper.mapValueToPathItem(distributionGroupName))"
        let distributionGroupNamePostEscape = distributionGroupNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{distribution_group_name}", with: distributionGroupNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: members)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = API.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter orgName: (path) The organization&#39;s name 
     - parameter distributionGroupName: (path) The name of the distribution group 
     - parameter members: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func distributionGroupsResendSharedInvite(orgName: String, distributionGroupName: String, members: InlineObject16, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        distributionGroupsResendSharedInviteWithRequestBuilder(orgName: orgName, distributionGroupName: distributionGroupName, members: members).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}/resend_invite
     - Resend shared distribution group invite notification to previously invited testers
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter orgName: (path) The organization&#39;s name 
     - parameter distributionGroupName: (path) The name of the distribution group 
     - parameter members: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func distributionGroupsResendSharedInviteWithRequestBuilder(orgName: String, distributionGroupName: String, members: InlineObject16) -> RequestBuilder<Void> {
        var path = "/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}/resend_invite"
        let orgNamePreEscape = "\(APIHelper.mapValueToPathItem(orgName))"
        let orgNamePostEscape = orgNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org_name}", with: orgNamePostEscape, options: .literal, range: nil)
        let distributionGroupNamePreEscape = "\(APIHelper.mapValueToPathItem(distributionGroupName))"
        let distributionGroupNamePostEscape = distributionGroupNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{distribution_group_name}", with: distributionGroupNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: members)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = API.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter distributionGroupName: (path) The name of the distribution group 
     - parameter distributionGroup: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func distributionGroupsUpdate(ownerName: String, appName: String, distributionGroupName: String, distributionGroup: InlineObject54, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        distributionGroupsUpdateWithRequestBuilder(ownerName: ownerName, appName: appName, distributionGroupName: distributionGroupName, distributionGroup: distributionGroup).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}
     - Updates the attributes of distribution group
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter distributionGroupName: (path) The name of the distribution group 
     - parameter distributionGroup: (body)  
     - returns: RequestBuilder<Any> 
     */
    open class func distributionGroupsUpdateWithRequestBuilder(ownerName: String, appName: String, distributionGroupName: String, distributionGroup: InlineObject54) -> RequestBuilder<Any> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}"
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let distributionGroupNamePreEscape = "\(APIHelper.mapValueToPathItem(distributionGroupName))"
        let distributionGroupNamePostEscape = distributionGroupNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{distribution_group_name}", with: distributionGroupNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: distributionGroup)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Any>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func invitationsSent(apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: [InlineResponse20015]?,_ error: Error?) -> Void)) {
        invitationsSentWithRequestBuilder().execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/invitations/sent
     - Returns all invitations sent by the caller
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - returns: RequestBuilder<[InlineResponse20015]> 
     */
    open class func invitationsSentWithRequestBuilder() -> RequestBuilder<[InlineResponse20015]> {
        let path = "/v0.1/invitations/sent"
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[InlineResponse20015]>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter orgName: (path) The organization&#39;s name 
     - parameter email: (path) The email address of the user to send the password reset mail to. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgInvitations(orgName: String, email: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        orgInvitationsWithRequestBuilder(orgName: orgName, email: email).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /v0.1/orgs/{org_name}/invitations/{email}/revoke
     - Removes a user's invitation to an organization
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter orgName: (path) The organization&#39;s name 
     - parameter email: (path) The email address of the user to send the password reset mail to. 
     - returns: RequestBuilder<Void> 
     */
    open class func orgInvitationsWithRequestBuilder(orgName: String, email: String) -> RequestBuilder<Void> {
        var path = "/v0.1/orgs/{org_name}/invitations/{email}/revoke"
        let orgNamePreEscape = "\(APIHelper.mapValueToPathItem(orgName))"
        let orgNamePostEscape = orgNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org_name}", with: orgNamePostEscape, options: .literal, range: nil)
        let emailPreEscape = "\(APIHelper.mapValueToPathItem(email))"
        let emailPostEscape = emailPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{email}", with: emailPostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = API.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter invitationToken: (path) The app invitation token that was sent to the user 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgInvitationsAccept(invitationToken: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        orgInvitationsAcceptWithRequestBuilder(invitationToken: invitationToken).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /v0.1/user/invitations/orgs/{invitation_token}/accept
     - Accepts a pending organization invitation for the specified user
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter invitationToken: (path) The app invitation token that was sent to the user 
     - returns: RequestBuilder<Void> 
     */
    open class func orgInvitationsAcceptWithRequestBuilder(invitationToken: String) -> RequestBuilder<Void> {
        var path = "/v0.1/user/invitations/orgs/{invitation_token}/accept"
        let invitationTokenPreEscape = "\(APIHelper.mapValueToPathItem(invitationToken))"
        let invitationTokenPostEscape = invitationTokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{invitation_token}", with: invitationTokenPostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = API.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter orgName: (path) The organization&#39;s name 
     - parameter userEmail: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgInvitationsCreate(orgName: String, userEmail: InlineObject14? = nil, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        orgInvitationsCreateWithRequestBuilder(orgName: orgName, userEmail: userEmail).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /v0.1/orgs/{org_name}/invitations
     - Invites a new or existing user to an organization
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter orgName: (path) The organization&#39;s name 
     - parameter userEmail: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func orgInvitationsCreateWithRequestBuilder(orgName: String, userEmail: InlineObject14? = nil) -> RequestBuilder<Void> {
        var path = "/v0.1/orgs/{org_name}/invitations"
        let orgNamePreEscape = "\(APIHelper.mapValueToPathItem(orgName))"
        let orgNamePostEscape = orgNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org_name}", with: orgNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: userEmail)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = API.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter orgName: (path) The organization&#39;s name 
     - parameter userEmail: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgInvitationsDelete(orgName: String, userEmail: InlineObject15? = nil, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        orgInvitationsDeleteWithRequestBuilder(orgName: orgName, userEmail: userEmail).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /v0.1/orgs/{org_name}/invitations
     - Removes a user's invitation to an organization
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter orgName: (path) The organization&#39;s name 
     - parameter userEmail: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func orgInvitationsDeleteWithRequestBuilder(orgName: String, userEmail: InlineObject15? = nil) -> RequestBuilder<Void> {
        var path = "/v0.1/orgs/{org_name}/invitations"
        let orgNamePreEscape = "\(APIHelper.mapValueToPathItem(orgName))"
        let orgNamePostEscape = orgNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org_name}", with: orgNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: userEmail)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = API.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter orgName: (path) The organization&#39;s name 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgInvitationsListPending(orgName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: [InlineResponse2009]?,_ error: Error?) -> Void)) {
        orgInvitationsListPendingWithRequestBuilder(orgName: orgName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/orgs/{org_name}/invitations
     - Gets the pending invitations for the organization
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter orgName: (path) The organization&#39;s name 
     - returns: RequestBuilder<[InlineResponse2009]> 
     */
    open class func orgInvitationsListPendingWithRequestBuilder(orgName: String) -> RequestBuilder<[InlineResponse2009]> {
        var path = "/v0.1/orgs/{org_name}/invitations"
        let orgNamePreEscape = "\(APIHelper.mapValueToPathItem(orgName))"
        let orgNamePostEscape = orgNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org_name}", with: orgNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[InlineResponse2009]>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter invitationToken: (path) The app invitation token that was sent to the user 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgInvitationsReject(invitationToken: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        orgInvitationsRejectWithRequestBuilder(invitationToken: invitationToken).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /v0.1/user/invitations/orgs/{invitation_token}/reject
     - Rejects a pending organization invitation
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter invitationToken: (path) The app invitation token that was sent to the user 
     - returns: RequestBuilder<Void> 
     */
    open class func orgInvitationsRejectWithRequestBuilder(invitationToken: String) -> RequestBuilder<Void> {
        var path = "/v0.1/user/invitations/orgs/{invitation_token}/reject"
        let invitationTokenPreEscape = "\(APIHelper.mapValueToPathItem(invitationToken))"
        let invitationTokenPostEscape = invitationTokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{invitation_token}", with: invitationTokenPostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = API.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter orgName: (path) The organization&#39;s name 
     - parameter email: (path) The email address of the user to send the password reset mail to. 
     - parameter role: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgInvitationsSendNewInvitation(orgName: String, email: String, role: InlineObject12? = nil, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        orgInvitationsSendNewInvitationWithRequestBuilder(orgName: orgName, email: email, role: role).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /v0.1/orgs/{org_name}/invitations/{email}/resend
     - Cancels an existing organization invitation for the user and sends a new one
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter orgName: (path) The organization&#39;s name 
     - parameter email: (path) The email address of the user to send the password reset mail to. 
     - parameter role: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func orgInvitationsSendNewInvitationWithRequestBuilder(orgName: String, email: String, role: InlineObject12? = nil) -> RequestBuilder<Void> {
        var path = "/v0.1/orgs/{org_name}/invitations/{email}/resend"
        let orgNamePreEscape = "\(APIHelper.mapValueToPathItem(orgName))"
        let orgNamePostEscape = orgNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org_name}", with: orgNamePostEscape, options: .literal, range: nil)
        let emailPreEscape = "\(APIHelper.mapValueToPathItem(email))"
        let emailPostEscape = emailPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{email}", with: emailPostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: role)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = API.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter orgName: (path) The organization&#39;s name 
     - parameter email: (path) The email address of the user to send the password reset mail to. 
     - parameter userRole: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgInvitationsUpdate(orgName: String, email: String, userRole: InlineObject13, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        orgInvitationsUpdateWithRequestBuilder(orgName: orgName, email: email, userRole: userRole).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /v0.1/orgs/{org_name}/invitations/{email}
     - Allows the role of an invited user to be changed
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter orgName: (path) The organization&#39;s name 
     - parameter email: (path) The email address of the user to send the password reset mail to. 
     - parameter userRole: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func orgInvitationsUpdateWithRequestBuilder(orgName: String, email: String, userRole: InlineObject13) -> RequestBuilder<Void> {
        var path = "/v0.1/orgs/{org_name}/invitations/{email}"
        let orgNamePreEscape = "\(APIHelper.mapValueToPathItem(orgName))"
        let orgNamePostEscape = orgNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org_name}", with: orgNamePostEscape, options: .literal, range: nil)
        let emailPreEscape = "\(APIHelper.mapValueToPathItem(email))"
        let emailPostEscape = emailPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{email}", with: emailPostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: userRole)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = API.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter orgName: (path) The organization&#39;s name 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func organizationDeleteAvatar(orgName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        organizationDeleteAvatarWithRequestBuilder(orgName: orgName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /v0.1/orgs/{org_name}/avatar
     - Deletes the uploaded organization avatar
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter orgName: (path) The organization&#39;s name 
     - returns: RequestBuilder<Any> 
     */
    open class func organizationDeleteAvatarWithRequestBuilder(orgName: String) -> RequestBuilder<Any> {
        var path = "/v0.1/orgs/{org_name}/avatar"
        let orgNamePreEscape = "\(APIHelper.mapValueToPathItem(orgName))"
        let orgNamePostEscape = orgNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org_name}", with: orgNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Any>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter orgName: (path) The organization&#39;s name 
     - parameter avatar: (form) The image for an Organization avatar to upload. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func organizationUpdateAvatar(orgName: String, avatar: URL? = nil, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        organizationUpdateAvatarWithRequestBuilder(orgName: orgName, avatar: avatar).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /v0.1/orgs/{org_name}/avatar
     - Sets the organization avatar
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter orgName: (path) The organization&#39;s name 
     - parameter avatar: (form) The image for an Organization avatar to upload. (optional)
     - returns: RequestBuilder<Any> 
     */
    open class func organizationUpdateAvatarWithRequestBuilder(orgName: String, avatar: URL? = nil) -> RequestBuilder<Any> {
        var path = "/v0.1/orgs/{org_name}/avatar"
        let orgNamePreEscape = "\(APIHelper.mapValueToPathItem(orgName))"
        let orgNamePostEscape = orgNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org_name}", with: orgNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let formParams: [String:Any?] = [
            "avatar": avatar?.encodeToJSON()
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Any>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter organization: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func organizationsCreateOrUpdate(organization: InlineObject25, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        organizationsCreateOrUpdateWithRequestBuilder(organization: organization).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /v0.1/orgs
     - Creates a new organization and returns it to the caller
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter organization: (body)  
     - returns: RequestBuilder<Any> 
     */
    open class func organizationsCreateOrUpdateWithRequestBuilder(organization: InlineObject25) -> RequestBuilder<Any> {
        let path = "/v0.1/orgs"
        let URLString = API.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: organization)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Any>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter orgName: (path) The organization&#39;s name 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func organizationsDelete(orgName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        organizationsDeleteWithRequestBuilder(orgName: orgName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /v0.1/orgs/{org_name}
     - Deletes a single organization
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter orgName: (path) The organization&#39;s name 
     - returns: RequestBuilder<Void> 
     */
    open class func organizationsDeleteWithRequestBuilder(orgName: String) -> RequestBuilder<Void> {
        var path = "/v0.1/orgs/{org_name}"
        let orgNamePreEscape = "\(APIHelper.mapValueToPathItem(orgName))"
        let orgNamePostEscape = orgNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org_name}", with: orgNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = API.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter orgName: (path) The organization&#39;s name 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func organizationsGet(orgName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        organizationsGetWithRequestBuilder(orgName: orgName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/orgs/{org_name}
     - Returns the details of a single organization
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter orgName: (path) The organization&#39;s name 
     - returns: RequestBuilder<Any> 
     */
    open class func organizationsGetWithRequestBuilder(orgName: String) -> RequestBuilder<Any> {
        var path = "/v0.1/orgs/{org_name}"
        let orgNamePreEscape = "\(APIHelper.mapValueToPathItem(orgName))"
        let orgNamePostEscape = orgNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org_name}", with: orgNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Any>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func organizationsList(apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: [InlineResponse20014]?,_ error: Error?) -> Void)) {
        organizationsListWithRequestBuilder().execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/orgs
     - Returns a list of organizations the requesting user has access to
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - returns: RequestBuilder<[InlineResponse20014]> 
     */
    open class func organizationsListWithRequestBuilder() -> RequestBuilder<[InlineResponse20014]> {
        let path = "/v0.1/orgs"
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[InlineResponse20014]>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func organizationsListAdministered(apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: InlineResponse200102?,_ error: Error?) -> Void)) {
        organizationsListAdministeredWithRequestBuilder().execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/administeredOrgs
     - Returns a list organizations in which the requesting user is an admin
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - returns: RequestBuilder<InlineResponse200102> 
     */
    open class func organizationsListAdministeredWithRequestBuilder() -> RequestBuilder<InlineResponse200102> {
        let path = "/v0.1/administeredOrgs"
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<InlineResponse200102>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter orgName: (path) The organization&#39;s name 
     - parameter org: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func organizationsUpdate(orgName: String, org: InlineObject24, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        organizationsUpdateWithRequestBuilder(orgName: orgName, org: org).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /v0.1/orgs/{org_name}
     - Returns a list of organizations the requesting user has access to
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter orgName: (path) The organization&#39;s name 
     - parameter org: (body)  
     - returns: RequestBuilder<Any> 
     */
    open class func organizationsUpdateWithRequestBuilder(orgName: String, org: InlineObject24) -> RequestBuilder<Any> {
        var path = "/v0.1/orgs/{org_name}"
        let orgNamePreEscape = "\(APIHelper.mapValueToPathItem(orgName))"
        let orgNamePostEscape = orgNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org_name}", with: orgNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: org)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Any>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func sharedconnectionConnections(apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: [InlineResponse2001]?,_ error: Error?) -> Void)) {
        sharedconnectionConnectionsWithRequestBuilder().execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/user/export/serviceConnections
     - Gets all service connections of the service type for GDPR export.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - returns: RequestBuilder<[InlineResponse2001]> 
     */
    open class func sharedconnectionConnectionsWithRequestBuilder() -> RequestBuilder<[InlineResponse2001]> {
        let path = "/v0.1/user/export/serviceConnections"
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[InlineResponse2001]>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter orgName: (path) The organization&#39;s name 
     - parameter teamName: (path) The team&#39;s name 
     - parameter app: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func teamsAddApp(orgName: String, teamName: String, app: InlineObject9, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        teamsAddAppWithRequestBuilder(orgName: orgName, teamName: teamName, app: app).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /v0.1/orgs/{org_name}/teams/{team_name}/apps
     - Adds an app to a team
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter orgName: (path) The organization&#39;s name 
     - parameter teamName: (path) The team&#39;s name 
     - parameter app: (body)  
     - returns: RequestBuilder<Any> 
     */
    open class func teamsAddAppWithRequestBuilder(orgName: String, teamName: String, app: InlineObject9) -> RequestBuilder<Any> {
        var path = "/v0.1/orgs/{org_name}/teams/{team_name}/apps"
        let orgNamePreEscape = "\(APIHelper.mapValueToPathItem(orgName))"
        let orgNamePostEscape = orgNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org_name}", with: orgNamePostEscape, options: .literal, range: nil)
        let teamNamePreEscape = "\(APIHelper.mapValueToPathItem(teamName))"
        let teamNamePostEscape = teamNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{team_name}", with: teamNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: app)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Any>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter orgName: (path) The organization&#39;s name 
     - parameter teamName: (path) The team&#39;s name 
     - parameter userEmail: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func teamsAddUser(orgName: String, teamName: String, userEmail: InlineObject7? = nil, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        teamsAddUserWithRequestBuilder(orgName: orgName, teamName: teamName, userEmail: userEmail).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /v0.1/orgs/{org_name}/teams/{team_name}/users
     - Adds a new user to a team that is owned by an organization
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter orgName: (path) The organization&#39;s name 
     - parameter teamName: (path) The team&#39;s name 
     - parameter userEmail: (body)  (optional)
     - returns: RequestBuilder<Any> 
     */
    open class func teamsAddUserWithRequestBuilder(orgName: String, teamName: String, userEmail: InlineObject7? = nil) -> RequestBuilder<Any> {
        var path = "/v0.1/orgs/{org_name}/teams/{team_name}/users"
        let orgNamePreEscape = "\(APIHelper.mapValueToPathItem(orgName))"
        let orgNamePostEscape = orgNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org_name}", with: orgNamePostEscape, options: .literal, range: nil)
        let teamNamePreEscape = "\(APIHelper.mapValueToPathItem(teamName))"
        let teamNamePostEscape = teamNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{team_name}", with: teamNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: userEmail)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Any>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter orgName: (path) The organization&#39;s name 
     - parameter team: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func teamsCreateTeam(orgName: String, team: InlineObject11? = nil, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: [InlineResponse2008]?,_ error: Error?) -> Void)) {
        teamsCreateTeamWithRequestBuilder(orgName: orgName, team: team).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /v0.1/orgs/{org_name}/teams
     - Creates a team and returns it
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter orgName: (path) The organization&#39;s name 
     - parameter team: (body)  (optional)
     - returns: RequestBuilder<[InlineResponse2008]> 
     */
    open class func teamsCreateTeamWithRequestBuilder(orgName: String, team: InlineObject11? = nil) -> RequestBuilder<[InlineResponse2008]> {
        var path = "/v0.1/orgs/{org_name}/teams"
        let orgNamePreEscape = "\(APIHelper.mapValueToPathItem(orgName))"
        let orgNamePostEscape = orgNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org_name}", with: orgNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: team)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[InlineResponse2008]>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter orgName: (path) The organization&#39;s name 
     - parameter teamName: (path) The team&#39;s name 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func teamsDelete(orgName: String, teamName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        teamsDeleteWithRequestBuilder(orgName: orgName, teamName: teamName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /v0.1/orgs/{org_name}/teams/{team_name}
     - Deletes a single team
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter orgName: (path) The organization&#39;s name 
     - parameter teamName: (path) The team&#39;s name 
     - returns: RequestBuilder<Void> 
     */
    open class func teamsDeleteWithRequestBuilder(orgName: String, teamName: String) -> RequestBuilder<Void> {
        var path = "/v0.1/orgs/{org_name}/teams/{team_name}"
        let orgNamePreEscape = "\(APIHelper.mapValueToPathItem(orgName))"
        let orgNamePostEscape = orgNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org_name}", with: orgNamePostEscape, options: .literal, range: nil)
        let teamNamePreEscape = "\(APIHelper.mapValueToPathItem(teamName))"
        let teamNamePostEscape = teamNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{team_name}", with: teamNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = API.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter orgName: (path) The organization&#39;s name 
     - parameter teamName: (path) The team&#39;s name 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func teamsGetTeam(orgName: String, teamName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        teamsGetTeamWithRequestBuilder(orgName: orgName, teamName: teamName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/orgs/{org_name}/teams/{team_name}
     - Returns the details of a single team
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter orgName: (path) The organization&#39;s name 
     - parameter teamName: (path) The team&#39;s name 
     - returns: RequestBuilder<Any> 
     */
    open class func teamsGetTeamWithRequestBuilder(orgName: String, teamName: String) -> RequestBuilder<Any> {
        var path = "/v0.1/orgs/{org_name}/teams/{team_name}"
        let orgNamePreEscape = "\(APIHelper.mapValueToPathItem(orgName))"
        let orgNamePostEscape = orgNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org_name}", with: orgNamePostEscape, options: .literal, range: nil)
        let teamNamePreEscape = "\(APIHelper.mapValueToPathItem(teamName))"
        let teamNamePostEscape = teamNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{team_name}", with: teamNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Any>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter orgName: (path) The organization&#39;s name 
     - parameter teamName: (path) The team&#39;s name 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func teamsGetUsers(orgName: String, teamName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        teamsGetUsersWithRequestBuilder(orgName: orgName, teamName: teamName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/orgs/{org_name}/teams/{team_name}/users
     - Returns the users of a team which is owned by an organization
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter orgName: (path) The organization&#39;s name 
     - parameter teamName: (path) The team&#39;s name 
     - returns: RequestBuilder<Any> 
     */
    open class func teamsGetUsersWithRequestBuilder(orgName: String, teamName: String) -> RequestBuilder<Any> {
        var path = "/v0.1/orgs/{org_name}/teams/{team_name}/users"
        let orgNamePreEscape = "\(APIHelper.mapValueToPathItem(orgName))"
        let orgNamePostEscape = orgNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org_name}", with: orgNamePostEscape, options: .literal, range: nil)
        let teamNamePreEscape = "\(APIHelper.mapValueToPathItem(teamName))"
        let teamNamePostEscape = teamNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{team_name}", with: teamNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Any>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter orgName: (path) The organization&#39;s name 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func teamsListAll(orgName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: [InlineResponse2008]?,_ error: Error?) -> Void)) {
        teamsListAllWithRequestBuilder(orgName: orgName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/orgs/{org_name}/teams
     - Returns the list of all teams in this org
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter orgName: (path) The organization&#39;s name 
     - returns: RequestBuilder<[InlineResponse2008]> 
     */
    open class func teamsListAllWithRequestBuilder(orgName: String) -> RequestBuilder<[InlineResponse2008]> {
        var path = "/v0.1/orgs/{org_name}/teams"
        let orgNamePreEscape = "\(APIHelper.mapValueToPathItem(orgName))"
        let orgNamePostEscape = orgNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org_name}", with: orgNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[InlineResponse2008]>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter orgName: (path) The organization&#39;s name 
     - parameter teamName: (path) The team&#39;s name 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func teamsListApps(orgName: String, teamName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: [Any]?,_ error: Error?) -> Void)) {
        teamsListAppsWithRequestBuilder(orgName: orgName, teamName: teamName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/orgs/{org_name}/teams/{team_name}/apps
     - Returns the apps a team has access to
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter orgName: (path) The organization&#39;s name 
     - parameter teamName: (path) The team&#39;s name 
     - returns: RequestBuilder<[Any]> 
     */
    open class func teamsListAppsWithRequestBuilder(orgName: String, teamName: String) -> RequestBuilder<[Any]> {
        var path = "/v0.1/orgs/{org_name}/teams/{team_name}/apps"
        let orgNamePreEscape = "\(APIHelper.mapValueToPathItem(orgName))"
        let orgNamePostEscape = orgNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org_name}", with: orgNamePostEscape, options: .literal, range: nil)
        let teamNamePreEscape = "\(APIHelper.mapValueToPathItem(teamName))"
        let teamNamePostEscape = teamNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{team_name}", with: teamNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Any]>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter orgName: (path) The organization&#39;s name 
     - parameter teamName: (path) The team&#39;s name 
     - parameter appName: (path) The name of the application 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func teamsRemoveApp(orgName: String, teamName: String, appName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        teamsRemoveAppWithRequestBuilder(orgName: orgName, teamName: teamName, appName: appName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /v0.1/orgs/{org_name}/teams/{team_name}/apps/{app_name}
     - Removes an app from a team
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter orgName: (path) The organization&#39;s name 
     - parameter teamName: (path) The team&#39;s name 
     - parameter appName: (path) The name of the application 
     - returns: RequestBuilder<Void> 
     */
    open class func teamsRemoveAppWithRequestBuilder(orgName: String, teamName: String, appName: String) -> RequestBuilder<Void> {
        var path = "/v0.1/orgs/{org_name}/teams/{team_name}/apps/{app_name}"
        let orgNamePreEscape = "\(APIHelper.mapValueToPathItem(orgName))"
        let orgNamePostEscape = orgNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org_name}", with: orgNamePostEscape, options: .literal, range: nil)
        let teamNamePreEscape = "\(APIHelper.mapValueToPathItem(teamName))"
        let teamNamePostEscape = teamNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{team_name}", with: teamNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = API.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter orgName: (path) The organization&#39;s name 
     - parameter teamName: (path) The team&#39;s name 
     - parameter userName: (path) The slug name of the user 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func teamsRemoveUser(orgName: String, teamName: String, userName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        teamsRemoveUserWithRequestBuilder(orgName: orgName, teamName: teamName, userName: userName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /v0.1/orgs/{org_name}/teams/{team_name}/users/{user_name}
     - Removes a user from a team that is owned by an organization
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter orgName: (path) The organization&#39;s name 
     - parameter teamName: (path) The team&#39;s name 
     - parameter userName: (path) The slug name of the user 
     - returns: RequestBuilder<Void> 
     */
    open class func teamsRemoveUserWithRequestBuilder(orgName: String, teamName: String, userName: String) -> RequestBuilder<Void> {
        var path = "/v0.1/orgs/{org_name}/teams/{team_name}/users/{user_name}"
        let orgNamePreEscape = "\(APIHelper.mapValueToPathItem(orgName))"
        let orgNamePostEscape = orgNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org_name}", with: orgNamePostEscape, options: .literal, range: nil)
        let teamNamePreEscape = "\(APIHelper.mapValueToPathItem(teamName))"
        let teamNamePostEscape = teamNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{team_name}", with: teamNamePostEscape, options: .literal, range: nil)
        let userNamePreEscape = "\(APIHelper.mapValueToPathItem(userName))"
        let userNamePostEscape = userNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{user_name}", with: userNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = API.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter orgName: (path) The organization&#39;s name 
     - parameter teamName: (path) The team&#39;s name 
     - parameter team: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func teamsUpdate(orgName: String, teamName: String, team: InlineObject10? = nil, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        teamsUpdateWithRequestBuilder(orgName: orgName, teamName: teamName, team: team).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /v0.1/orgs/{org_name}/teams/{team_name}
     - Updates a single team
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter orgName: (path) The organization&#39;s name 
     - parameter teamName: (path) The team&#39;s name 
     - parameter team: (body)  (optional)
     - returns: RequestBuilder<Any> 
     */
    open class func teamsUpdateWithRequestBuilder(orgName: String, teamName: String, team: InlineObject10? = nil) -> RequestBuilder<Any> {
        var path = "/v0.1/orgs/{org_name}/teams/{team_name}"
        let orgNamePreEscape = "\(APIHelper.mapValueToPathItem(orgName))"
        let orgNamePostEscape = orgNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org_name}", with: orgNamePostEscape, options: .literal, range: nil)
        let teamNamePreEscape = "\(APIHelper.mapValueToPathItem(teamName))"
        let teamNamePostEscape = teamNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{team_name}", with: teamNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: team)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Any>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter orgName: (path) The organization&#39;s name 
     - parameter teamName: (path) The team&#39;s name 
     - parameter appName: (path) The name of the application 
     - parameter team: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func teamsUpdatePermissions(orgName: String, teamName: String, appName: String, team: InlineObject8? = nil, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        teamsUpdatePermissionsWithRequestBuilder(orgName: orgName, teamName: teamName, appName: appName, team: team).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /v0.1/orgs/{org_name}/teams/{team_name}/apps/{app_name}
     - Updates the permissions the team has to the app
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter orgName: (path) The organization&#39;s name 
     - parameter teamName: (path) The team&#39;s name 
     - parameter appName: (path) The name of the application 
     - parameter team: (body)  (optional)
     - returns: RequestBuilder<Any> 
     */
    open class func teamsUpdatePermissionsWithRequestBuilder(orgName: String, teamName: String, appName: String, team: InlineObject8? = nil) -> RequestBuilder<Any> {
        var path = "/v0.1/orgs/{org_name}/teams/{team_name}/apps/{app_name}"
        let orgNamePreEscape = "\(APIHelper.mapValueToPathItem(orgName))"
        let orgNamePostEscape = orgNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org_name}", with: orgNamePostEscape, options: .literal, range: nil)
        let teamNamePreEscape = "\(APIHelper.mapValueToPathItem(teamName))"
        let teamNamePostEscape = teamNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{team_name}", with: teamNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: team)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Any>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter apiTokenId: (path) The unique ID (UUID) of the api token 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userApiTokensDelete(apiTokenId: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        userApiTokensDeleteWithRequestBuilder(apiTokenId: apiTokenId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /v0.1/api_tokens/{api_token_id}
     - Delete the user api_token object with the specific id
     - BASIC:
       - type: http
       - name: Basic
     - parameter apiTokenId: (path) The unique ID (UUID) of the api token 
     - returns: RequestBuilder<Void> 
     */
    open class func userApiTokensDeleteWithRequestBuilder(apiTokenId: String) -> RequestBuilder<Void> {
        var path = "/v0.1/api_tokens/{api_token_id}"
        let apiTokenIdPreEscape = "\(APIHelper.mapValueToPathItem(apiTokenId))"
        let apiTokenIdPostEscape = apiTokenIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{api_token_id}", with: apiTokenIdPostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = API.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userApiTokensList(apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: [InlineResponse200101]?,_ error: Error?) -> Void)) {
        userApiTokensListWithRequestBuilder().execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/api_tokens
     - Returns api tokens for the authenticated user
     - BASIC:
       - type: http
       - name: Basic
     - returns: RequestBuilder<[InlineResponse200101]> 
     */
    open class func userApiTokensListWithRequestBuilder() -> RequestBuilder<[InlineResponse200101]> {
        let path = "/v0.1/api_tokens"
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[InlineResponse200101]>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter description: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userApiTokensNew(description: InlineObject73? = nil, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        userApiTokensNewWithRequestBuilder(description: description).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /v0.1/api_tokens
     - Creates a new User API token
     - BASIC:
       - type: http
       - name: Basic
     - parameter description: (body)  (optional)
     - returns: RequestBuilder<Any> 
     */
    open class func userApiTokensNewWithRequestBuilder(description: InlineObject73? = nil) -> RequestBuilder<Any> {
        let path = "/v0.1/api_tokens"
        let URLString = API.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: description)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Any>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func usersGet(apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        usersGetWithRequestBuilder().execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/user
     - Returns the user profile data
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - returns: RequestBuilder<Any> 
     */
    open class func usersGetWithRequestBuilder() -> RequestBuilder<Any> {
        let path = "/v0.1/user"
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Any>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter orgName: (path) The organization&#39;s name 
     - parameter userName: (path) The slug name of the user 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func usersGetForOrg(orgName: String, userName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        usersGetForOrgWithRequestBuilder(orgName: orgName, userName: userName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/orgs/{org_name}/users/{user_name}
     - Get a user information from an organization by name - if there is explicit permission return it, if not if not return highest implicit permission
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter orgName: (path) The organization&#39;s name 
     - parameter userName: (path) The slug name of the user 
     - returns: RequestBuilder<Any> 
     */
    open class func usersGetForOrgWithRequestBuilder(orgName: String, userName: String) -> RequestBuilder<Any> {
        var path = "/v0.1/orgs/{org_name}/users/{user_name}"
        let orgNamePreEscape = "\(APIHelper.mapValueToPathItem(orgName))"
        let orgNamePostEscape = orgNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org_name}", with: orgNamePostEscape, options: .literal, range: nil)
        let userNamePreEscape = "\(APIHelper.mapValueToPathItem(userName))"
        let userNamePostEscape = userNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{user_name}", with: userNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Any>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func usersGetUserMetadata(apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        usersGetUserMetadataWithRequestBuilder().execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/user/metadata/optimizely
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - returns: RequestBuilder<Any> 
     */
    open class func usersGetUserMetadataWithRequestBuilder() -> RequestBuilder<Any> {
        let path = "/v0.1/user/metadata/optimizely"
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Any>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func usersList(ownerName: String, appName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: [InlineResponse20020]?,_ error: Error?) -> Void)) {
        usersListWithRequestBuilder(ownerName: ownerName, appName: appName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/users
     - Returns the users associated with the app specified with the given app name which belongs to the given owner.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - returns: RequestBuilder<[InlineResponse20020]> 
     */
    open class func usersListWithRequestBuilder(ownerName: String, appName: String) -> RequestBuilder<[InlineResponse20020]> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/users"
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[InlineResponse20020]>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter orgName: (path) The organization&#39;s name 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func usersListForOrg(orgName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: [InlineResponse2006]?,_ error: Error?) -> Void)) {
        usersListForOrgWithRequestBuilder(orgName: orgName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/orgs/{org_name}/users
     - Returns a list of users that belong to an organization
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter orgName: (path) The organization&#39;s name 
     - returns: RequestBuilder<[InlineResponse2006]> 
     */
    open class func usersListForOrgWithRequestBuilder(orgName: String) -> RequestBuilder<[InlineResponse2006]> {
        var path = "/v0.1/orgs/{org_name}/users"
        let orgNamePreEscape = "\(APIHelper.mapValueToPathItem(orgName))"
        let orgNamePostEscape = orgNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org_name}", with: orgNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[InlineResponse2006]>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter orgName: (path) The organization&#39;s name 
     - parameter userName: (path) The slug name of the user 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func usersRemoveFromOrg(orgName: String, userName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        usersRemoveFromOrgWithRequestBuilder(orgName: orgName, userName: userName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /v0.1/orgs/{org_name}/users/{user_name}
     - Removes a user from an organization.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter orgName: (path) The organization&#39;s name 
     - parameter userName: (path) The slug name of the user 
     - returns: RequestBuilder<Void> 
     */
    open class func usersRemoveFromOrgWithRequestBuilder(orgName: String, userName: String) -> RequestBuilder<Void> {
        var path = "/v0.1/orgs/{org_name}/users/{user_name}"
        let orgNamePreEscape = "\(APIHelper.mapValueToPathItem(orgName))"
        let orgNamePostEscape = orgNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org_name}", with: orgNamePostEscape, options: .literal, range: nil)
        let userNamePreEscape = "\(APIHelper.mapValueToPathItem(userName))"
        let userNamePostEscape = userNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{user_name}", with: userNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = API.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter user: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func usersUpdate(user: InlineObject2, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        usersUpdateWithRequestBuilder(user: user).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /v0.1/user
     - Updates the user profile and returns the updated user data
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter user: (body)  
     - returns: RequestBuilder<Any> 
     */
    open class func usersUpdateWithRequestBuilder(user: InlineObject2) -> RequestBuilder<Any> {
        let path = "/v0.1/user"
        let URLString = API.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: user)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Any>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter orgName: (path) The organization&#39;s name 
     - parameter userName: (path) The slug name of the user 
     - parameter organizationUser: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func usersUpdateOrgRole(orgName: String, userName: String, organizationUser: InlineObject6, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        usersUpdateOrgRoleWithRequestBuilder(orgName: orgName, userName: userName, organizationUser: organizationUser).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /v0.1/orgs/{org_name}/users/{user_name}
     - Updates the given organization user
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter orgName: (path) The organization&#39;s name 
     - parameter userName: (path) The slug name of the user 
     - parameter organizationUser: (body)  
     - returns: RequestBuilder<Any> 
     */
    open class func usersUpdateOrgRoleWithRequestBuilder(orgName: String, userName: String, organizationUser: InlineObject6) -> RequestBuilder<Any> {
        var path = "/v0.1/orgs/{org_name}/users/{user_name}"
        let orgNamePreEscape = "\(APIHelper.mapValueToPathItem(orgName))"
        let orgNamePostEscape = orgNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org_name}", with: orgNamePostEscape, options: .literal, range: nil)
        let userNamePreEscape = "\(APIHelper.mapValueToPathItem(userName))"
        let userNamePostEscape = userNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{user_name}", with: userNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: organizationUser)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Any>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
