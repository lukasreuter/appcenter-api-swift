//
// GdprAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation



open class GdprAPI {
    /**

     - parameter token: (path) Unique request ID (GUID) 
     - parameter email: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func dataSubjectRightCancelDeleteRequest(token: UUID, email: InlineObject1? = nil, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: InlineResponse202?,_ error: Error?) -> Void)) {
        dataSubjectRightCancelDeleteRequestWithRequestBuilder(token: token, email: email).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /v0.1/user/dsr/delete/{token}/cancel
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - responseHeaders: [Location(String)]
     - parameter token: (path) Unique request ID (GUID) 
     - parameter email: (body)  (optional)
     - returns: RequestBuilder<InlineResponse202> 
     */
    open class func dataSubjectRightCancelDeleteRequestWithRequestBuilder(token: UUID, email: InlineObject1? = nil) -> RequestBuilder<InlineResponse202> {
        var path = "/v0.1/user/dsr/delete/{token}/cancel"
        let tokenPreEscape = "\(APIHelper.mapValueToPathItem(token))"
        let tokenPostEscape = tokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{token}", with: tokenPostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: email)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<InlineResponse202>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter token: (path) Unique request ID (GUID) 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func dataSubjectRightCancelExportRequest(token: UUID, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: InlineResponse202?,_ error: Error?) -> Void)) {
        dataSubjectRightCancelExportRequestWithRequestBuilder(token: token).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /v0.1/user/dsr/export/{token}/cancel
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - responseHeaders: [Location(String)]
     - parameter token: (path) Unique request ID (GUID) 
     - returns: RequestBuilder<InlineResponse202> 
     */
    open class func dataSubjectRightCancelExportRequestWithRequestBuilder(token: UUID) -> RequestBuilder<InlineResponse202> {
        var path = "/v0.1/user/dsr/export/{token}/cancel"
        let tokenPreEscape = "\(APIHelper.mapValueToPathItem(token))"
        let tokenPostEscape = tokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{token}", with: tokenPostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<InlineResponse202>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func dataSubjectRightDeleteRequest(apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: InlineResponse202?,_ error: Error?) -> Void)) {
        dataSubjectRightDeleteRequestWithRequestBuilder().execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /v0.1/user/dsr/delete
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - responseHeaders: [Location(String)]
     - returns: RequestBuilder<InlineResponse202> 
     */
    open class func dataSubjectRightDeleteRequestWithRequestBuilder() -> RequestBuilder<InlineResponse202> {
        let path = "/v0.1/user/dsr/delete"
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<InlineResponse202>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter token: (path) Unique request ID (GUID) 
     - parameter email: (query) Email used for delete with x-authz-bypass headers 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func dataSubjectRightDeleteStatusRequest(token: UUID, email: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: InlineResponse2002?,_ error: Error?) -> Void)) {
        dataSubjectRightDeleteStatusRequestWithRequestBuilder(token: token, email: email).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/user/dsr/delete/{token}
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter token: (path) Unique request ID (GUID) 
     - parameter email: (query) Email used for delete with x-authz-bypass headers 
     - returns: RequestBuilder<InlineResponse2002> 
     */
    open class func dataSubjectRightDeleteStatusRequestWithRequestBuilder(token: UUID, email: String) -> RequestBuilder<InlineResponse2002> {
        var path = "/v0.1/user/dsr/delete/{token}"
        let tokenPreEscape = "\(APIHelper.mapValueToPathItem(token))"
        let tokenPostEscape = tokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{token}", with: tokenPostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "email": email.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<InlineResponse2002>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func dataSubjectRightExportRequest(apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: InlineResponse202?,_ error: Error?) -> Void)) {
        dataSubjectRightExportRequestWithRequestBuilder().execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /v0.1/user/dsr/export
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - responseHeaders: [Location(String)]
     - returns: RequestBuilder<InlineResponse202> 
     */
    open class func dataSubjectRightExportRequestWithRequestBuilder() -> RequestBuilder<InlineResponse202> {
        let path = "/v0.1/user/dsr/export"
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<InlineResponse202>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter token: (path) Unique request ID (GUID) 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func dataSubjectRightExportStatusRequest(token: UUID, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: InlineResponse2002?,_ error: Error?) -> Void)) {
        dataSubjectRightExportStatusRequestWithRequestBuilder(token: token).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/user/dsr/export/{token}
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter token: (path) Unique request ID (GUID) 
     - returns: RequestBuilder<InlineResponse2002> 
     */
    open class func dataSubjectRightExportStatusRequestWithRequestBuilder(token: UUID) -> RequestBuilder<InlineResponse2002> {
        var path = "/v0.1/user/dsr/export/{token}"
        let tokenPreEscape = "\(APIHelper.mapValueToPathItem(token))"
        let tokenPostEscape = tokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{token}", with: tokenPostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<InlineResponse2002>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
