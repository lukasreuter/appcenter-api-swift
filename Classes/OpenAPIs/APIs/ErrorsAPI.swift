//
// ErrorsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation



open class ErrorsAPI {
    /**
     * enum for parameter errorType
     */
    public enum ErrorType_errorsAppBuildsList: String, CaseIterable {
        case all = "all"
        case unhandlederror = "unhandledError"
        case handlederror = "handledError"
    }

    /**

     - parameter version: (query)  
     - parameter start: (query) Start date time in data in ISO 8601 date time format 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter end: (query) Last date time in data in ISO 8601 date time format (optional)
     - parameter top: (query) The maximum number of results to return. (0 will fetch all results till the max number.) (optional, default to 30)
     - parameter errorType: (query) Type of error (handled vs unhandled), including All (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func errorsAppBuildsList(version: String, start: Date, ownerName: String, appName: String, end: Date? = nil, top: Int64? = nil, errorType: ErrorType_errorsAppBuildsList? = nil, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: InlineResponse20058?,_ error: Error?) -> Void)) {
        errorsAppBuildsListWithRequestBuilder(version: version, start: start, ownerName: ownerName, appName: appName, end: end, top: top, errorType: errorType).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/errors/availableAppBuilds
     - List of app builds
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter version: (query)  
     - parameter start: (query) Start date time in data in ISO 8601 date time format 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter end: (query) Last date time in data in ISO 8601 date time format (optional)
     - parameter top: (query) The maximum number of results to return. (0 will fetch all results till the max number.) (optional, default to 30)
     - parameter errorType: (query) Type of error (handled vs unhandled), including All (optional)
     - returns: RequestBuilder<InlineResponse20058> 
     */
    open class func errorsAppBuildsListWithRequestBuilder(version: String, start: Date, ownerName: String, appName: String, end: Date? = nil, top: Int64? = nil, errorType: ErrorType_errorsAppBuildsList? = nil) -> RequestBuilder<InlineResponse20058> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/errors/availableAppBuilds"
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "version": version.encodeToJSON(), 
            "start": start.encodeToJSON(), 
            "end": end?.encodeToJSON(), 
            "$top": top?.encodeToJSON(), 
            "errorType": errorType?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<InlineResponse20058>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter inlinecount
     */
    public enum Inlinecount_errorsAvailableVersions: String, CaseIterable {
        case allpages = "allpages"
        case _none = "none"
    }

    /**
     * enum for parameter errorType
     */
    public enum ErrorType_errorsAvailableVersions: String, CaseIterable {
        case all = "all"
        case unhandlederror = "unhandledError"
        case handlederror = "handledError"
    }

    /**

     - parameter start: (query) Start date time in data in ISO 8601 date time format 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter end: (query) Last date time in data in ISO 8601 date time format (optional)
     - parameter top: (query) The maximum number of results to return. (0 will fetch all results till the max number.) (optional, default to 30)
     - parameter skip: (query) The offset (starting at 0) of the first result to return. This parameter along with limit is used to perform pagination. (optional, default to 0)
     - parameter filter: (query) A filter as specified in https://github.com/Microsoft/api-guidelines/blob/master/Guidelines.md#97-filtering. (optional)
     - parameter inlinecount: (query) Controls whether or not to include a count of all the items across all pages. (optional, default to ._none)
     - parameter errorType: (query) Type of error (handled vs unhandled), including All (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func errorsAvailableVersions(start: Date, ownerName: String, appName: String, end: Date? = nil, top: Int64? = nil, skip: Int64? = nil, filter: String? = nil, inlinecount: Inlinecount_errorsAvailableVersions? = nil, errorType: ErrorType_errorsAvailableVersions? = nil, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: InlineResponse20057?,_ error: Error?) -> Void)) {
        errorsAvailableVersionsWithRequestBuilder(start: start, ownerName: ownerName, appName: appName, end: end, top: top, skip: skip, filter: filter, inlinecount: inlinecount, errorType: errorType).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/errors/available_versions
     - Get all available versions in the time range.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter start: (query) Start date time in data in ISO 8601 date time format 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter end: (query) Last date time in data in ISO 8601 date time format (optional)
     - parameter top: (query) The maximum number of results to return. (0 will fetch all results till the max number.) (optional, default to 30)
     - parameter skip: (query) The offset (starting at 0) of the first result to return. This parameter along with limit is used to perform pagination. (optional, default to 0)
     - parameter filter: (query) A filter as specified in https://github.com/Microsoft/api-guidelines/blob/master/Guidelines.md#97-filtering. (optional)
     - parameter inlinecount: (query) Controls whether or not to include a count of all the items across all pages. (optional, default to ._none)
     - parameter errorType: (query) Type of error (handled vs unhandled), including All (optional)
     - returns: RequestBuilder<InlineResponse20057> 
     */
    open class func errorsAvailableVersionsWithRequestBuilder(start: Date, ownerName: String, appName: String, end: Date? = nil, top: Int64? = nil, skip: Int64? = nil, filter: String? = nil, inlinecount: Inlinecount_errorsAvailableVersions? = nil, errorType: ErrorType_errorsAvailableVersions? = nil) -> RequestBuilder<InlineResponse20057> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/errors/available_versions"
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "start": start.encodeToJSON(), 
            "end": end?.encodeToJSON(), 
            "$top": top?.encodeToJSON(), 
            "$skip": skip?.encodeToJSON(), 
            "$filter": filter?.encodeToJSON(), 
            "$inlinecount": inlinecount?.encodeToJSON(), 
            "errorType": errorType?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<InlineResponse20057>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter errorType
     */
    public enum ErrorType_errorsCountsPerDay: String, CaseIterable {
        case unhandlederror = "unhandledError"
        case handlederror = "handledError"
    }

    /**

     - parameter start: (query) Start date time in data in ISO 8601 date time format 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter version: (query)  (optional)
     - parameter end: (query) Last date time in data in ISO 8601 date time format (optional)
     - parameter appBuild: (query) app build (optional)
     - parameter errorType: (query) Type of error (handled vs unhandled), excluding All (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func errorsCountsPerDay(start: Date, ownerName: String, appName: String, version: String? = nil, end: Date? = nil, appBuild: String? = nil, errorType: ErrorType_errorsCountsPerDay? = nil, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: InlineResponse20053?,_ error: Error?) -> Void)) {
        errorsCountsPerDayWithRequestBuilder(start: start, ownerName: ownerName, appName: appName, version: version, end: end, appBuild: appBuild, errorType: errorType).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/errors/errorCountsPerDay
     - Count of crashes or errors by day in the time range based the selected versions. If SingleErrorTypeParameter is not provided, defaults to handlederror.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter start: (query) Start date time in data in ISO 8601 date time format 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter version: (query)  (optional)
     - parameter end: (query) Last date time in data in ISO 8601 date time format (optional)
     - parameter appBuild: (query) app build (optional)
     - parameter errorType: (query) Type of error (handled vs unhandled), excluding All (optional)
     - returns: RequestBuilder<InlineResponse20053> 
     */
    open class func errorsCountsPerDayWithRequestBuilder(start: Date, ownerName: String, appName: String, version: String? = nil, end: Date? = nil, appBuild: String? = nil, errorType: ErrorType_errorsCountsPerDay? = nil) -> RequestBuilder<InlineResponse20053> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/errors/errorCountsPerDay"
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "version": version?.encodeToJSON(), 
            "start": start.encodeToJSON(), 
            "end": end?.encodeToJSON(), 
            "app_build": appBuild?.encodeToJSON(), 
            "errorType": errorType?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<InlineResponse20053>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter errorGroupId: (path) The id of the error group 
     - parameter errorId: (path) The id of the error 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func errorsDeleteError(errorGroupId: String, errorId: String, ownerName: String, appName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: InlineResponse20051?,_ error: Error?) -> Void)) {
        errorsDeleteErrorWithRequestBuilder(errorGroupId: errorGroupId, errorId: errorId, ownerName: ownerName, appName: appName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errors/{errorId}
     - Delete a specific error and related attachments and blobs for an app. Searchable data will not be deleted immediately and may take up to 30 days.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter errorGroupId: (path) The id of the error group 
     - parameter errorId: (path) The id of the error 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - returns: RequestBuilder<InlineResponse20051> 
     */
    open class func errorsDeleteErrorWithRequestBuilder(errorGroupId: String, errorId: String, ownerName: String, appName: String) -> RequestBuilder<InlineResponse20051> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errors/{errorId}"
        let errorGroupIdPreEscape = "\(APIHelper.mapValueToPathItem(errorGroupId))"
        let errorGroupIdPostEscape = errorGroupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{errorGroupId}", with: errorGroupIdPostEscape, options: .literal, range: nil)
        let errorIdPreEscape = "\(APIHelper.mapValueToPathItem(errorId))"
        let errorIdPostEscape = errorIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{errorId}", with: errorIdPostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<InlineResponse20051>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter errorId: (path) The id of the error 
     - parameter attachmentId: (path) Error attachment id. 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func errorsErrorAttachmentLocation(errorId: String, attachmentId: String, ownerName: String, appName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: InlineResponse20043?,_ error: Error?) -> Void)) {
        errorsErrorAttachmentLocationWithRequestBuilder(errorId: errorId, attachmentId: attachmentId, ownerName: ownerName, appName: appName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/errors/{errorId}/attachments/{attachmentId}/location
     - Error attachment location.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter errorId: (path) The id of the error 
     - parameter attachmentId: (path) Error attachment id. 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - returns: RequestBuilder<InlineResponse20043> 
     */
    open class func errorsErrorAttachmentLocationWithRequestBuilder(errorId: String, attachmentId: String, ownerName: String, appName: String) -> RequestBuilder<InlineResponse20043> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/errors/{errorId}/attachments/{attachmentId}/location"
        let errorIdPreEscape = "\(APIHelper.mapValueToPathItem(errorId))"
        let errorIdPostEscape = errorIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{errorId}", with: errorIdPostEscape, options: .literal, range: nil)
        let attachmentIdPreEscape = "\(APIHelper.mapValueToPathItem(attachmentId))"
        let attachmentIdPostEscape = attachmentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{attachmentId}", with: attachmentIdPostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<InlineResponse20043>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter errorId: (path) The id of the error 
     - parameter attachmentId: (path) Error attachment id. 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func errorsErrorAttachmentText(errorId: String, attachmentId: String, ownerName: String, appName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: InlineResponse20042?,_ error: Error?) -> Void)) {
        errorsErrorAttachmentTextWithRequestBuilder(errorId: errorId, attachmentId: attachmentId, ownerName: ownerName, appName: appName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/errors/{errorId}/attachments/{attachmentId}/text
     - Error attachment text.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter errorId: (path) The id of the error 
     - parameter attachmentId: (path) Error attachment id. 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - returns: RequestBuilder<InlineResponse20042> 
     */
    open class func errorsErrorAttachmentTextWithRequestBuilder(errorId: String, attachmentId: String, ownerName: String, appName: String) -> RequestBuilder<InlineResponse20042> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/errors/{errorId}/attachments/{attachmentId}/text"
        let errorIdPreEscape = "\(APIHelper.mapValueToPathItem(errorId))"
        let errorIdPostEscape = errorIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{errorId}", with: errorIdPostEscape, options: .literal, range: nil)
        let attachmentIdPreEscape = "\(APIHelper.mapValueToPathItem(attachmentId))"
        let attachmentIdPostEscape = attachmentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{attachmentId}", with: attachmentIdPostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<InlineResponse20042>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter errorId: (path) The id of the error 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func errorsErrorAttachments(errorId: String, ownerName: String, appName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: [InlineResponse20044]?,_ error: Error?) -> Void)) {
        errorsErrorAttachmentsWithRequestBuilder(errorId: errorId, ownerName: ownerName, appName: appName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/errors/{errorId}/attachments
     - List error attachments.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter errorId: (path) The id of the error 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - returns: RequestBuilder<[InlineResponse20044]> 
     */
    open class func errorsErrorAttachmentsWithRequestBuilder(errorId: String, ownerName: String, appName: String) -> RequestBuilder<[InlineResponse20044]> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/errors/{errorId}/attachments"
        let errorIdPreEscape = "\(APIHelper.mapValueToPathItem(errorId))"
        let errorIdPostEscape = errorIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{errorId}", with: errorIdPostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[InlineResponse20044]>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter format
     */
    public enum Format_errorsErrorDownload: String, CaseIterable {
        case json = "json"
        case txt = "txt"
    }

    /**

     - parameter errorGroupId: (path) The id of the error group 
     - parameter errorId: (path) The id of the error 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter format: (query) the format of the crash log (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func errorsErrorDownload(errorGroupId: String, errorId: String, ownerName: String, appName: String, format: Format_errorsErrorDownload? = nil, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        errorsErrorDownloadWithRequestBuilder(errorGroupId: errorGroupId, errorId: errorId, ownerName: ownerName, appName: appName, format: format).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errors/{errorId}/download
     - Download details for a specific error.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter errorGroupId: (path) The id of the error group 
     - parameter errorId: (path) The id of the error 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter format: (query) the format of the crash log (optional)
     - returns: RequestBuilder<Any> 
     */
    open class func errorsErrorDownloadWithRequestBuilder(errorGroupId: String, errorId: String, ownerName: String, appName: String, format: Format_errorsErrorDownload? = nil) -> RequestBuilder<Any> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errors/{errorId}/download"
        let errorGroupIdPreEscape = "\(APIHelper.mapValueToPathItem(errorGroupId))"
        let errorGroupIdPostEscape = errorGroupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{errorGroupId}", with: errorGroupIdPostEscape, options: .literal, range: nil)
        let errorIdPreEscape = "\(APIHelper.mapValueToPathItem(errorId))"
        let errorIdPostEscape = errorIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{errorId}", with: errorIdPostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "format": format?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<Any>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter errorType
     */
    public enum ErrorType_errorsErrorFreeDevicePercentages: String, CaseIterable {
        case unhandlederror = "unhandledError"
        case handlederror = "handledError"
    }

    /**

     - parameter start: (query) Start date time in data in ISO 8601 date time format 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter end: (query) Last date time in data in ISO 8601 date time format (optional)
     - parameter versions: (query)  (optional)
     - parameter appBuild: (query) app build (optional)
     - parameter errorType: (query) Type of error (handled vs unhandled), excluding All (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func errorsErrorFreeDevicePercentages(start: Date, ownerName: String, appName: String, end: Date? = nil, versions: [String]? = nil, appBuild: String? = nil, errorType: ErrorType_errorsErrorFreeDevicePercentages? = nil, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: InlineResponse20047?,_ error: Error?) -> Void)) {
        errorsErrorFreeDevicePercentagesWithRequestBuilder(start: start, ownerName: ownerName, appName: appName, end: end, versions: versions, appBuild: appBuild, errorType: errorType).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/errors/errorfreeDevicePercentages
     - Percentage of error-free devices by day in the time range based on the selected versions. If SingleErrorTypeParameter is not provided, defaults to handlederror. API will return -1 if crash devices is greater than active devices
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter start: (query) Start date time in data in ISO 8601 date time format 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter end: (query) Last date time in data in ISO 8601 date time format (optional)
     - parameter versions: (query)  (optional)
     - parameter appBuild: (query) app build (optional)
     - parameter errorType: (query) Type of error (handled vs unhandled), excluding All (optional)
     - returns: RequestBuilder<InlineResponse20047> 
     */
    open class func errorsErrorFreeDevicePercentagesWithRequestBuilder(start: Date, ownerName: String, appName: String, end: Date? = nil, versions: [String]? = nil, appBuild: String? = nil, errorType: ErrorType_errorsErrorFreeDevicePercentages? = nil) -> RequestBuilder<InlineResponse20047> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/errors/errorfreeDevicePercentages"
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "start": start.encodeToJSON(), 
            "end": end?.encodeToJSON(), 
            "versions": versions?.encodeToJSON(), 
            "app_build": appBuild?.encodeToJSON(), 
            "errorType": errorType?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<InlineResponse20047>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter order
     */
    public enum Order_errorsErrorGroupsSearch: String, CaseIterable {
        case desc = "desc"
        case asc = "asc"
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_errorsErrorGroupsSearch: String, CaseIterable {
        case matchingreportscount = "matchingReportsCount"
        case exceptionclassname = "exceptionClassName"
        case exceptionmessage = "exceptionMessage"
        case exceptionmethod = "exceptionMethod"
        case lastoccurrence = "lastOccurrence"
    }

    /**

     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter filter: (query) A filter as specified in OData notation (optional)
     - parameter q: (query) A query string (optional)
     - parameter order: (query) It controls the order of sorting (optional, default to .desc)
     - parameter sort: (query) It controls the sort based on specified field (optional, default to .matchingreportscount)
     - parameter top: (query) The maximum number of results to return (optional, default to 100)
     - parameter skip: (query) The offset (starting at 0) of the first result to return. This parameter along with limit is used to perform pagination. (optional, default to 0)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func errorsErrorGroupsSearch(ownerName: String, appName: String, filter: String? = nil, q: String? = nil, order: Order_errorsErrorGroupsSearch? = nil, sort: Sort_errorsErrorGroupsSearch? = nil, top: Int64? = nil, skip: Int64? = nil, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: InlineResponse20055?,_ error: Error?) -> Void)) {
        errorsErrorGroupsSearchWithRequestBuilder(ownerName: ownerName, appName: appName, filter: filter, q: q, order: order, sort: sort, top: top, skip: skip).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/search
     - Error groups list based on search parameters
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter filter: (query) A filter as specified in OData notation (optional)
     - parameter q: (query) A query string (optional)
     - parameter order: (query) It controls the order of sorting (optional, default to .desc)
     - parameter sort: (query) It controls the sort based on specified field (optional, default to .matchingreportscount)
     - parameter top: (query) The maximum number of results to return (optional, default to 100)
     - parameter skip: (query) The offset (starting at 0) of the first result to return. This parameter along with limit is used to perform pagination. (optional, default to 0)
     - returns: RequestBuilder<InlineResponse20055> 
     */
    open class func errorsErrorGroupsSearchWithRequestBuilder(ownerName: String, appName: String, filter: String? = nil, q: String? = nil, order: Order_errorsErrorGroupsSearch? = nil, sort: Sort_errorsErrorGroupsSearch? = nil, top: Int64? = nil, skip: Int64? = nil) -> RequestBuilder<InlineResponse20055> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/search"
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "filter": filter?.encodeToJSON(), 
            "q": q?.encodeToJSON(), 
            "order": order?.encodeToJSON(), 
            "sort": sort?.encodeToJSON(), 
            "$top": top?.encodeToJSON(), 
            "$skip": skip?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<InlineResponse20055>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter errorGroupId: (path) The id of the error group 
     - parameter errorId: (path) The id of the error 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func errorsErrorLocation(errorGroupId: String, errorId: String, ownerName: String, appName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: InlineResponse20043?,_ error: Error?) -> Void)) {
        errorsErrorLocationWithRequestBuilder(errorGroupId: errorGroupId, errorId: errorId, ownerName: ownerName, appName: appName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errors/{errorId}/location
     - Error location.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter errorGroupId: (path) The id of the error group 
     - parameter errorId: (path) The id of the error 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - returns: RequestBuilder<InlineResponse20043> 
     */
    open class func errorsErrorLocationWithRequestBuilder(errorGroupId: String, errorId: String, ownerName: String, appName: String) -> RequestBuilder<InlineResponse20043> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errors/{errorId}/location"
        let errorGroupIdPreEscape = "\(APIHelper.mapValueToPathItem(errorGroupId))"
        let errorGroupIdPostEscape = errorGroupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{errorGroupId}", with: errorGroupIdPostEscape, options: .literal, range: nil)
        let errorIdPreEscape = "\(APIHelper.mapValueToPathItem(errorId))"
        let errorIdPostEscape = errorIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{errorId}", with: errorIdPostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<InlineResponse20043>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter order
     */
    public enum Order_errorsErrorSearch: String, CaseIterable {
        case desc = "desc"
        case asc = "asc"
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_errorsErrorSearch: String, CaseIterable {
        case timestamp = "timestamp"
        case errorgroupid = "errorGroupId"
        case exceptionclassname = "exceptionClassName"
        case exceptionfile = "exceptionFile"
        case exceptionline = "exceptionLine"
        case exceptionmessage = "exceptionMessage"
        case exceptionmethod = "exceptionMethod"
        case devicename = "deviceName"
        case osversion = "osVersion"
        case userid = "userId"
    }

    /**

     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter filter: (query) A filter as specified in OData notation (optional)
     - parameter q: (query) A query string (optional)
     - parameter order: (query) It controls the order of sorting (optional, default to .desc)
     - parameter sort: (query) It controls the sort based on specified field (optional, default to .timestamp)
     - parameter top: (query) The maximum number of results to return (optional, default to 100)
     - parameter skip: (query) The offset (starting at 0) of the first result to return. This parameter along with limit is used to perform pagination. (optional, default to 0)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func errorsErrorSearch(ownerName: String, appName: String, filter: String? = nil, q: String? = nil, order: Order_errorsErrorSearch? = nil, sort: Sort_errorsErrorSearch? = nil, top: Int64? = nil, skip: Int64? = nil, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: InlineResponse20045?,_ error: Error?) -> Void)) {
        errorsErrorSearchWithRequestBuilder(ownerName: ownerName, appName: appName, filter: filter, q: q, order: order, sort: sort, top: top, skip: skip).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/errors/search
     - Errors list based on search parameters
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter filter: (query) A filter as specified in OData notation (optional)
     - parameter q: (query) A query string (optional)
     - parameter order: (query) It controls the order of sorting (optional, default to .desc)
     - parameter sort: (query) It controls the sort based on specified field (optional, default to .timestamp)
     - parameter top: (query) The maximum number of results to return (optional, default to 100)
     - parameter skip: (query) The offset (starting at 0) of the first result to return. This parameter along with limit is used to perform pagination. (optional, default to 0)
     - returns: RequestBuilder<InlineResponse20045> 
     */
    open class func errorsErrorSearchWithRequestBuilder(ownerName: String, appName: String, filter: String? = nil, q: String? = nil, order: Order_errorsErrorSearch? = nil, sort: Sort_errorsErrorSearch? = nil, top: Int64? = nil, skip: Int64? = nil) -> RequestBuilder<InlineResponse20045> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/errors/search"
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "filter": filter?.encodeToJSON(), 
            "q": q?.encodeToJSON(), 
            "order": order?.encodeToJSON(), 
            "sort": sort?.encodeToJSON(), 
            "$top": top?.encodeToJSON(), 
            "$skip": skip?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<InlineResponse20045>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter errorGroupId: (path) The id of the error group 
     - parameter errorId: (path) The id of the error 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func errorsErrorStackTrace(errorGroupId: String, errorId: String, ownerName: String, appName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: DiagnosticsStackTrace?,_ error: Error?) -> Void)) {
        errorsErrorStackTraceWithRequestBuilder(errorGroupId: errorGroupId, errorId: errorId, ownerName: ownerName, appName: appName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errors/{errorId}/stacktrace
     - Error Stacktrace details.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter errorGroupId: (path) The id of the error group 
     - parameter errorId: (path) The id of the error 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - returns: RequestBuilder<DiagnosticsStackTrace> 
     */
    open class func errorsErrorStackTraceWithRequestBuilder(errorGroupId: String, errorId: String, ownerName: String, appName: String) -> RequestBuilder<DiagnosticsStackTrace> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errors/{errorId}/stacktrace"
        let errorGroupIdPreEscape = "\(APIHelper.mapValueToPathItem(errorGroupId))"
        let errorGroupIdPostEscape = errorGroupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{errorGroupId}", with: errorGroupIdPostEscape, options: .literal, range: nil)
        let errorIdPreEscape = "\(APIHelper.mapValueToPathItem(errorId))"
        let errorIdPostEscape = errorIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{errorId}", with: errorIdPostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<DiagnosticsStackTrace>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter errorGroupId: (path) The id of the error group 
     - parameter errorId: (path) The id of the error 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func errorsGetErrorDetails(errorGroupId: String, errorId: String, ownerName: String, appName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: InlineResponse20050?,_ error: Error?) -> Void)) {
        errorsGetErrorDetailsWithRequestBuilder(errorGroupId: errorGroupId, errorId: errorId, ownerName: ownerName, appName: appName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errors/{errorId}
     - Error details.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter errorGroupId: (path) The id of the error group 
     - parameter errorId: (path) The id of the error 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - returns: RequestBuilder<InlineResponse20050> 
     */
    open class func errorsGetErrorDetailsWithRequestBuilder(errorGroupId: String, errorId: String, ownerName: String, appName: String) -> RequestBuilder<InlineResponse20050> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errors/{errorId}"
        let errorGroupIdPreEscape = "\(APIHelper.mapValueToPathItem(errorGroupId))"
        let errorGroupIdPostEscape = errorGroupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{errorGroupId}", with: errorGroupIdPostEscape, options: .literal, range: nil)
        let errorIdPreEscape = "\(APIHelper.mapValueToPathItem(errorId))"
        let errorIdPostEscape = errorIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{errorId}", with: errorIdPostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<InlineResponse20050>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     gets the retention settings in days
     
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func errorsGetRetentionSettings(ownerName: String, appName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: InlineResponse20046?,_ error: Error?) -> Void)) {
        errorsGetRetentionSettingsWithRequestBuilder(ownerName: ownerName, appName: appName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     gets the retention settings in days
     - GET /v0.1/apps/{owner_name}/{app_name}/errors/retention_settings
     - gets the retention settings in days
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - returns: RequestBuilder<InlineResponse20046> 
     */
    open class func errorsGetRetentionSettingsWithRequestBuilder(ownerName: String, appName: String) -> RequestBuilder<InlineResponse20046> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/errors/retention_settings"
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<InlineResponse20046>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter errorGroupId: (path) The id of the error group 
     - parameter start: (query) Start date time in data in ISO 8601 date time format 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter version: (query)  (optional)
     - parameter end: (query) Last date time in data in ISO 8601 date time format (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func errorsGroupCountsPerDay(errorGroupId: String, start: Date, ownerName: String, appName: String, version: String? = nil, end: Date? = nil, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: InlineResponse20053?,_ error: Error?) -> Void)) {
        errorsGroupCountsPerDayWithRequestBuilder(errorGroupId: errorGroupId, start: start, ownerName: ownerName, appName: appName, version: version, end: end).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errorCountsPerDay
     - Count of errors by day in the time range of the selected error group with selected version
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter errorGroupId: (path) The id of the error group 
     - parameter start: (query) Start date time in data in ISO 8601 date time format 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter version: (query)  (optional)
     - parameter end: (query) Last date time in data in ISO 8601 date time format (optional)
     - returns: RequestBuilder<InlineResponse20053> 
     */
    open class func errorsGroupCountsPerDayWithRequestBuilder(errorGroupId: String, start: Date, ownerName: String, appName: String, version: String? = nil, end: Date? = nil) -> RequestBuilder<InlineResponse20053> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errorCountsPerDay"
        let errorGroupIdPreEscape = "\(APIHelper.mapValueToPathItem(errorGroupId))"
        let errorGroupIdPostEscape = errorGroupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{errorGroupId}", with: errorGroupIdPostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "version": version?.encodeToJSON(), 
            "start": start.encodeToJSON(), 
            "end": end?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<InlineResponse20053>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter errorGroupId: (path) The id of the error group 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func errorsGroupDetails(errorGroupId: String, ownerName: String, appName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: InlineResponse20054?,_ error: Error?) -> Void)) {
        errorsGroupDetailsWithRequestBuilder(errorGroupId: errorGroupId, ownerName: ownerName, appName: appName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}
     - Error group details
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter errorGroupId: (path) The id of the error group 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - returns: RequestBuilder<InlineResponse20054> 
     */
    open class func errorsGroupDetailsWithRequestBuilder(errorGroupId: String, ownerName: String, appName: String) -> RequestBuilder<InlineResponse20054> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}"
        let errorGroupIdPreEscape = "\(APIHelper.mapValueToPathItem(errorGroupId))"
        let errorGroupIdPostEscape = errorGroupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{errorGroupId}", with: errorGroupIdPostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<InlineResponse20054>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter errorGroupId: (path) The id of the error group 
     - parameter start: (query) Start date time in data in ISO 8601 date time format 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter end: (query) Last date time in data in ISO 8601 date time format (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func errorsGroupErrorFreeDevicePercentages(errorGroupId: String, start: Date, ownerName: String, appName: String, end: Date? = nil, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: InlineResponse20047?,_ error: Error?) -> Void)) {
        errorsGroupErrorFreeDevicePercentagesWithRequestBuilder(errorGroupId: errorGroupId, start: start, ownerName: ownerName, appName: appName, end: end).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errorfreeDevicePercentages
     - Percentage of error-free devices by day in the time range. Api will return -1 if crash devices is greater than active devices
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter errorGroupId: (path) The id of the error group 
     - parameter start: (query) Start date time in data in ISO 8601 date time format 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter end: (query) Last date time in data in ISO 8601 date time format (optional)
     - returns: RequestBuilder<InlineResponse20047> 
     */
    open class func errorsGroupErrorFreeDevicePercentagesWithRequestBuilder(errorGroupId: String, start: Date, ownerName: String, appName: String, end: Date? = nil) -> RequestBuilder<InlineResponse20047> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errorfreeDevicePercentages"
        let errorGroupIdPreEscape = "\(APIHelper.mapValueToPathItem(errorGroupId))"
        let errorGroupIdPostEscape = errorGroupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{errorGroupId}", with: errorGroupIdPostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "start": start.encodeToJSON(), 
            "end": end?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<InlineResponse20047>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter errorGroupId: (path) The id of the error group 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func errorsGroupErrorStackTrace(errorGroupId: String, ownerName: String, appName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: DiagnosticsStackTrace?,_ error: Error?) -> Void)) {
        errorsGroupErrorStackTraceWithRequestBuilder(errorGroupId: errorGroupId, ownerName: ownerName, appName: appName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/stacktrace
     - Gets the stack trace for the error group.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter errorGroupId: (path) The id of the error group 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - returns: RequestBuilder<DiagnosticsStackTrace> 
     */
    open class func errorsGroupErrorStackTraceWithRequestBuilder(errorGroupId: String, ownerName: String, appName: String) -> RequestBuilder<DiagnosticsStackTrace> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/stacktrace"
        let errorGroupIdPreEscape = "\(APIHelper.mapValueToPathItem(errorGroupId))"
        let errorGroupIdPostEscape = errorGroupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{errorGroupId}", with: errorGroupIdPostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<DiagnosticsStackTrace>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter errorType
     */
    public enum ErrorType_errorsGroupList: String, CaseIterable {
        case all = "all"
        case unhandlederror = "unhandledError"
        case handlederror = "handledError"
    }

    /**

     - parameter start: (query) Start date time in data in ISO 8601 date time format 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter version: (query)  (optional)
     - parameter appBuild: (query) app build (optional)
     - parameter groupState: (query)  (optional)
     - parameter end: (query) Last date time in data in ISO 8601 date time format (optional)
     - parameter orderby: (query) controls the sorting order and sorting based on which column (optional, default to "count desc")
     - parameter top: (query) The maximum number of results to return. (0 will fetch all results till the max number.) (optional, default to 30)
     - parameter errorType: (query) Type of error (handled vs unhandled), including All (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func errorsGroupList(start: Date, ownerName: String, appName: String, version: String? = nil, appBuild: String? = nil, groupState: String? = nil, end: Date? = nil, orderby: String? = nil, top: Int64? = nil, errorType: ErrorType_errorsGroupList? = nil, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: InlineResponse20056?,_ error: Error?) -> Void)) {
        errorsGroupListWithRequestBuilder(start: start, ownerName: ownerName, appName: appName, version: version, appBuild: appBuild, groupState: groupState, end: end, orderby: orderby, top: top, errorType: errorType).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/errors/errorGroups
     - List of error groups
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter start: (query) Start date time in data in ISO 8601 date time format 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter version: (query)  (optional)
     - parameter appBuild: (query) app build (optional)
     - parameter groupState: (query)  (optional)
     - parameter end: (query) Last date time in data in ISO 8601 date time format (optional)
     - parameter orderby: (query) controls the sorting order and sorting based on which column (optional, default to "count desc")
     - parameter top: (query) The maximum number of results to return. (0 will fetch all results till the max number.) (optional, default to 30)
     - parameter errorType: (query) Type of error (handled vs unhandled), including All (optional)
     - returns: RequestBuilder<InlineResponse20056> 
     */
    open class func errorsGroupListWithRequestBuilder(start: Date, ownerName: String, appName: String, version: String? = nil, appBuild: String? = nil, groupState: String? = nil, end: Date? = nil, orderby: String? = nil, top: Int64? = nil, errorType: ErrorType_errorsGroupList? = nil) -> RequestBuilder<InlineResponse20056> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups"
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "version": version?.encodeToJSON(), 
            "app_build": appBuild?.encodeToJSON(), 
            "groupState": groupState?.encodeToJSON(), 
            "start": start.encodeToJSON(), 
            "end": end?.encodeToJSON(), 
            "$orderby": orderby?.encodeToJSON(), 
            "$top": top?.encodeToJSON(), 
            "errorType": errorType?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<InlineResponse20056>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter errorGroupId: (path) The id of the error group 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter top: (query) The maximum number of results to return. (0 will fetch all results till the max number.) (optional, default to 30)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func errorsGroupModelCounts(errorGroupId: String, ownerName: String, appName: String, top: Int64? = nil, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: InlineResponse20049?,_ error: Error?) -> Void)) {
        errorsGroupModelCountsWithRequestBuilder(errorGroupId: errorGroupId, ownerName: ownerName, appName: appName, top: top).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/models
     - Top models of the selected error group.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter errorGroupId: (path) The id of the error group 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter top: (query) The maximum number of results to return. (0 will fetch all results till the max number.) (optional, default to 30)
     - returns: RequestBuilder<InlineResponse20049> 
     */
    open class func errorsGroupModelCountsWithRequestBuilder(errorGroupId: String, ownerName: String, appName: String, top: Int64? = nil) -> RequestBuilder<InlineResponse20049> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/models"
        let errorGroupIdPreEscape = "\(APIHelper.mapValueToPathItem(errorGroupId))"
        let errorGroupIdPostEscape = errorGroupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{errorGroupId}", with: errorGroupIdPostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "$top": top?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<InlineResponse20049>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter errorGroupId: (path) The id of the error group 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter top: (query) The maximum number of results to return. (0 will fetch all results till the max number.) (optional, default to 30)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func errorsGroupOperatingSystemCounts(errorGroupId: String, ownerName: String, appName: String, top: Int64? = nil, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: InlineResponse20048?,_ error: Error?) -> Void)) {
        errorsGroupOperatingSystemCountsWithRequestBuilder(errorGroupId: errorGroupId, ownerName: ownerName, appName: appName, top: top).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/operatingSystems
     - Top OSes of the selected error group.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter errorGroupId: (path) The id of the error group 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter top: (query) The maximum number of results to return. (0 will fetch all results till the max number.) (optional, default to 30)
     - returns: RequestBuilder<InlineResponse20048> 
     */
    open class func errorsGroupOperatingSystemCountsWithRequestBuilder(errorGroupId: String, ownerName: String, appName: String, top: Int64? = nil) -> RequestBuilder<InlineResponse20048> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/operatingSystems"
        let errorGroupIdPreEscape = "\(APIHelper.mapValueToPathItem(errorGroupId))"
        let errorGroupIdPostEscape = errorGroupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{errorGroupId}", with: errorGroupIdPostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "$top": top?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<InlineResponse20048>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter errorGroupId: (path) The id of the error group 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func errorsLatestErrorDetails(errorGroupId: String, ownerName: String, appName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: InlineResponse20050?,_ error: Error?) -> Void)) {
        errorsLatestErrorDetailsWithRequestBuilder(errorGroupId: errorGroupId, ownerName: ownerName, appName: appName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errors/latest
     - Latest error details.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter errorGroupId: (path) The id of the error group 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - returns: RequestBuilder<InlineResponse20050> 
     */
    open class func errorsLatestErrorDetailsWithRequestBuilder(errorGroupId: String, ownerName: String, appName: String) -> RequestBuilder<InlineResponse20050> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errors/latest"
        let errorGroupIdPreEscape = "\(APIHelper.mapValueToPathItem(errorGroupId))"
        let errorGroupIdPostEscape = errorGroupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{errorGroupId}", with: errorGroupIdPostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<InlineResponse20050>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter errorGroupId: (path) The id of the error group 
     - parameter start: (query) Start date time in data in ISO 8601 date time format 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter end: (query) Last date time in data in ISO 8601 date time format (optional)
     - parameter top: (query) The maximum number of results to return. (0 will fetch all results till the max number.) (optional, default to 30)
     - parameter model: (query)  (optional)
     - parameter os: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func errorsListForGroup(errorGroupId: String, start: Date, ownerName: String, appName: String, end: Date? = nil, top: Int64? = nil, model: String? = nil, os: String? = nil, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: InlineResponse20052?,_ error: Error?) -> Void)) {
        errorsListForGroupWithRequestBuilder(errorGroupId: errorGroupId, start: start, ownerName: ownerName, appName: appName, end: end, top: top, model: model, os: os).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errors
     - Get all errors for group
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter errorGroupId: (path) The id of the error group 
     - parameter start: (query) Start date time in data in ISO 8601 date time format 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter end: (query) Last date time in data in ISO 8601 date time format (optional)
     - parameter top: (query) The maximum number of results to return. (0 will fetch all results till the max number.) (optional, default to 30)
     - parameter model: (query)  (optional)
     - parameter os: (query)  (optional)
     - returns: RequestBuilder<InlineResponse20052> 
     */
    open class func errorsListForGroupWithRequestBuilder(errorGroupId: String, start: Date, ownerName: String, appName: String, end: Date? = nil, top: Int64? = nil, model: String? = nil, os: String? = nil) -> RequestBuilder<InlineResponse20052> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errors"
        let errorGroupIdPreEscape = "\(APIHelper.mapValueToPathItem(errorGroupId))"
        let errorGroupIdPostEscape = errorGroupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{errorGroupId}", with: errorGroupIdPostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "start": start.encodeToJSON(), 
            "end": end?.encodeToJSON(), 
            "$top": top?.encodeToJSON(), 
            "model": model?.encodeToJSON(), 
            "os": os?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<InlineResponse20052>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter errorId: (path) The id of the error 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter date: (query) Date of data requested (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func errorsListSessionLogs(errorId: String, ownerName: String, appName: String, date: Date? = nil, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: InlineResponse20041?,_ error: Error?) -> Void)) {
        errorsListSessionLogsWithRequestBuilder(errorId: errorId, ownerName: ownerName, appName: appName, date: date).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/errors/{errorId}/sessionLogs
     - Get session logs by error ID
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter errorId: (path) The id of the error 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter date: (query) Date of data requested (optional)
     - returns: RequestBuilder<InlineResponse20041> 
     */
    open class func errorsListSessionLogsWithRequestBuilder(errorId: String, ownerName: String, appName: String, date: Date? = nil) -> RequestBuilder<InlineResponse20041> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/errors/{errorId}/sessionLogs"
        let errorIdPreEscape = "\(APIHelper.mapValueToPathItem(errorId))"
        let errorIdPostEscape = errorIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{errorId}", with: errorIdPostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "date": date?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<InlineResponse20041>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Creates and updates the retention settings in days
     
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter errorRetentionInDays: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func errorsPutRetentionSettings(ownerName: String, appName: String, errorRetentionInDays: InlineObject47, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: InlineResponse20046?,_ error: Error?) -> Void)) {
        errorsPutRetentionSettingsWithRequestBuilder(ownerName: ownerName, appName: appName, errorRetentionInDays: errorRetentionInDays).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Creates and updates the retention settings in days
     - PUT /v0.1/apps/{owner_name}/{app_name}/errors/retention_settings
     - Creates and updates the retention settings in days
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter errorRetentionInDays: (body)  
     - returns: RequestBuilder<InlineResponse20046> 
     */
    open class func errorsPutRetentionSettingsWithRequestBuilder(ownerName: String, appName: String, errorRetentionInDays: InlineObject47) -> RequestBuilder<InlineResponse20046> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/errors/retention_settings"
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: errorRetentionInDays)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<InlineResponse20046>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter errorGroupId: (path) The id of the error group 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter errorGroupState: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func errorsUpdateState(errorGroupId: String, ownerName: String, appName: String, errorGroupState: InlineObject48, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: InlineResponse20054?,_ error: Error?) -> Void)) {
        errorsUpdateStateWithRequestBuilder(errorGroupId: errorGroupId, ownerName: ownerName, appName: appName, errorGroupState: errorGroupState).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}
     - Update error group state
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter errorGroupId: (path) The id of the error group 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter errorGroupState: (body)  
     - returns: RequestBuilder<InlineResponse20054> 
     */
    open class func errorsUpdateStateWithRequestBuilder(errorGroupId: String, ownerName: String, appName: String, errorGroupState: InlineObject48) -> RequestBuilder<InlineResponse20054> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}"
        let errorGroupIdPreEscape = "\(APIHelper.mapValueToPathItem(errorGroupId))"
        let errorGroupIdPostEscape = errorGroupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{errorGroupId}", with: errorGroupIdPostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: errorGroupState)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<InlineResponse20054>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
