//
// MbaasAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation



open class MbaasAPI {
    /**
     Checks that the Azure Cosmos DB account name already exists. A valid account name may contain only lowercase letters, numbers, and the '-' character, and must be between 3 and 31 characters.
     
     - parameter aCAuthorizationARM: (header) ARM token 
     - parameter accountName: (path) Account Name 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func dataCheckNameExists(aCAuthorizationARM: String, accountName: String, ownerName: String, appName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        dataCheckNameExistsWithRequestBuilder(aCAuthorizationARM: aCAuthorizationARM, accountName: accountName, ownerName: ownerName, appName: appName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Checks that the Azure Cosmos DB account name already exists. A valid account name may contain only lowercase letters, numbers, and the '-' character, and must be between 3 and 31 characters.
     - HEAD /v0.1/apps/{owner_name}/{app_name}/data/database_account_names/{accountName}
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter aCAuthorizationARM: (header) ARM token 
     - parameter accountName: (path) Account Name 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - returns: RequestBuilder<Void> 
     */
    open class func dataCheckNameExistsWithRequestBuilder(aCAuthorizationARM: String, accountName: String, ownerName: String, appName: String) -> RequestBuilder<Void> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/data/database_account_names/{accountName}"
        let accountNamePreEscape = "\(APIHelper.mapValueToPathItem(accountName))"
        let accountNamePostEscape = accountNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{accountName}", with: accountNamePostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "AC-Authorization-ARM": aCAuthorizationARM.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = API.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "HEAD", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Gets general data about the provisioned database
     
     - parameter aCAuthorizationARM: (header) ARM access token. 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func dataGetOverview(aCAuthorizationARM: String, ownerName: String, appName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: InlineResponse20068?,_ error: Error?) -> Void)) {
        dataGetOverviewWithRequestBuilder(aCAuthorizationARM: aCAuthorizationARM, ownerName: ownerName, appName: appName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Gets general data about the provisioned database
     - GET /v0.1/apps/{owner_name}/{app_name}/data/overview
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter aCAuthorizationARM: (header) ARM access token. 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - returns: RequestBuilder<InlineResponse20068> 
     */
    open class func dataGetOverviewWithRequestBuilder(aCAuthorizationARM: String, ownerName: String, appName: String) -> RequestBuilder<InlineResponse20068> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/data/overview"
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "AC-Authorization-ARM": aCAuthorizationARM.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<InlineResponse20068>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func dataGetResourceProvisioning(ownerName: String, appName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: InlineResponse20067?,_ error: Error?) -> Void)) {
        dataGetResourceProvisioningWithRequestBuilder(ownerName: ownerName, appName: appName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/data/resource_provisioning
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - returns: RequestBuilder<InlineResponse20067> 
     */
    open class func dataGetResourceProvisioningWithRequestBuilder(ownerName: String, appName: String) -> RequestBuilder<InlineResponse20067> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/data/resource_provisioning"
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<InlineResponse20067>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Creates Cosmos DB or attaches an existing one
     
     - parameter aCAuthorizationARM: (header)  
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter provisionDatabaseParameters: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func dataPostResourceProvisioning(aCAuthorizationARM: String, ownerName: String, appName: String, provisionDatabaseParameters: InlineObject60? = nil, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: InlineResponse20067?,_ error: Error?) -> Void)) {
        dataPostResourceProvisioningWithRequestBuilder(aCAuthorizationARM: aCAuthorizationARM, ownerName: ownerName, appName: appName, provisionDatabaseParameters: provisionDatabaseParameters).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Creates Cosmos DB or attaches an existing one
     - POST /v0.1/apps/{owner_name}/{app_name}/data/resource_provisioning
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter aCAuthorizationARM: (header)  
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter provisionDatabaseParameters: (body)  (optional)
     - returns: RequestBuilder<InlineResponse20067> 
     */
    open class func dataPostResourceProvisioningWithRequestBuilder(aCAuthorizationARM: String, ownerName: String, appName: String, provisionDatabaseParameters: InlineObject60? = nil) -> RequestBuilder<InlineResponse20067> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/data/resource_provisioning"
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: provisionDatabaseParameters)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "AC-Authorization-ARM": aCAuthorizationARM.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<InlineResponse20067>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     Returns users of a tenant. Returns all users if no searchTerm param is specified.
     
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter aCAuthorizationAADGraph: (header) MSGraph Auth Token (optional)
     - parameter searchTerm: (query) User search term (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func identityGetUsers(ownerName: String, appName: String, aCAuthorizationAADGraph: String? = nil, searchTerm: String? = nil, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: InlineResponse20079?,_ error: Error?) -> Void)) {
        identityGetUsersWithRequestBuilder(ownerName: ownerName, appName: appName, aCAuthorizationAADGraph: aCAuthorizationAADGraph, searchTerm: searchTerm).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Returns users of a tenant. Returns all users if no searchTerm param is specified.
     - GET /v0.1/apps/{owner_name}/{app_name}/auth/users
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter aCAuthorizationAADGraph: (header) MSGraph Auth Token (optional)
     - parameter searchTerm: (query) User search term (optional)
     - returns: RequestBuilder<InlineResponse20079> 
     */
    open class func identityGetUsersWithRequestBuilder(ownerName: String, appName: String, aCAuthorizationAADGraph: String? = nil, searchTerm: String? = nil) -> RequestBuilder<InlineResponse20079> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/auth/users"
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "searchTerm": searchTerm?.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
            "AC-Authorization-AAD-Graph": aCAuthorizationAADGraph?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<InlineResponse20079>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

}
