//
// AnalyticsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation



open class AnalyticsAPI {
    /**

     - parameter audienceName: (path) The name of the audience 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func analyticsAudienceNameExists(audienceName: String, ownerName: String, appName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        analyticsAudienceNameExistsWithRequestBuilder(audienceName: audienceName, ownerName: ownerName, appName: appName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - HEAD /v0.1/apps/{owner_name}/{app_name}/analytics/audiences/{audience_name}
     - Returns whether audience definition exists.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter audienceName: (path) The name of the audience 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - returns: RequestBuilder<Void> 
     */
    open class func analyticsAudienceNameExistsWithRequestBuilder(audienceName: String, ownerName: String, appName: String) -> RequestBuilder<Void> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/analytics/audiences/{audience_name}"
        let audienceNamePreEscape = "\(APIHelper.mapValueToPathItem(audienceName))"
        let audienceNamePostEscape = audienceNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{audience_name}", with: audienceNamePostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = API.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "HEAD", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Available for UWP apps only.
     
     - parameter start: (query) Start date time in data in ISO 8601 date time format. 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter end: (query) Last date time in data in ISO 8601 date time format. (optional)
     - parameter versions: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func analyticsCrashCounts(start: Date, ownerName: String, appName: String, end: Date? = nil, versions: [String]? = nil, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: InlineResponse20099?,_ error: Error?) -> Void)) {
        analyticsCrashCountsWithRequestBuilder(start: start, ownerName: ownerName, appName: appName, end: end, versions: versions).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Available for UWP apps only.
     - GET /v0.1/apps/{owner_name}/{app_name}/analytics/crash_counts
     - Count of crashes by day in the time range based the selected versions. Available for UWP apps only.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter start: (query) Start date time in data in ISO 8601 date time format. 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter end: (query) Last date time in data in ISO 8601 date time format. (optional)
     - parameter versions: (query)  (optional)
     - returns: RequestBuilder<InlineResponse20099> 
     */
    open class func analyticsCrashCountsWithRequestBuilder(start: Date, ownerName: String, appName: String, end: Date? = nil, versions: [String]? = nil) -> RequestBuilder<InlineResponse20099> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/analytics/crash_counts"
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "start": start.encodeToJSON(), 
            "end": end?.encodeToJSON(), 
            "versions": versions?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<InlineResponse20099>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter start: (query) Start date time in data in ISO 8601 date time format. 
     - parameter version: (query)  
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter end: (query) Last date time in data in ISO 8601 date time format. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func analyticsCrashFreeDevicePercentages(start: Date, version: String, ownerName: String, appName: String, end: Date? = nil, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: InlineResponse20095?,_ error: Error?) -> Void)) {
        analyticsCrashFreeDevicePercentagesWithRequestBuilder(start: start, version: version, ownerName: ownerName, appName: appName, end: end).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/analytics/crashfree_device_percentages
     - Percentage of crash-free device by day in the time range based on the selected versions. Api will return -1 if crash devices is greater than active devices.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter start: (query) Start date time in data in ISO 8601 date time format. 
     - parameter version: (query)  
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter end: (query) Last date time in data in ISO 8601 date time format. (optional)
     - returns: RequestBuilder<InlineResponse20095> 
     */
    open class func analyticsCrashFreeDevicePercentagesWithRequestBuilder(start: Date, version: String, ownerName: String, appName: String, end: Date? = nil) -> RequestBuilder<InlineResponse20095> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/analytics/crashfree_device_percentages"
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "start": start.encodeToJSON(), 
            "end": end?.encodeToJSON(), 
            "version": version.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<InlineResponse20095>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Available for UWP apps only.
     
     - parameter crashGroupId: (path) The id of the crash group. 
     - parameter version: (query)  
     - parameter start: (query) Start date time in data in ISO 8601 date time format. 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter end: (query) Last date time in data in ISO 8601 date time format. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func analyticsCrashGroupCounts(crashGroupId: String, version: String, start: Date, ownerName: String, appName: String, end: Date? = nil, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: InlineResponse20099?,_ error: Error?) -> Void)) {
        analyticsCrashGroupCountsWithRequestBuilder(crashGroupId: crashGroupId, version: version, start: start, ownerName: ownerName, appName: appName, end: end).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Available for UWP apps only.
     - GET /v0.1/apps/{owner_name}/{app_name}/analytics/crash_groups/{crash_group_id}/crash_counts
     - Count of crashes by day in the time range of the selected crash group with selected version. Available for UWP apps only.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter crashGroupId: (path) The id of the crash group. 
     - parameter version: (query)  
     - parameter start: (query) Start date time in data in ISO 8601 date time format. 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter end: (query) Last date time in data in ISO 8601 date time format. (optional)
     - returns: RequestBuilder<InlineResponse20099> 
     */
    open class func analyticsCrashGroupCountsWithRequestBuilder(crashGroupId: String, version: String, start: Date, ownerName: String, appName: String, end: Date? = nil) -> RequestBuilder<InlineResponse20099> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/analytics/crash_groups/{crash_group_id}/crash_counts"
        let crashGroupIdPreEscape = "\(APIHelper.mapValueToPathItem(crashGroupId))"
        let crashGroupIdPostEscape = crashGroupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{crash_group_id}", with: crashGroupIdPostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "version": version.encodeToJSON(), 
            "start": start.encodeToJSON(), 
            "end": end?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<InlineResponse20099>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Available for UWP apps only.
     
     - parameter crashGroupId: (path) The id of the crash group. 
     - parameter version: (query)  
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter top: (query) The maximum number of results to return. (0 will fetch all results) (optional, default to 30)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func analyticsCrashGroupModelCounts(crashGroupId: String, version: String, ownerName: String, appName: String, top: Int64? = nil, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: InlineResponse20098?,_ error: Error?) -> Void)) {
        analyticsCrashGroupModelCountsWithRequestBuilder(crashGroupId: crashGroupId, version: version, ownerName: ownerName, appName: appName, top: top).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Available for UWP apps only.
     - GET /v0.1/apps/{owner_name}/{app_name}/analytics/crash_groups/{crash_group_id}/models
     - Top models of the selected crash group with selected version. Available for UWP apps only.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter crashGroupId: (path) The id of the crash group. 
     - parameter version: (query)  
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter top: (query) The maximum number of results to return. (0 will fetch all results) (optional, default to 30)
     - returns: RequestBuilder<InlineResponse20098> 
     */
    open class func analyticsCrashGroupModelCountsWithRequestBuilder(crashGroupId: String, version: String, ownerName: String, appName: String, top: Int64? = nil) -> RequestBuilder<InlineResponse20098> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/analytics/crash_groups/{crash_group_id}/models"
        let crashGroupIdPreEscape = "\(APIHelper.mapValueToPathItem(crashGroupId))"
        let crashGroupIdPostEscape = crashGroupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{crash_group_id}", with: crashGroupIdPostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "version": version.encodeToJSON(), 
            "$top": top?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<InlineResponse20098>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Available for UWP apps only.
     
     - parameter crashGroupId: (path) The id of the crash group. 
     - parameter version: (query)  
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter top: (query) The maximum number of results to return. (0 will fetch all results) (optional, default to 30)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func analyticsCrashGroupOperatingSystemCounts(crashGroupId: String, version: String, ownerName: String, appName: String, top: Int64? = nil, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: InlineResponse20097?,_ error: Error?) -> Void)) {
        analyticsCrashGroupOperatingSystemCountsWithRequestBuilder(crashGroupId: crashGroupId, version: version, ownerName: ownerName, appName: appName, top: top).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Available for UWP apps only.
     - GET /v0.1/apps/{owner_name}/{app_name}/analytics/crash_groups/{crash_group_id}/operating_systems
     - Top OSes of the selected crash group with selected version. Available for UWP apps only.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter crashGroupId: (path) The id of the crash group. 
     - parameter version: (query)  
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter top: (query) The maximum number of results to return. (0 will fetch all results) (optional, default to 30)
     - returns: RequestBuilder<InlineResponse20097> 
     */
    open class func analyticsCrashGroupOperatingSystemCountsWithRequestBuilder(crashGroupId: String, version: String, ownerName: String, appName: String, top: Int64? = nil) -> RequestBuilder<InlineResponse20097> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/analytics/crash_groups/{crash_group_id}/operating_systems"
        let crashGroupIdPreEscape = "\(APIHelper.mapValueToPathItem(crashGroupId))"
        let crashGroupIdPostEscape = crashGroupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{crash_group_id}", with: crashGroupIdPostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "version": version.encodeToJSON(), 
            "$top": top?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<InlineResponse20097>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Available for UWP apps only.
     
     - parameter crashGroupId: (path) The id of the crash group. 
     - parameter version: (query)  
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func analyticsCrashGroupTotals(crashGroupId: String, version: String, ownerName: String, appName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: InlineResponse20096?,_ error: Error?) -> Void)) {
        analyticsCrashGroupTotalsWithRequestBuilder(crashGroupId: crashGroupId, version: version, ownerName: ownerName, appName: appName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Available for UWP apps only.
     - GET /v0.1/apps/{owner_name}/{app_name}/analytics/crash_groups/{crash_group_id}/overall
     - Overall crashes and affected users count of the selected crash group with selected version. Available for UWP apps only.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter crashGroupId: (path) The id of the crash group. 
     - parameter version: (query)  
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - returns: RequestBuilder<InlineResponse20096> 
     */
    open class func analyticsCrashGroupTotalsWithRequestBuilder(crashGroupId: String, version: String, ownerName: String, appName: String) -> RequestBuilder<InlineResponse20096> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/analytics/crash_groups/{crash_group_id}/overall"
        let crashGroupIdPreEscape = "\(APIHelper.mapValueToPathItem(crashGroupId))"
        let crashGroupIdPostEscape = crashGroupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{crash_group_id}", with: crashGroupIdPostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "version": version.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<InlineResponse20096>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter crashGroups: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func analyticsCrashGroupsTotals(ownerName: String, appName: String, crashGroups: InlineObject68, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: [InlineResponse200100]?,_ error: Error?) -> Void)) {
        analyticsCrashGroupsTotalsWithRequestBuilder(ownerName: ownerName, appName: appName, crashGroups: crashGroups).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /v0.1/apps/{owner_name}/{app_name}/analytics/crash_groups
     - Overall crashes and affected users count of the selected crash groups with selected versions.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter crashGroups: (body)  
     - returns: RequestBuilder<[InlineResponse200100]> 
     */
    open class func analyticsCrashGroupsTotalsWithRequestBuilder(ownerName: String, appName: String, crashGroups: InlineObject68) -> RequestBuilder<[InlineResponse200100]> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/analytics/crash_groups"
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: crashGroups)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[InlineResponse200100]>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter audienceName: (path) The name of the audience 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter audience: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func analyticsCreateOrUpdateAudience(audienceName: String, ownerName: String, appName: String, audience: InlineObject69, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        analyticsCreateOrUpdateAudienceWithRequestBuilder(audienceName: audienceName, ownerName: ownerName, appName: appName, audience: audience).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /v0.1/apps/{owner_name}/{app_name}/analytics/audiences/{audience_name}
     - Creates or updates audience definition.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter audienceName: (path) The name of the audience 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter audience: (body)  
     - returns: RequestBuilder<Any> 
     */
    open class func analyticsCreateOrUpdateAudienceWithRequestBuilder(audienceName: String, ownerName: String, appName: String, audience: InlineObject69) -> RequestBuilder<Any> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/analytics/audiences/{audience_name}"
        let audienceNamePreEscape = "\(APIHelper.mapValueToPathItem(audienceName))"
        let audienceNamePostEscape = audienceNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{audience_name}", with: audienceNamePostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: audience)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Any>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter audienceName: (path) The name of the audience 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func analyticsDeleteAudience(audienceName: String, ownerName: String, appName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        analyticsDeleteAudienceWithRequestBuilder(audienceName: audienceName, ownerName: ownerName, appName: appName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /v0.1/apps/{owner_name}/{app_name}/analytics/audiences/{audience_name}
     - Deletes audience definition.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter audienceName: (path) The name of the audience 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - returns: RequestBuilder<Void> 
     */
    open class func analyticsDeleteAudienceWithRequestBuilder(audienceName: String, ownerName: String, appName: String) -> RequestBuilder<Void> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/analytics/audiences/{audience_name}"
        let audienceNamePreEscape = "\(APIHelper.mapValueToPathItem(audienceName))"
        let audienceNamePostEscape = audienceNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{audience_name}", with: audienceNamePostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = API.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter start: (query) Start date time in data in ISO 8601 date time format. 
     - parameter appBuild: (query)  
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter end: (query) Last date time in data in ISO 8601 date time format. (optional)
     - parameter versions: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func analyticsDeviceCounts(start: Date, appBuild: String, ownerName: String, appName: String, end: Date? = nil, versions: [String]? = nil, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        analyticsDeviceCountsWithRequestBuilder(start: start, appBuild: appBuild, ownerName: ownerName, appName: appName, end: end, versions: versions).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/analytics/active_device_counts
     - Count of active devices by interval in the time range.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter start: (query) Start date time in data in ISO 8601 date time format. 
     - parameter appBuild: (query)  
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter end: (query) Last date time in data in ISO 8601 date time format. (optional)
     - parameter versions: (query)  (optional)
     - returns: RequestBuilder<Any> 
     */
    open class func analyticsDeviceCountsWithRequestBuilder(start: Date, appBuild: String, ownerName: String, appName: String, end: Date? = nil, versions: [String]? = nil) -> RequestBuilder<Any> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/analytics/active_device_counts"
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "start": start.encodeToJSON(), 
            "end": end?.encodeToJSON(), 
            "versions": versions?.encodeToJSON(), 
            "app_build": appBuild.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<Any>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter releases: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func analyticsDistributionReleaseCounts(ownerName: String, appName: String, releases: InlineObject67, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: InlineResponse20094?,_ error: Error?) -> Void)) {
        analyticsDistributionReleaseCountsWithRequestBuilder(ownerName: ownerName, appName: appName, releases: releases).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /v0.1/apps/{owner_name}/{app_name}/analytics/distribution/release_counts
     - Count of total downloads for the provided distribution releases.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter releases: (body)  
     - returns: RequestBuilder<InlineResponse20094> 
     */
    open class func analyticsDistributionReleaseCountsWithRequestBuilder(ownerName: String, appName: String, releases: InlineObject67) -> RequestBuilder<InlineResponse20094> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/analytics/distribution/release_counts"
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: releases)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<InlineResponse20094>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter eventName: (path) The id of the event. 
     - parameter start: (query) Start date time in data in ISO 8601 date time format. 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter end: (query) Last date time in data in ISO 8601 date time format. (optional)
     - parameter versions: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func analyticsEventCount(eventName: String, start: Date, ownerName: String, appName: String, end: Date? = nil, versions: [String]? = nil, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: InlineResponse20090?,_ error: Error?) -> Void)) {
        analyticsEventCountWithRequestBuilder(eventName: eventName, start: start, ownerName: ownerName, appName: appName, end: end, versions: versions).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}/event_count
     - Count of events by interval in the time range.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter eventName: (path) The id of the event. 
     - parameter start: (query) Start date time in data in ISO 8601 date time format. 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter end: (query) Last date time in data in ISO 8601 date time format. (optional)
     - parameter versions: (query)  (optional)
     - returns: RequestBuilder<InlineResponse20090> 
     */
    open class func analyticsEventCountWithRequestBuilder(eventName: String, start: Date, ownerName: String, appName: String, end: Date? = nil, versions: [String]? = nil) -> RequestBuilder<InlineResponse20090> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}/event_count"
        let eventNamePreEscape = "\(APIHelper.mapValueToPathItem(eventName))"
        let eventNamePostEscape = eventNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{event_name}", with: eventNamePostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "start": start.encodeToJSON(), 
            "end": end?.encodeToJSON(), 
            "versions": versions?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<InlineResponse20090>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter eventName: (path) The id of the event. 
     - parameter start: (query) Start date time in data in ISO 8601 date time format. 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter end: (query) Last date time in data in ISO 8601 date time format. (optional)
     - parameter versions: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func analyticsEventDeviceCount(eventName: String, start: Date, ownerName: String, appName: String, end: Date? = nil, versions: [String]? = nil, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: InlineResponse20091?,_ error: Error?) -> Void)) {
        analyticsEventDeviceCountWithRequestBuilder(eventName: eventName, start: start, ownerName: ownerName, appName: appName, end: end, versions: versions).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}/device_count
     - Count of devices for an event by interval in the time range.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter eventName: (path) The id of the event. 
     - parameter start: (query) Start date time in data in ISO 8601 date time format. 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter end: (query) Last date time in data in ISO 8601 date time format. (optional)
     - parameter versions: (query)  (optional)
     - returns: RequestBuilder<InlineResponse20091> 
     */
    open class func analyticsEventDeviceCountWithRequestBuilder(eventName: String, start: Date, ownerName: String, appName: String, end: Date? = nil, versions: [String]? = nil) -> RequestBuilder<InlineResponse20091> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}/device_count"
        let eventNamePreEscape = "\(APIHelper.mapValueToPathItem(eventName))"
        let eventNamePostEscape = eventNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{event_name}", with: eventNamePostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "start": start.encodeToJSON(), 
            "end": end?.encodeToJSON(), 
            "versions": versions?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<InlineResponse20091>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter eventName: (path) The id of the event. 
     - parameter start: (query) Start date time in data in ISO 8601 date time format. 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter end: (query) Last date time in data in ISO 8601 date time format. (optional)
     - parameter versions: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func analyticsEventPerDeviceCount(eventName: String, start: Date, ownerName: String, appName: String, end: Date? = nil, versions: [String]? = nil, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: InlineResponse20093?,_ error: Error?) -> Void)) {
        analyticsEventPerDeviceCountWithRequestBuilder(eventName: eventName, start: start, ownerName: ownerName, appName: appName, end: end, versions: versions).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}/count_per_device
     - Count of events per device by interval in the time range.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter eventName: (path) The id of the event. 
     - parameter start: (query) Start date time in data in ISO 8601 date time format. 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter end: (query) Last date time in data in ISO 8601 date time format. (optional)
     - parameter versions: (query)  (optional)
     - returns: RequestBuilder<InlineResponse20093> 
     */
    open class func analyticsEventPerDeviceCountWithRequestBuilder(eventName: String, start: Date, ownerName: String, appName: String, end: Date? = nil, versions: [String]? = nil) -> RequestBuilder<InlineResponse20093> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}/count_per_device"
        let eventNamePreEscape = "\(APIHelper.mapValueToPathItem(eventName))"
        let eventNamePostEscape = eventNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{event_name}", with: eventNamePostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "start": start.encodeToJSON(), 
            "end": end?.encodeToJSON(), 
            "versions": versions?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<InlineResponse20093>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter eventName: (path) The id of the event. 
     - parameter start: (query) Start date time in data in ISO 8601 date time format. 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter end: (query) Last date time in data in ISO 8601 date time format. (optional)
     - parameter versions: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func analyticsEventPerSessionCount(eventName: String, start: Date, ownerName: String, appName: String, end: Date? = nil, versions: [String]? = nil, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: InlineResponse20092?,_ error: Error?) -> Void)) {
        analyticsEventPerSessionCountWithRequestBuilder(eventName: eventName, start: start, ownerName: ownerName, appName: appName, end: end, versions: versions).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}/count_per_session
     - Count of events per session by interval in the time range.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter eventName: (path) The id of the event. 
     - parameter start: (query) Start date time in data in ISO 8601 date time format. 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter end: (query) Last date time in data in ISO 8601 date time format. (optional)
     - parameter versions: (query)  (optional)
     - returns: RequestBuilder<InlineResponse20092> 
     */
    open class func analyticsEventPerSessionCountWithRequestBuilder(eventName: String, start: Date, ownerName: String, appName: String, end: Date? = nil, versions: [String]? = nil) -> RequestBuilder<InlineResponse20092> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}/count_per_session"
        let eventNamePreEscape = "\(APIHelper.mapValueToPathItem(eventName))"
        let eventNamePostEscape = eventNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{event_name}", with: eventNamePostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "start": start.encodeToJSON(), 
            "end": end?.encodeToJSON(), 
            "versions": versions?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<InlineResponse20092>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter eventName: (path) The id of the event. 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func analyticsEventProperties(eventName: String, ownerName: String, appName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: InlineResponse20089?,_ error: Error?) -> Void)) {
        analyticsEventPropertiesWithRequestBuilder(eventName: eventName, ownerName: ownerName, appName: appName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}/properties
     - Event properties.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter eventName: (path) The id of the event. 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - returns: RequestBuilder<InlineResponse20089> 
     */
    open class func analyticsEventPropertiesWithRequestBuilder(eventName: String, ownerName: String, appName: String) -> RequestBuilder<InlineResponse20089> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}/properties"
        let eventNamePreEscape = "\(APIHelper.mapValueToPathItem(eventName))"
        let eventNamePostEscape = eventNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{event_name}", with: eventNamePostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<InlineResponse20089>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter eventName: (path) The id of the event. 
     - parameter eventPropertyName: (path) The id of the event property. 
     - parameter start: (query) Start date time in data in ISO 8601 date time format. 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter end: (query) Last date time in data in ISO 8601 date time format. (optional)
     - parameter versions: (query)  (optional)
     - parameter top: (query) The number of property values to return. Set to 0 in order to fetch all results available. (optional, default to 10)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func analyticsEventPropertyCounts(eventName: String, eventPropertyName: String, start: Date, ownerName: String, appName: String, end: Date? = nil, versions: [String]? = nil, top: Int64? = nil, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: InlineResponse20088?,_ error: Error?) -> Void)) {
        analyticsEventPropertyCountsWithRequestBuilder(eventName: eventName, eventPropertyName: eventPropertyName, start: start, ownerName: ownerName, appName: appName, end: end, versions: versions, top: top).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}/properties/{event_property_name}/counts
     - Event properties value counts during the time range in descending order.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter eventName: (path) The id of the event. 
     - parameter eventPropertyName: (path) The id of the event property. 
     - parameter start: (query) Start date time in data in ISO 8601 date time format. 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter end: (query) Last date time in data in ISO 8601 date time format. (optional)
     - parameter versions: (query)  (optional)
     - parameter top: (query) The number of property values to return. Set to 0 in order to fetch all results available. (optional, default to 10)
     - returns: RequestBuilder<InlineResponse20088> 
     */
    open class func analyticsEventPropertyCountsWithRequestBuilder(eventName: String, eventPropertyName: String, start: Date, ownerName: String, appName: String, end: Date? = nil, versions: [String]? = nil, top: Int64? = nil) -> RequestBuilder<InlineResponse20088> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}/properties/{event_property_name}/counts"
        let eventNamePreEscape = "\(APIHelper.mapValueToPathItem(eventName))"
        let eventNamePostEscape = eventNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{event_name}", with: eventNamePostEscape, options: .literal, range: nil)
        let eventPropertyNamePreEscape = "\(APIHelper.mapValueToPathItem(eventPropertyName))"
        let eventPropertyNamePostEscape = eventPropertyNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{event_property_name}", with: eventPropertyNamePostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "start": start.encodeToJSON(), 
            "end": end?.encodeToJSON(), 
            "versions": versions?.encodeToJSON(), 
            "$top": top?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<InlineResponse20088>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter inlinecount
     */
    public enum Inlinecount_analyticsEvents: String, CaseIterable {
        case allpages = "allpages"
        case _none = "none"
    }

    /**

     - parameter start: (query) Start date time in data in ISO 8601 date time format. 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter end: (query) Last date time in data in ISO 8601 date time format. (optional)
     - parameter versions: (query)  (optional)
     - parameter eventName: (query) To select the specific events. (optional)
     - parameter top: (query) The maximum number of results to return. (0 will fetch all results) (optional, default to 30)
     - parameter skip: (query) The offset (starting at 0) of the first result to return. This parameter along with limit is used to perform pagination. (optional, default to 0)
     - parameter inlinecount: (query) Controls whether or not to include a count of all the items across all pages. (optional, default to ._none)
     - parameter orderby: (query) controls the sorting order and sorting based on which column (optional, default to "count desc")
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func analyticsEvents(start: Date, ownerName: String, appName: String, end: Date? = nil, versions: [String]? = nil, eventName: [String]? = nil, top: Int64? = nil, skip: Int64? = nil, inlinecount: Inlinecount_analyticsEvents? = nil, orderby: String? = nil, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        analyticsEventsWithRequestBuilder(start: start, ownerName: ownerName, appName: appName, end: end, versions: versions, eventName: eventName, top: top, skip: skip, inlinecount: inlinecount, orderby: orderby).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/analytics/events
     - Count of active events in the time range ordered by event.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter start: (query) Start date time in data in ISO 8601 date time format. 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter end: (query) Last date time in data in ISO 8601 date time format. (optional)
     - parameter versions: (query)  (optional)
     - parameter eventName: (query) To select the specific events. (optional)
     - parameter top: (query) The maximum number of results to return. (0 will fetch all results) (optional, default to 30)
     - parameter skip: (query) The offset (starting at 0) of the first result to return. This parameter along with limit is used to perform pagination. (optional, default to 0)
     - parameter inlinecount: (query) Controls whether or not to include a count of all the items across all pages. (optional, default to ._none)
     - parameter orderby: (query) controls the sorting order and sorting based on which column (optional, default to "count desc")
     - returns: RequestBuilder<Any> 
     */
    open class func analyticsEventsWithRequestBuilder(start: Date, ownerName: String, appName: String, end: Date? = nil, versions: [String]? = nil, eventName: [String]? = nil, top: Int64? = nil, skip: Int64? = nil, inlinecount: Inlinecount_analyticsEvents? = nil, orderby: String? = nil) -> RequestBuilder<Any> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/analytics/events"
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "start": start.encodeToJSON(), 
            "end": end?.encodeToJSON(), 
            "versions": versions?.encodeToJSON(), 
            "event_name": eventName?.encodeToJSON(), 
            "$top": top?.encodeToJSON(), 
            "$skip": skip?.encodeToJSON(), 
            "$inlinecount": inlinecount?.encodeToJSON(), 
            "$orderby": orderby?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<Any>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter eventName: (path) The id of the event. 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func analyticsEventsDelete(eventName: String, ownerName: String, appName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        analyticsEventsDeleteWithRequestBuilder(eventName: eventName, ownerName: ownerName, appName: appName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}
     - Delete the set of Events with the specified event names.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter eventName: (path) The id of the event. 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - returns: RequestBuilder<Void> 
     */
    open class func analyticsEventsDeleteWithRequestBuilder(eventName: String, ownerName: String, appName: String) -> RequestBuilder<Void> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}"
        let eventNamePreEscape = "\(APIHelper.mapValueToPathItem(eventName))"
        let eventNamePostEscape = eventNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{event_name}", with: eventNamePostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = API.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter eventName: (path) The id of the event. 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func analyticsEventsDeleteLogs(eventName: String, ownerName: String, appName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        analyticsEventsDeleteLogsWithRequestBuilder(eventName: eventName, ownerName: ownerName, appName: appName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /v0.1/apps/{owner_name}/{app_name}/analytics/event_logs/{event_name}
     - Delete the set of Events with the specified event names.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter eventName: (path) The id of the event. 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - returns: RequestBuilder<Void> 
     */
    open class func analyticsEventsDeleteLogsWithRequestBuilder(eventName: String, ownerName: String, appName: String) -> RequestBuilder<Void> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/analytics/event_logs/{event_name}"
        let eventNamePreEscape = "\(APIHelper.mapValueToPathItem(eventName))"
        let eventNamePostEscape = eventNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{event_name}", with: eventNamePostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = API.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter start: (query) Start date time in data in ISO 8601 date time format. It must be within the current day in the UTC timezone. The default value is the start time of the current day in UTC timezone. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func analyticsGenericLogFlow(ownerName: String, appName: String, start: Date? = nil, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: InlineResponse20070?,_ error: Error?) -> Void)) {
        analyticsGenericLogFlowWithRequestBuilder(ownerName: ownerName, appName: appName, start: start).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/analytics/generic_log_flow
     - Logs received between the specified start time and the current time. The API will return a maximum of 100 logs per call.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter start: (query) Start date time in data in ISO 8601 date time format. It must be within the current day in the UTC timezone. The default value is the start time of the current day in UTC timezone. (optional)
     - returns: RequestBuilder<InlineResponse20070> 
     */
    open class func analyticsGenericLogFlowWithRequestBuilder(ownerName: String, appName: String, start: Date? = nil) -> RequestBuilder<InlineResponse20070> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/analytics/generic_log_flow"
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "start": start?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<InlineResponse20070>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter audienceName: (path) The name of the audience 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func analyticsGetAudience(audienceName: String, ownerName: String, appName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        analyticsGetAudienceWithRequestBuilder(audienceName: audienceName, ownerName: ownerName, appName: appName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/analytics/audiences/{audience_name}
     - Gets audience definition.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter audienceName: (path) The name of the audience 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - returns: RequestBuilder<Any> 
     */
    open class func analyticsGetAudienceWithRequestBuilder(audienceName: String, ownerName: String, appName: String) -> RequestBuilder<Any> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/analytics/audiences/{audience_name}"
        let audienceNamePreEscape = "\(APIHelper.mapValueToPathItem(audienceName))"
        let audienceNamePostEscape = audienceNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{audience_name}", with: audienceNamePostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Any>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter start: (query) Start date time in data in ISO 8601 date time format. 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter end: (query) Last date time in data in ISO 8601 date time format. (optional)
     - parameter top: (query) The maximum number of results to return. (0 will fetch all results) (optional, default to 30)
     - parameter versions: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func analyticsLanguageCounts(start: Date, ownerName: String, appName: String, end: Date? = nil, top: Int64? = nil, versions: [String]? = nil, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: InlineResponse20087?,_ error: Error?) -> Void)) {
        analyticsLanguageCountsWithRequestBuilder(start: start, ownerName: ownerName, appName: appName, end: end, top: top, versions: versions).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/analytics/languages
     - Languages in the time range.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter start: (query) Start date time in data in ISO 8601 date time format. 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter end: (query) Last date time in data in ISO 8601 date time format. (optional)
     - parameter top: (query) The maximum number of results to return. (0 will fetch all results) (optional, default to 30)
     - parameter versions: (query)  (optional)
     - returns: RequestBuilder<InlineResponse20087> 
     */
    open class func analyticsLanguageCountsWithRequestBuilder(start: Date, ownerName: String, appName: String, end: Date? = nil, top: Int64? = nil, versions: [String]? = nil) -> RequestBuilder<InlineResponse20087> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/analytics/languages"
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "start": start.encodeToJSON(), 
            "end": end?.encodeToJSON(), 
            "$top": top?.encodeToJSON(), 
            "versions": versions?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<InlineResponse20087>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter includeDisabled: (query) Include disabled audience definitions (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func analyticsListAudiences(ownerName: String, appName: String, includeDisabled: Bool? = nil, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        analyticsListAudiencesWithRequestBuilder(ownerName: ownerName, appName: appName, includeDisabled: includeDisabled).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/analytics/audiences
     - Get list of audiences.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter includeDisabled: (query) Include disabled audience definitions (optional)
     - returns: RequestBuilder<Any> 
     */
    open class func analyticsListAudiencesWithRequestBuilder(ownerName: String, appName: String, includeDisabled: Bool? = nil) -> RequestBuilder<Any> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/analytics/audiences"
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "include_disabled": includeDisabled?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<Any>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func analyticsListCustomProperties(ownerName: String, appName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        analyticsListCustomPropertiesWithRequestBuilder(ownerName: ownerName, appName: appName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/analytics/audiences/metadata/custom_properties
     - Get list of custom properties.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - returns: RequestBuilder<Any> 
     */
    open class func analyticsListCustomPropertiesWithRequestBuilder(ownerName: String, appName: String) -> RequestBuilder<Any> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/analytics/audiences/metadata/custom_properties"
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Any>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func analyticsListDeviceProperties(ownerName: String, appName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        analyticsListDevicePropertiesWithRequestBuilder(ownerName: ownerName, appName: appName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/analytics/audiences/metadata/device_properties
     - Get list of device properties.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - returns: RequestBuilder<Any> 
     */
    open class func analyticsListDevicePropertiesWithRequestBuilder(ownerName: String, appName: String) -> RequestBuilder<Any> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/analytics/audiences/metadata/device_properties"
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Any>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter propertyName: (path) Device property 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter contains: (query) Contains string (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func analyticsListDevicePropertyValues(propertyName: String, ownerName: String, appName: String, contains: String? = nil, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        analyticsListDevicePropertyValuesWithRequestBuilder(propertyName: propertyName, ownerName: ownerName, appName: appName, contains: contains).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/analytics/audiences/metadata/device_properties/{property_name}/values
     - Get list of device property values.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter propertyName: (path) Device property 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter contains: (query) Contains string (optional)
     - returns: RequestBuilder<Any> 
     */
    open class func analyticsListDevicePropertyValuesWithRequestBuilder(propertyName: String, ownerName: String, appName: String, contains: String? = nil) -> RequestBuilder<Any> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/analytics/audiences/metadata/device_properties/{property_name}/values"
        let propertyNamePreEscape = "\(APIHelper.mapValueToPathItem(propertyName))"
        let propertyNamePostEscape = propertyNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{property_name}", with: propertyNamePostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "contains": contains?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<Any>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter start: (query) Start date time in data in ISO 8601 date time format. It must be within the current day in the UTC timezone. The default value is the start time of the current day in UTC timezone. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func analyticsLogFlow(ownerName: String, appName: String, start: Date? = nil, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: InlineResponse20086?,_ error: Error?) -> Void)) {
        analyticsLogFlowWithRequestBuilder(ownerName: ownerName, appName: appName, start: start).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/analytics/log_flow
     - Logs received between the specified start time and the current time. The API will return a maximum of 100 logs per call.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter start: (query) Start date time in data in ISO 8601 date time format. It must be within the current day in the UTC timezone. The default value is the start time of the current day in UTC timezone. (optional)
     - returns: RequestBuilder<InlineResponse20086> 
     */
    open class func analyticsLogFlowWithRequestBuilder(ownerName: String, appName: String, start: Date? = nil) -> RequestBuilder<InlineResponse20086> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/analytics/log_flow"
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "start": start?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<InlineResponse20086>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter start: (query) Start date time in data in ISO 8601 date time format. 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter end: (query) Last date time in data in ISO 8601 date time format. (optional)
     - parameter top: (query) The maximum number of results to return. (0 will fetch all results) (optional, default to 30)
     - parameter versions: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func analyticsModelCounts(start: Date, ownerName: String, appName: String, end: Date? = nil, top: Int64? = nil, versions: [String]? = nil, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: InlineResponse20085?,_ error: Error?) -> Void)) {
        analyticsModelCountsWithRequestBuilder(start: start, ownerName: ownerName, appName: appName, end: end, top: top, versions: versions).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/analytics/models
     - Models in the time range.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter start: (query) Start date time in data in ISO 8601 date time format. 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter end: (query) Last date time in data in ISO 8601 date time format. (optional)
     - parameter top: (query) The maximum number of results to return. (0 will fetch all results) (optional, default to 30)
     - parameter versions: (query)  (optional)
     - returns: RequestBuilder<InlineResponse20085> 
     */
    open class func analyticsModelCountsWithRequestBuilder(start: Date, ownerName: String, appName: String, end: Date? = nil, top: Int64? = nil, versions: [String]? = nil) -> RequestBuilder<InlineResponse20085> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/analytics/models"
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "start": start.encodeToJSON(), 
            "end": end?.encodeToJSON(), 
            "$top": top?.encodeToJSON(), 
            "versions": versions?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<InlineResponse20085>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter start: (query) Start date time in data in ISO 8601 date time format. 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter end: (query) Last date time in data in ISO 8601 date time format. (optional)
     - parameter top: (query) The maximum number of results to return. (0 will fetch all results) (optional, default to 30)
     - parameter versions: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func analyticsOperatingSystemCounts(start: Date, ownerName: String, appName: String, end: Date? = nil, top: Int64? = nil, versions: [String]? = nil, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: InlineResponse20084?,_ error: Error?) -> Void)) {
        analyticsOperatingSystemCountsWithRequestBuilder(start: start, ownerName: ownerName, appName: appName, end: end, top: top, versions: versions).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/analytics/oses
     - OSes in the time range.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter start: (query) Start date time in data in ISO 8601 date time format. 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter end: (query) Last date time in data in ISO 8601 date time format. (optional)
     - parameter top: (query) The maximum number of results to return. (0 will fetch all results) (optional, default to 30)
     - parameter versions: (query)  (optional)
     - returns: RequestBuilder<InlineResponse20084> 
     */
    open class func analyticsOperatingSystemCountsWithRequestBuilder(start: Date, ownerName: String, appName: String, end: Date? = nil, top: Int64? = nil, versions: [String]? = nil) -> RequestBuilder<InlineResponse20084> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/analytics/oses"
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "start": start.encodeToJSON(), 
            "end": end?.encodeToJSON(), 
            "$top": top?.encodeToJSON(), 
            "versions": versions?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<InlineResponse20084>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter start: (query) Start date time in data in ISO 8601 date time format. 
     - parameter interval: (query) Size of interval in ISO 8601 duration format. (PnYnMnDTnHnMnS|PnW|P&lt;date&gt;T&lt;time&gt;). The valid durations are 1 day (P1D), 1 week (P1W), and 30 days (P30D). 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter end: (query) Last date time in data in ISO 8601 date time format. (optional)
     - parameter versions: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func analyticsPerDeviceCounts(start: Date, interval: String, ownerName: String, appName: String, end: Date? = nil, versions: [String]? = nil, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: InlineResponse20081?,_ error: Error?) -> Void)) {
        analyticsPerDeviceCountsWithRequestBuilder(start: start, interval: interval, ownerName: ownerName, appName: appName, end: end, versions: versions).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/analytics/sessions_per_device
     - Count of sessions per device in the time range.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter start: (query) Start date time in data in ISO 8601 date time format. 
     - parameter interval: (query) Size of interval in ISO 8601 duration format. (PnYnMnDTnHnMnS|PnW|P&lt;date&gt;T&lt;time&gt;). The valid durations are 1 day (P1D), 1 week (P1W), and 30 days (P30D). 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter end: (query) Last date time in data in ISO 8601 date time format. (optional)
     - parameter versions: (query)  (optional)
     - returns: RequestBuilder<InlineResponse20081> 
     */
    open class func analyticsPerDeviceCountsWithRequestBuilder(start: Date, interval: String, ownerName: String, appName: String, end: Date? = nil, versions: [String]? = nil) -> RequestBuilder<InlineResponse20081> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/analytics/sessions_per_device"
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "start": start.encodeToJSON(), 
            "end": end?.encodeToJSON(), 
            "interval": interval.encodeToJSON(), 
            "versions": versions?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<InlineResponse20081>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter start: (query) Start date time in data in ISO 8601 date time format. 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter end: (query) Last date time in data in ISO 8601 date time format. (optional)
     - parameter top: (query) The maximum number of results to return. (0 will fetch all results) (optional, default to 30)
     - parameter versions: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func analyticsPlaceCounts(start: Date, ownerName: String, appName: String, end: Date? = nil, top: Int64? = nil, versions: [String]? = nil, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        analyticsPlaceCountsWithRequestBuilder(start: start, ownerName: ownerName, appName: appName, end: end, top: top, versions: versions).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/analytics/places
     - Places in the time range.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter start: (query) Start date time in data in ISO 8601 date time format. 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter end: (query) Last date time in data in ISO 8601 date time format. (optional)
     - parameter top: (query) The maximum number of results to return. (0 will fetch all results) (optional, default to 30)
     - parameter versions: (query)  (optional)
     - returns: RequestBuilder<Any> 
     */
    open class func analyticsPlaceCountsWithRequestBuilder(start: Date, ownerName: String, appName: String, end: Date? = nil, top: Int64? = nil, versions: [String]? = nil) -> RequestBuilder<Any> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/analytics/places"
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "start": start.encodeToJSON(), 
            "end": end?.encodeToJSON(), 
            "$top": top?.encodeToJSON(), 
            "versions": versions?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<Any>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter start: (query) Start date time in data in ISO 8601 date time format. 
     - parameter interval: (query) Size of interval in ISO 8601 duration format. (PnYnMnDTnHnMnS|PnW|P&lt;date&gt;T&lt;time&gt;). The valid durations are 1 day (P1D), 1 week (P1W), and 30 days (P30D). 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter end: (query) Last date time in data in ISO 8601 date time format. (optional)
     - parameter versions: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func analyticsSessionCounts(start: Date, interval: String, ownerName: String, appName: String, end: Date? = nil, versions: [String]? = nil, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: [InlineResponse20083]?,_ error: Error?) -> Void)) {
        analyticsSessionCountsWithRequestBuilder(start: start, interval: interval, ownerName: ownerName, appName: appName, end: end, versions: versions).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/analytics/session_counts
     - Count of sessions in the time range.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter start: (query) Start date time in data in ISO 8601 date time format. 
     - parameter interval: (query) Size of interval in ISO 8601 duration format. (PnYnMnDTnHnMnS|PnW|P&lt;date&gt;T&lt;time&gt;). The valid durations are 1 day (P1D), 1 week (P1W), and 30 days (P30D). 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter end: (query) Last date time in data in ISO 8601 date time format. (optional)
     - parameter versions: (query)  (optional)
     - returns: RequestBuilder<[InlineResponse20083]> 
     */
    open class func analyticsSessionCountsWithRequestBuilder(start: Date, interval: String, ownerName: String, appName: String, end: Date? = nil, versions: [String]? = nil) -> RequestBuilder<[InlineResponse20083]> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/analytics/session_counts"
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "start": start.encodeToJSON(), 
            "end": end?.encodeToJSON(), 
            "interval": interval.encodeToJSON(), 
            "versions": versions?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[InlineResponse20083]>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter start: (query) Start date time in data in ISO 8601 date time format. 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter end: (query) Last date time in data in ISO 8601 date time format. (optional)
     - parameter versions: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func analyticsSessionDurationsDistribution(start: Date, ownerName: String, appName: String, end: Date? = nil, versions: [String]? = nil, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: InlineResponse20082?,_ error: Error?) -> Void)) {
        analyticsSessionDurationsDistributionWithRequestBuilder(start: start, ownerName: ownerName, appName: appName, end: end, versions: versions).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/analytics/session_durations_distribution
     - Gets session duration.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter start: (query) Start date time in data in ISO 8601 date time format. 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter end: (query) Last date time in data in ISO 8601 date time format. (optional)
     - parameter versions: (query)  (optional)
     - returns: RequestBuilder<InlineResponse20082> 
     */
    open class func analyticsSessionDurationsDistributionWithRequestBuilder(start: Date, ownerName: String, appName: String, end: Date? = nil, versions: [String]? = nil) -> RequestBuilder<InlineResponse20082> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/analytics/session_durations_distribution"
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "start": start.encodeToJSON(), 
            "end": end?.encodeToJSON(), 
            "versions": versions?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<InlineResponse20082>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter audience: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func analyticsTestAudience(ownerName: String, appName: String, audience: InlineObject70, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        analyticsTestAudienceWithRequestBuilder(ownerName: ownerName, appName: appName, audience: audience).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /v0.1/apps/{owner_name}/{app_name}/analytics/audiences/definition/test
     - Tests audience definition.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter audience: (body)  
     - returns: RequestBuilder<Any> 
     */
    open class func analyticsTestAudienceWithRequestBuilder(ownerName: String, appName: String, audience: InlineObject70) -> RequestBuilder<Any> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/analytics/audiences/definition/test"
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: audience)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Any>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter start: (query) Start date time in data in ISO 8601 date time format. 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter end: (query) Last date time in data in ISO 8601 date time format. (optional)
     - parameter top: (query) The maximum number of results to return. (0 will fetch all results) (optional, default to 30)
     - parameter versions: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func analyticsVersions(start: Date, ownerName: String, appName: String, end: Date? = nil, top: Int64? = nil, versions: [String]? = nil, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        analyticsVersionsWithRequestBuilder(start: start, ownerName: ownerName, appName: appName, end: end, top: top, versions: versions).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/analytics/versions
     - Count of active versions in the time range ordered by version.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter start: (query) Start date time in data in ISO 8601 date time format. 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter end: (query) Last date time in data in ISO 8601 date time format. (optional)
     - parameter top: (query) The maximum number of results to return. (0 will fetch all results) (optional, default to 30)
     - parameter versions: (query)  (optional)
     - returns: RequestBuilder<Any> 
     */
    open class func analyticsVersionsWithRequestBuilder(start: Date, ownerName: String, appName: String, end: Date? = nil, top: Int64? = nil, versions: [String]? = nil) -> RequestBuilder<Any> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/analytics/versions"
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "start": start.encodeToJSON(), 
            "end": end?.encodeToJSON(), 
            "$top": top?.encodeToJSON(), 
            "versions": versions?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<Any>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func appBlockLogs(ownerName: String, appName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        appBlockLogsWithRequestBuilder(ownerName: ownerName, appName: appName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /v0.1/apps/{owner_name}/{app_name}/devices/block_logs
     - **Warning, this operation is not reversible.**   A successful call to this API will permanently stop ingesting any logs received via SDK by app_id, and cannot be restored. We advise caution when using this API, it is designed to permanently disable an app_id. 
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - returns: RequestBuilder<String> 
     */
    open class func appBlockLogsWithRequestBuilder(ownerName: String, appName: String) -> RequestBuilder<String> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/devices/block_logs"
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter crashId: (path) The id of the a crash 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter date: (query) Date of data requested (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func crashesListSessionLogs(crashId: String, ownerName: String, appName: String, date: Date? = nil, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: InlineResponse20070?,_ error: Error?) -> Void)) {
        crashesListSessionLogsWithRequestBuilder(crashId: crashId, ownerName: ownerName, appName: appName, date: date).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/crashes/{crash_id}/session_logs
     - Get session logs by crash ID
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter crashId: (path) The id of the a crash 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter date: (query) Date of data requested (optional)
     - returns: RequestBuilder<InlineResponse20070> 
     */
    open class func crashesListSessionLogsWithRequestBuilder(crashId: String, ownerName: String, appName: String, date: Date? = nil) -> RequestBuilder<InlineResponse20070> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/crashes/{crash_id}/session_logs"
        let crashIdPreEscape = "\(APIHelper.mapValueToPathItem(crashId))"
        let crashIdPostEscape = crashIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{crash_id}", with: crashIdPostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "date": date?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<InlineResponse20070>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter installId: (path) The id of the device 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func devicesBlockLogs(installId: String, ownerName: String, appName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        devicesBlockLogsWithRequestBuilder(installId: installId, ownerName: ownerName, appName: appName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /v0.1/apps/{owner_name}/{app_name}/devices/block_logs/{install_id}
     - **Warning, this operation is not reversible.**   A successful call to this API will permanently stop ingesting any logs received via SDK for the given installation ID, and cannot be restored. We advise caution when using this API, it is designed to permanently disable collection from a specific installation of the app on a device, usually following the request from a user. 
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter installId: (path) The id of the device 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - returns: RequestBuilder<String> 
     */
    open class func devicesBlockLogsWithRequestBuilder(installId: String, ownerName: String, appName: String) -> RequestBuilder<String> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/devices/block_logs/{install_id}"
        let installIdPreEscape = "\(APIHelper.mapValueToPathItem(installId))"
        let installIdPostEscape = installIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{install_id}", with: installIdPostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
