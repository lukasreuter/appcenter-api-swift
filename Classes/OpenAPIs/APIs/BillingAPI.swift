//
// BillingAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation



open class BillingAPI {
    /**
     * enum for parameter service
     */
    public enum Service_billingAggregatedInformationGetAll: String, CaseIterable {
        case test = "Test"
        case build = "Build"
    }

    /**
     * enum for parameter period
     */
    public enum Period_billingAggregatedInformationGetAll: String, CaseIterable {
        case previous = "Previous"
        case current = "Current"
        case next = "Next"
    }

    /**

     - parameter service: (query) Type of service that should be included in the Billing Information (optional)
     - parameter period: (query) Type of period that should be included in the Billing Information (optional)
     - parameter showOriginalPlans: (query) Controls whether the API should show the original plan when Azure Subscription is not enabled (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func billingAggregatedInformationGetAll(service: Service_billingAggregatedInformationGetAll? = nil, period: Period_billingAggregatedInformationGetAll? = nil, showOriginalPlans: Bool? = nil, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: InlineResponse20016?,_ error: Error?) -> Void)) {
        billingAggregatedInformationGetAllWithRequestBuilder(service: service, period: period, showOriginalPlans: showOriginalPlans).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/billing/allAccountsAggregated
     - Aggregated Billing Information for the requesting user and the organizations in which the user is an admin.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter service: (query) Type of service that should be included in the Billing Information (optional)
     - parameter period: (query) Type of period that should be included in the Billing Information (optional)
     - parameter showOriginalPlans: (query) Controls whether the API should show the original plan when Azure Subscription is not enabled (optional)
     - returns: RequestBuilder<InlineResponse20016> 
     */
    open class func billingAggregatedInformationGetAllWithRequestBuilder(service: Service_billingAggregatedInformationGetAll? = nil, period: Period_billingAggregatedInformationGetAll? = nil, showOriginalPlans: Bool? = nil) -> RequestBuilder<InlineResponse20016> {
        let path = "/v0.1/billing/allAccountsAggregated"
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "service": service?.encodeToJSON(), 
            "period": period?.encodeToJSON(), 
            "showOriginalPlans": showOriginalPlans?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<InlineResponse20016>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter service
     */
    public enum Service_billingAggregatedInformationGetByApp: String, CaseIterable {
        case test = "Test"
        case build = "Build"
    }

    /**
     * enum for parameter period
     */
    public enum Period_billingAggregatedInformationGetByApp: String, CaseIterable {
        case previous = "Previous"
        case current = "Current"
        case next = "Next"
    }

    /**

     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter service: (query) Type of service that should be included in the Billing Information (optional)
     - parameter period: (query) Type of period that should be included in the Billing Information (optional)
     - parameter showOriginalPlans: (query) Controls whether the API should show the original plan when Azure Subscription is not enabled (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func billingAggregatedInformationGetByApp(ownerName: String, appName: String, service: Service_billingAggregatedInformationGetByApp? = nil, period: Period_billingAggregatedInformationGetByApp? = nil, showOriginalPlans: Bool? = nil, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: InlineResponse20013?,_ error: Error?) -> Void)) {
        billingAggregatedInformationGetByAppWithRequestBuilder(ownerName: ownerName, appName: appName, service: service, period: period, showOriginalPlans: showOriginalPlans).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/billing/aggregated
     - Aggregated Billing Information for owner of a given app.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter service: (query) Type of service that should be included in the Billing Information (optional)
     - parameter period: (query) Type of period that should be included in the Billing Information (optional)
     - parameter showOriginalPlans: (query) Controls whether the API should show the original plan when Azure Subscription is not enabled (optional)
     - returns: RequestBuilder<InlineResponse20013> 
     */
    open class func billingAggregatedInformationGetByAppWithRequestBuilder(ownerName: String, appName: String, service: Service_billingAggregatedInformationGetByApp? = nil, period: Period_billingAggregatedInformationGetByApp? = nil, showOriginalPlans: Bool? = nil) -> RequestBuilder<InlineResponse20013> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/billing/aggregated"
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "service": service?.encodeToJSON(), 
            "period": period?.encodeToJSON(), 
            "showOriginalPlans": showOriginalPlans?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<InlineResponse20013>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter service
     */
    public enum Service_billingAggregatedInformationGetForOrg: String, CaseIterable {
        case test = "Test"
        case build = "Build"
    }

    /**
     * enum for parameter period
     */
    public enum Period_billingAggregatedInformationGetForOrg: String, CaseIterable {
        case previous = "Previous"
        case current = "Current"
        case next = "Next"
    }

    /**

     - parameter orgName: (path) The name of the Organization 
     - parameter service: (query) Type of service that should be included in the Billing Information (optional)
     - parameter period: (query) Type of period that should be included in the Billing Information (optional)
     - parameter showOriginalPlans: (query) Controls whether the API should show the original plan when Azure Subscription is not enabled (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func billingAggregatedInformationGetForOrg(orgName: String, service: Service_billingAggregatedInformationGetForOrg? = nil, period: Period_billingAggregatedInformationGetForOrg? = nil, showOriginalPlans: Bool? = nil, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: InlineResponse20013?,_ error: Error?) -> Void)) {
        billingAggregatedInformationGetForOrgWithRequestBuilder(orgName: orgName, service: service, period: period, showOriginalPlans: showOriginalPlans).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/orgs/{orgName}/billing/aggregated
     - Aggregated Billing Information for a given Organization.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter orgName: (path) The name of the Organization 
     - parameter service: (query) Type of service that should be included in the Billing Information (optional)
     - parameter period: (query) Type of period that should be included in the Billing Information (optional)
     - parameter showOriginalPlans: (query) Controls whether the API should show the original plan when Azure Subscription is not enabled (optional)
     - returns: RequestBuilder<InlineResponse20013> 
     */
    open class func billingAggregatedInformationGetForOrgWithRequestBuilder(orgName: String, service: Service_billingAggregatedInformationGetForOrg? = nil, period: Period_billingAggregatedInformationGetForOrg? = nil, showOriginalPlans: Bool? = nil) -> RequestBuilder<InlineResponse20013> {
        var path = "/v0.1/orgs/{orgName}/billing/aggregated"
        let orgNamePreEscape = "\(APIHelper.mapValueToPathItem(orgName))"
        let orgNamePostEscape = orgNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{orgName}", with: orgNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "service": service?.encodeToJSON(), 
            "period": period?.encodeToJSON(), 
            "showOriginalPlans": showOriginalPlans?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<InlineResponse20013>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
