//
// TestAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation



open class TestAPI {
    /**

     - parameter testRunId: (path) The ID of the test run 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func testArchiveTestRun(testRunId: UUID, ownerName: String, appName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: TestRun?,_ error: Error?) -> Void)) {
        testArchiveTestRunWithRequestBuilder(testRunId: testRunId, ownerName: ownerName, appName: appName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}
     - Logically deletes a test run
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter testRunId: (path) The ID of the test run 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - returns: RequestBuilder<TestRun> 
     */
    open class func testArchiveTestRunWithRequestBuilder(testRunId: UUID, ownerName: String, appName: String) -> RequestBuilder<TestRun> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}"
        let testRunIdPreEscape = "\(APIHelper.mapValueToPathItem(testRunId))"
        let testRunIdPostEscape = testRunIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{test_run_id}", with: testRunIdPostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TestRun>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter deviceList: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func testCreateDeviceSelection(ownerName: String, appName: String, deviceList: DeviceList, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: DeviceSelection?,_ error: Error?) -> Void)) {
        testCreateDeviceSelectionWithRequestBuilder(ownerName: ownerName, appName: appName, deviceList: deviceList).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /v0.1/apps/{owner_name}/{app_name}/device_selection
     - Creates a short ID for a list of devices
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter deviceList: (body)  
     - returns: RequestBuilder<DeviceSelection> 
     */
    open class func testCreateDeviceSelectionWithRequestBuilder(ownerName: String, appName: String, deviceList: DeviceList) -> RequestBuilder<DeviceSelection> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/device_selection"
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: deviceList)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<DeviceSelection>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter deviceSet: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func testCreateDeviceSetOfOwner(ownerName: String, appName: String, deviceSet: DeviceSetUpdateInformation3, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: DeviceSet?,_ error: Error?) -> Void)) {
        testCreateDeviceSetOfOwnerWithRequestBuilder(ownerName: ownerName, appName: appName, deviceSet: deviceSet).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /v0.1/apps/{owner_name}/{app_name}/owner/device_sets
     - Creates a device set belonging to the owner
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter deviceSet: (body)  
     - returns: RequestBuilder<DeviceSet> 
     */
    open class func testCreateDeviceSetOfOwnerWithRequestBuilder(ownerName: String, appName: String, deviceSet: DeviceSetUpdateInformation3) -> RequestBuilder<DeviceSet> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/owner/device_sets"
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: deviceSet)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<DeviceSet>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter deviceSet: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func testCreateDeviceSetOfUser(ownerName: String, appName: String, deviceSet: DeviceSetUpdateInformation1, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: DeviceSet?,_ error: Error?) -> Void)) {
        testCreateDeviceSetOfUserWithRequestBuilder(ownerName: ownerName, appName: appName, deviceSet: deviceSet).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /v0.1/apps/{owner_name}/{app_name}/user/device_sets
     - Creates a device set belonging to the user
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter deviceSet: (body)  
     - returns: RequestBuilder<DeviceSet> 
     */
    open class func testCreateDeviceSetOfUserWithRequestBuilder(ownerName: String, appName: String, deviceSet: DeviceSetUpdateInformation1) -> RequestBuilder<DeviceSet> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/user/device_sets"
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: deviceSet)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<DeviceSet>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func testCreateSubscription(ownerName: String, appName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Subscription1?,_ error: Error?) -> Void)) {
        testCreateSubscriptionWithRequestBuilder(ownerName: ownerName, appName: appName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /v0.1/apps/{owner_name}/{app_name}/subscriptions
     - Accept a free trial subscription
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - returns: RequestBuilder<Subscription1> 
     */
    open class func testCreateSubscriptionWithRequestBuilder(ownerName: String, appName: String) -> RequestBuilder<Subscription1> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/subscriptions"
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Subscription1>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func testCreateTestRun(ownerName: String, appName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        testCreateTestRunWithRequestBuilder(ownerName: ownerName, appName: appName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /v0.1/apps/{owner_name}/{app_name}/test_runs
     - Creates a new test run
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - responseHeaders: [Location(String)]
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - returns: RequestBuilder<Void> 
     */
    open class func testCreateTestRunWithRequestBuilder(ownerName: String, appName: String) -> RequestBuilder<Void> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/test_runs"
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = API.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter testSeriesName: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func testCreateTestSeries(ownerName: String, appName: String, testSeriesName: NameOfTheTestSeries1, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: TestSeries?,_ error: Error?) -> Void)) {
        testCreateTestSeriesWithRequestBuilder(ownerName: ownerName, appName: appName, testSeriesName: testSeriesName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /v0.1/apps/{owner_name}/{app_name}/test_series
     - Creates new test series for an application
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter testSeriesName: (body)  
     - returns: RequestBuilder<TestSeries> 
     */
    open class func testCreateTestSeriesWithRequestBuilder(ownerName: String, appName: String, testSeriesName: NameOfTheTestSeries1) -> RequestBuilder<TestSeries> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/test_series"
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: testSeriesName)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TestSeries>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter id: (path) The UUID of the device set 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func testDeleteDeviceSetOfOwner(id: UUID, ownerName: String, appName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        testDeleteDeviceSetOfOwnerWithRequestBuilder(id: id, ownerName: ownerName, appName: appName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /v0.1/apps/{owner_name}/{app_name}/owner/device_sets/{id}
     - Deletes a device set belonging to the owner
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter id: (path) The UUID of the device set 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - returns: RequestBuilder<Void> 
     */
    open class func testDeleteDeviceSetOfOwnerWithRequestBuilder(id: UUID, ownerName: String, appName: String) -> RequestBuilder<Void> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/owner/device_sets/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = API.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter id: (path) The UUID of the device set 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func testDeleteDeviceSetOfUser(id: UUID, ownerName: String, appName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        testDeleteDeviceSetOfUserWithRequestBuilder(id: id, ownerName: ownerName, appName: appName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /v0.1/apps/{owner_name}/{app_name}/user/device_sets/{id}
     - Deletes a device set belonging to the user
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter id: (path) The UUID of the device set 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - returns: RequestBuilder<Void> 
     */
    open class func testDeleteDeviceSetOfUserWithRequestBuilder(id: UUID, ownerName: String, appName: String) -> RequestBuilder<Void> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/user/device_sets/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = API.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter testSeriesSlug: (path) The slug of the test series 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func testDeleteTestSeries(testSeriesSlug: String, ownerName: String, appName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        testDeleteTestSeriesWithRequestBuilder(testSeriesSlug: testSeriesSlug, ownerName: ownerName, appName: appName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /v0.1/apps/{owner_name}/{app_name}/test_series/{test_series_slug}
     - Deletes a single test series
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter testSeriesSlug: (path) The slug of the test series 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - returns: RequestBuilder<Void> 
     */
    open class func testDeleteTestSeriesWithRequestBuilder(testSeriesSlug: String, ownerName: String, appName: String) -> RequestBuilder<Void> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/test_series/{test_series_slug}"
        let testSeriesSlugPreEscape = "\(APIHelper.mapValueToPathItem(testSeriesSlug))"
        let testSeriesSlugPostEscape = testSeriesSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{test_series_slug}", with: testSeriesSlugPostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = API.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func testGdprExportAccount(apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: InlineResponse200104?,_ error: Error?) -> Void)) {
        testGdprExportAccountWithRequestBuilder().execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/account/test/export/accounts
     - Lists account data
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - returns: RequestBuilder<InlineResponse200104> 
     */
    open class func testGdprExportAccountWithRequestBuilder() -> RequestBuilder<InlineResponse200104> {
        let path = "/v0.1/account/test/export/accounts"
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<InlineResponse200104>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func testGdprExportAccounts(apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: InlineResponse20027?,_ error: Error?) -> Void)) {
        testGdprExportAccountsWithRequestBuilder().execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/account/test/export
     - Lists all the endpoints available for Test accounts data
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - returns: RequestBuilder<InlineResponse20027> 
     */
    open class func testGdprExportAccountsWithRequestBuilder() -> RequestBuilder<InlineResponse20027> {
        let path = "/v0.1/account/test/export"
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<InlineResponse20027>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func testGdprExportApp(ownerName: String, appName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: InlineResponse20026?,_ error: Error?) -> Void)) {
        testGdprExportAppWithRequestBuilder(ownerName: ownerName, appName: appName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/test/export/apps
     - Lists app data
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - returns: RequestBuilder<InlineResponse20026> 
     */
    open class func testGdprExportAppWithRequestBuilder(ownerName: String, appName: String) -> RequestBuilder<InlineResponse20026> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/test/export/apps"
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<InlineResponse20026>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func testGdprExportApps(ownerName: String, appName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: InlineResponse20027?,_ error: Error?) -> Void)) {
        testGdprExportAppsWithRequestBuilder(ownerName: ownerName, appName: appName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/test/export
     - Lists all the endpoints available for Test apps data
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - returns: RequestBuilder<InlineResponse20027> 
     */
    open class func testGdprExportAppsWithRequestBuilder(ownerName: String, appName: String) -> RequestBuilder<InlineResponse20027> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/test/export"
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<InlineResponse20027>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func testGdprExportFeatureFlag(apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: InlineResponse200103?,_ error: Error?) -> Void)) {
        testGdprExportFeatureFlagWithRequestBuilder().execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/account/test/export/featureFlags
     - Lists feature flag data
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - returns: RequestBuilder<InlineResponse200103> 
     */
    open class func testGdprExportFeatureFlagWithRequestBuilder() -> RequestBuilder<InlineResponse200103> {
        let path = "/v0.1/account/test/export/featureFlags"
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<InlineResponse200103>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func testGdprExportFileSetFile(ownerName: String, appName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: InlineResponse20025?,_ error: Error?) -> Void)) {
        testGdprExportFileSetFileWithRequestBuilder(ownerName: ownerName, appName: appName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/test/export/fileSetFiles
     - Lists file set file data
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - returns: RequestBuilder<InlineResponse20025> 
     */
    open class func testGdprExportFileSetFileWithRequestBuilder(ownerName: String, appName: String) -> RequestBuilder<InlineResponse20025> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/test/export/fileSetFiles"
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<InlineResponse20025>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func testGdprExportHashFile(ownerName: String, appName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: InlineResponse20024?,_ error: Error?) -> Void)) {
        testGdprExportHashFileWithRequestBuilder(ownerName: ownerName, appName: appName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/test/export/hashFiles
     - Lists hash file data
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - returns: RequestBuilder<InlineResponse20024> 
     */
    open class func testGdprExportHashFileWithRequestBuilder(ownerName: String, appName: String) -> RequestBuilder<InlineResponse20024> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/test/export/hashFiles"
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<InlineResponse20024>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func testGdprExportPipelineTest(ownerName: String, appName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: InlineResponse20023?,_ error: Error?) -> Void)) {
        testGdprExportPipelineTestWithRequestBuilder(ownerName: ownerName, appName: appName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/test/export/pipelineTests
     - Lists pipeline test data
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - returns: RequestBuilder<InlineResponse20023> 
     */
    open class func testGdprExportPipelineTestWithRequestBuilder(ownerName: String, appName: String) -> RequestBuilder<InlineResponse20023> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/test/export/pipelineTests"
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<InlineResponse20023>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func testGdprExportTestRun(ownerName: String, appName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: InlineResponse20022?,_ error: Error?) -> Void)) {
        testGdprExportTestRunWithRequestBuilder(ownerName: ownerName, appName: appName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/test/export/testRuns
     - Lists test run data
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - returns: RequestBuilder<InlineResponse20022> 
     */
    open class func testGdprExportTestRunWithRequestBuilder(ownerName: String, appName: String) -> RequestBuilder<InlineResponse20022> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/test/export/testRuns"
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<InlineResponse20022>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter testSeriesSlug: (path) The slug of the test series 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func testGetAllTestRunsForSeries(testSeriesSlug: String, ownerName: String, appName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: [TestRun]?,_ error: Error?) -> Void)) {
        testGetAllTestRunsForSeriesWithRequestBuilder(testSeriesSlug: testSeriesSlug, ownerName: ownerName, appName: appName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/test_series/{test_series_slug}/test_runs
     - Returns list of all test runs for a given test series
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter testSeriesSlug: (path) The slug of the test series 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - returns: RequestBuilder<[TestRun]> 
     */
    open class func testGetAllTestRunsForSeriesWithRequestBuilder(testSeriesSlug: String, ownerName: String, appName: String) -> RequestBuilder<[TestRun]> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/test_series/{test_series_slug}/test_runs"
        let testSeriesSlugPreEscape = "\(APIHelper.mapValueToPathItem(testSeriesSlug))"
        let testSeriesSlugPostEscape = testSeriesSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{test_series_slug}", with: testSeriesSlugPostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[TestRun]>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter query: (query) A query string to filter test series (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func testGetAllTestSeries(ownerName: String, appName: String, query: String? = nil, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: [TestSeries]?,_ error: Error?) -> Void)) {
        testGetAllTestSeriesWithRequestBuilder(ownerName: ownerName, appName: appName, query: query).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/test_series
     - Returns list of all test series for an application
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter query: (query) A query string to filter test series (optional)
     - returns: RequestBuilder<[TestSeries]> 
     */
    open class func testGetAllTestSeriesWithRequestBuilder(ownerName: String, appName: String, query: String? = nil) -> RequestBuilder<[TestSeries]> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/test_series"
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "query": query?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[TestSeries]>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter appUploadId: (query) The ID of the test run (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func testGetDeviceConfigurations(ownerName: String, appName: String, appUploadId: UUID? = nil, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: [InlineResponse20064]?,_ error: Error?) -> Void)) {
        testGetDeviceConfigurationsWithRequestBuilder(ownerName: ownerName, appName: appName, appUploadId: appUploadId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/device_configurations
     - Returns a list of available devices
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter appUploadId: (query) The ID of the test run (optional)
     - returns: RequestBuilder<[InlineResponse20064]> 
     */
    open class func testGetDeviceConfigurationsWithRequestBuilder(ownerName: String, appName: String, appUploadId: UUID? = nil) -> RequestBuilder<[InlineResponse20064]> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/device_configurations"
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "app_upload_id": appUploadId?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[InlineResponse20064]>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter id: (path) The UUID of the device set 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func testGetDeviceSetOfOwner(id: UUID, ownerName: String, appName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: DeviceSet?,_ error: Error?) -> Void)) {
        testGetDeviceSetOfOwnerWithRequestBuilder(id: id, ownerName: ownerName, appName: appName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/owner/device_sets/{id}
     - Gets a device set belonging to the owner
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter id: (path) The UUID of the device set 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - returns: RequestBuilder<DeviceSet> 
     */
    open class func testGetDeviceSetOfOwnerWithRequestBuilder(id: UUID, ownerName: String, appName: String) -> RequestBuilder<DeviceSet> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/owner/device_sets/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<DeviceSet>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter id: (path) The UUID of the device set 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func testGetDeviceSetOfUser(id: UUID, ownerName: String, appName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: DeviceSet?,_ error: Error?) -> Void)) {
        testGetDeviceSetOfUserWithRequestBuilder(id: id, ownerName: ownerName, appName: appName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/user/device_sets/{id}
     - Gets a device set belonging to the user
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter id: (path) The UUID of the device set 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - returns: RequestBuilder<DeviceSet> 
     */
    open class func testGetDeviceSetOfUserWithRequestBuilder(id: UUID, ownerName: String, appName: String) -> RequestBuilder<DeviceSet> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/user/device_sets/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<DeviceSet>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func testGetSubscriptions(ownerName: String, appName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Subscription1?,_ error: Error?) -> Void)) {
        testGetSubscriptionsWithRequestBuilder(ownerName: ownerName, appName: appName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/subscriptions
     - Get information about the currently active subscriptions, if any
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - returns: RequestBuilder<Subscription1> 
     */
    open class func testGetSubscriptionsWithRequestBuilder(ownerName: String, appName: String) -> RequestBuilder<Subscription1> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/subscriptions"
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Subscription1>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter testRunId: (path) The ID of the test run 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func testGetTestReport(testRunId: UUID, ownerName: String, appName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        testGetTestReportWithRequestBuilder(testRunId: testRunId, ownerName: ownerName, appName: appName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/report
     - Returns a single test report
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter testRunId: (path) The ID of the test run 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - returns: RequestBuilder<Any> 
     */
    open class func testGetTestReportWithRequestBuilder(testRunId: UUID, ownerName: String, appName: String) -> RequestBuilder<Any> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/report"
        let testRunIdPreEscape = "\(APIHelper.mapValueToPathItem(testRunId))"
        let testRunIdPostEscape = testRunIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{test_run_id}", with: testRunIdPostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Any>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter testRunId: (path) The ID of the test run 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func testGetTestRun(testRunId: UUID, ownerName: String, appName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: TestRun?,_ error: Error?) -> Void)) {
        testGetTestRunWithRequestBuilder(testRunId: testRunId, ownerName: ownerName, appName: appName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}
     - Returns a single test runs
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter testRunId: (path) The ID of the test run 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - returns: RequestBuilder<TestRun> 
     */
    open class func testGetTestRunWithRequestBuilder(testRunId: UUID, ownerName: String, appName: String) -> RequestBuilder<TestRun> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}"
        let testRunIdPreEscape = "\(APIHelper.mapValueToPathItem(testRunId))"
        let testRunIdPostEscape = testRunIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{test_run_id}", with: testRunIdPostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TestRun>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter testRunId: (path) The ID of the test run 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func testGetTestRunState(testRunId: String, ownerName: String, appName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: TestRunState?,_ error: Error?) -> Void)) {
        testGetTestRunStateWithRequestBuilder(testRunId: testRunId, ownerName: ownerName, appName: appName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/state
     - Gets state of the test run
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter testRunId: (path) The ID of the test run 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - returns: RequestBuilder<TestRunState> 
     */
    open class func testGetTestRunStateWithRequestBuilder(testRunId: String, ownerName: String, appName: String) -> RequestBuilder<TestRunState> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/state"
        let testRunIdPreEscape = "\(APIHelper.mapValueToPathItem(testRunId))"
        let testRunIdPostEscape = testRunIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{test_run_id}", with: testRunIdPostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TestRunState>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func testGetTestRuns(ownerName: String, appName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: [TestRun]?,_ error: Error?) -> Void)) {
        testGetTestRunsWithRequestBuilder(ownerName: ownerName, appName: appName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/test_runs
     - Returns a list of test runs
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - returns: RequestBuilder<[TestRun]> 
     */
    open class func testGetTestRunsWithRequestBuilder(ownerName: String, appName: String) -> RequestBuilder<[TestRun]> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/test_runs"
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[TestRun]>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func testListDeviceSetsOfOwner(ownerName: String, appName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: [DeviceSet]?,_ error: Error?) -> Void)) {
        testListDeviceSetsOfOwnerWithRequestBuilder(ownerName: ownerName, appName: appName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/owner/device_sets
     - Lists device sets belonging to the owner
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - returns: RequestBuilder<[DeviceSet]> 
     */
    open class func testListDeviceSetsOfOwnerWithRequestBuilder(ownerName: String, appName: String) -> RequestBuilder<[DeviceSet]> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/owner/device_sets"
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[DeviceSet]>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func testListDeviceSetsOfUser(ownerName: String, appName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: [DeviceSet]?,_ error: Error?) -> Void)) {
        testListDeviceSetsOfUserWithRequestBuilder(ownerName: ownerName, appName: appName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/user/device_sets
     - Lists device sets belonging to the user
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - returns: RequestBuilder<[DeviceSet]> 
     */
    open class func testListDeviceSetsOfUserWithRequestBuilder(ownerName: String, appName: String) -> RequestBuilder<[DeviceSet]> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/user/device_sets"
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[DeviceSet]>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter testSeriesSlug: (path) The slug of the test series 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter name: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func testPatchTestSeries(testSeriesSlug: String, ownerName: String, appName: String, name: NameOfTheTestSeries, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: TestSeries?,_ error: Error?) -> Void)) {
        testPatchTestSeriesWithRequestBuilder(testSeriesSlug: testSeriesSlug, ownerName: ownerName, appName: appName, name: name).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /v0.1/apps/{owner_name}/{app_name}/test_series/{test_series_slug}
     - Updates name and slug of a test series
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter testSeriesSlug: (path) The slug of the test series 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter name: (body)  
     - returns: RequestBuilder<TestSeries> 
     */
    open class func testPatchTestSeriesWithRequestBuilder(testSeriesSlug: String, ownerName: String, appName: String, name: NameOfTheTestSeries) -> RequestBuilder<TestSeries> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/test_series/{test_series_slug}"
        let testSeriesSlugPreEscape = "\(APIHelper.mapValueToPathItem(testSeriesSlug))"
        let testSeriesSlugPostEscape = testSeriesSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{test_series_slug}", with: testSeriesSlugPostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: name)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TestSeries>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter testRunId: (path) The ID of the test run 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter startOptions: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func testStartTestRun(testRunId: String, ownerName: String, appName: String, startOptions: TestCloudStartTestRunOptions, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: TestCloudTestRunStartResult?,_ error: Error?) -> Void)) {
        testStartTestRunWithRequestBuilder(testRunId: testRunId, ownerName: ownerName, appName: appName, startOptions: startOptions).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/start
     - Starts test run
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter testRunId: (path) The ID of the test run 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter startOptions: (body)  
     - returns: RequestBuilder<TestCloudTestRunStartResult> 
     */
    open class func testStartTestRunWithRequestBuilder(testRunId: String, ownerName: String, appName: String, startOptions: TestCloudStartTestRunOptions) -> RequestBuilder<TestCloudTestRunStartResult> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/start"
        let testRunIdPreEscape = "\(APIHelper.mapValueToPathItem(testRunId))"
        let testRunIdPostEscape = testRunIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{test_run_id}", with: testRunIdPostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: startOptions)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TestCloudTestRunStartResult>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter testRunId: (path) The ID of the test run 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func testStartUploadingFile(testRunId: String, ownerName: String, appName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        testStartUploadingFileWithRequestBuilder(testRunId: testRunId, ownerName: ownerName, appName: appName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/files
     - Uploads file for a test run
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - responseHeaders: [Location(String)]
     - parameter testRunId: (path) The ID of the test run 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - returns: RequestBuilder<Void> 
     */
    open class func testStartUploadingFileWithRequestBuilder(testRunId: String, ownerName: String, appName: String) -> RequestBuilder<Void> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/files"
        let testRunIdPreEscape = "\(APIHelper.mapValueToPathItem(testRunId))"
        let testRunIdPostEscape = testRunIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{test_run_id}", with: testRunIdPostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = API.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter testRunId: (path) The ID of the test run to be stopped 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func testStopTestRun(testRunId: String, ownerName: String, appName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: TestRun?,_ error: Error?) -> Void)) {
        testStopTestRunWithRequestBuilder(testRunId: testRunId, ownerName: ownerName, appName: appName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/stop
     - Stop a test run execution
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter testRunId: (path) The ID of the test run to be stopped 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - returns: RequestBuilder<TestRun> 
     */
    open class func testStopTestRunWithRequestBuilder(testRunId: String, ownerName: String, appName: String) -> RequestBuilder<TestRun> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/stop"
        let testRunIdPreEscape = "\(APIHelper.mapValueToPathItem(testRunId))"
        let testRunIdPostEscape = testRunIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{test_run_id}", with: testRunIdPostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TestRun>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter id: (path) The UUID of the device set 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter deviceSet: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func testUpdateDeviceSetOfOwner(id: UUID, ownerName: String, appName: String, deviceSet: DeviceSetUpdateInformation2, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: DeviceSet?,_ error: Error?) -> Void)) {
        testUpdateDeviceSetOfOwnerWithRequestBuilder(id: id, ownerName: ownerName, appName: appName, deviceSet: deviceSet).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /v0.1/apps/{owner_name}/{app_name}/owner/device_sets/{id}
     - Updates a device set belonging to the owner
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter id: (path) The UUID of the device set 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter deviceSet: (body)  
     - returns: RequestBuilder<DeviceSet> 
     */
    open class func testUpdateDeviceSetOfOwnerWithRequestBuilder(id: UUID, ownerName: String, appName: String, deviceSet: DeviceSetUpdateInformation2) -> RequestBuilder<DeviceSet> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/owner/device_sets/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: deviceSet)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<DeviceSet>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter id: (path) The UUID of the device set 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter deviceSet: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func testUpdateDeviceSetOfUser(id: UUID, ownerName: String, appName: String, deviceSet: DeviceSetUpdateInformation, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: DeviceSet?,_ error: Error?) -> Void)) {
        testUpdateDeviceSetOfUserWithRequestBuilder(id: id, ownerName: ownerName, appName: appName, deviceSet: deviceSet).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /v0.1/apps/{owner_name}/{app_name}/user/device_sets/{id}
     - Updates a device set belonging to the user
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter id: (path) The UUID of the device set 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter deviceSet: (body)  
     - returns: RequestBuilder<DeviceSet> 
     */
    open class func testUpdateDeviceSetOfUserWithRequestBuilder(id: UUID, ownerName: String, appName: String, deviceSet: DeviceSetUpdateInformation) -> RequestBuilder<DeviceSet> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/user/device_sets/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: deviceSet)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<DeviceSet>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter testRunId: (path) The ID of the test run 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter fileInfo: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func testUploadHash(testRunId: String, ownerName: String, appName: String, fileInfo: TestCloudFileHash1, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        testUploadHashWithRequestBuilder(testRunId: testRunId, ownerName: ownerName, appName: appName, fileInfo: fileInfo).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/hashes
     - Adds file with the given hash to a test run
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter testRunId: (path) The ID of the test run 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter fileInfo: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func testUploadHashWithRequestBuilder(testRunId: String, ownerName: String, appName: String, fileInfo: TestCloudFileHash1) -> RequestBuilder<Void> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/hashes"
        let testRunIdPreEscape = "\(APIHelper.mapValueToPathItem(testRunId))"
        let testRunIdPostEscape = testRunIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{test_run_id}", with: testRunIdPostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: fileInfo)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = API.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter testRunId: (path) The ID of the test run 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter fileInfo: (body) File hash information 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func testUploadHashesBatch(testRunId: String, ownerName: String, appName: String, fileInfo: [TestCloudFileHash], apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: [TestCloudFileHashResponse]?,_ error: Error?) -> Void)) {
        testUploadHashesBatchWithRequestBuilder(testRunId: testRunId, ownerName: ownerName, appName: appName, fileInfo: fileInfo).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/hashes/batch
     - Adds file with the given hash to a test run
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter testRunId: (path) The ID of the test run 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter fileInfo: (body) File hash information 
     - returns: RequestBuilder<[TestCloudFileHashResponse]> 
     */
    open class func testUploadHashesBatchWithRequestBuilder(testRunId: String, ownerName: String, appName: String, fileInfo: [TestCloudFileHash]) -> RequestBuilder<[TestCloudFileHashResponse]> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/hashes/batch"
        let testRunIdPreEscape = "\(APIHelper.mapValueToPathItem(testRunId))"
        let testRunIdPostEscape = testRunIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{test_run_id}", with: testRunIdPostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: fileInfo)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[TestCloudFileHashResponse]>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
