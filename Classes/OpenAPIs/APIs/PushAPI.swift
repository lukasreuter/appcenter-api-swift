//
// PushAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation



open class PushAPI {
    /**

     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func pushConfigExists(ownerName: String, appName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        pushConfigExistsWithRequestBuilder(ownerName: ownerName, appName: appName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - HEAD /v0.1/apps/{owner_name}/{app_name}/push/notifications_config
     - Returns whether a push configuration exists for the selected app.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - returns: RequestBuilder<Void> 
     */
    open class func pushConfigExistsWithRequestBuilder(ownerName: String, appName: String) -> RequestBuilder<Void> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/push/notifications_config"
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = API.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "HEAD", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter notificationIds: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func pushDelete(ownerName: String, appName: String, notificationIds: InlineObject41, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        pushDeleteWithRequestBuilder(ownerName: ownerName, appName: appName, notificationIds: notificationIds).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /v0.1/apps/{owner_name}/{app_name}/push/notifications
     - Delete a notification.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter notificationIds: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func pushDeleteWithRequestBuilder(ownerName: String, appName: String, notificationIds: InlineObject41) -> RequestBuilder<Void> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/push/notifications"
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: notificationIds)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = API.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func pushDeleteConfig(ownerName: String, appName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        pushDeleteConfigWithRequestBuilder(ownerName: ownerName, appName: appName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /v0.1/apps/{owner_name}/{app_name}/push/notifications_config
     - Delete the push configuration for the selected app.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - returns: RequestBuilder<Void> 
     */
    open class func pushDeleteConfigWithRequestBuilder(ownerName: String, appName: String) -> RequestBuilder<Void> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/push/notifications_config"
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = API.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter installId: (path) device install id 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func pushDeleteInstallId(installId: String, ownerName: String, appName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        pushDeleteInstallIdWithRequestBuilder(installId: installId, ownerName: ownerName, appName: appName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /v0.1/apps/{owner_name}/{app_name}/push/devices/{install_id}
     - Delete a device with the selected installId.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter installId: (path) device install id 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - returns: RequestBuilder<Void> 
     */
    open class func pushDeleteInstallIdWithRequestBuilder(installId: String, ownerName: String, appName: String) -> RequestBuilder<Void> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/push/devices/{install_id}"
        let installIdPreEscape = "\(APIHelper.mapValueToPathItem(installId))"
        let installIdPostEscape = installIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{install_id}", with: installIdPostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = API.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter properties: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func pushExportDevices(ownerName: String, appName: String, properties: InlineObject42, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        pushExportDevicesWithRequestBuilder(ownerName: ownerName, appName: appName, properties: properties).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /v0.1/apps/{owner_name}/{app_name}/push/device_exports
     - Exports information for all devices using Push to Azure Blob Storage
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter properties: (body)  
     - returns: RequestBuilder<Any> 
     */
    open class func pushExportDevicesWithRequestBuilder(ownerName: String, appName: String, properties: InlineObject42) -> RequestBuilder<Any> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/push/device_exports"
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: properties)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Any>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter exportId: (path) The id of the export. 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func pushExportDevicesStatus(exportId: String, ownerName: String, appName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: InlineResponse20037?,_ error: Error?) -> Void)) {
        pushExportDevicesStatusWithRequestBuilder(exportId: exportId, ownerName: ownerName, appName: appName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/push/device_exports/{export_id}
     - Get the status of an export operation.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter exportId: (path) The id of the export. 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - returns: RequestBuilder<InlineResponse20037> 
     */
    open class func pushExportDevicesStatusWithRequestBuilder(exportId: String, ownerName: String, appName: String) -> RequestBuilder<InlineResponse20037> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/push/device_exports/{export_id}"
        let exportIdPreEscape = "\(APIHelper.mapValueToPathItem(exportId))"
        let exportIdPostEscape = exportIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{export_id}", with: exportIdPostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<InlineResponse20037>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter notificationId: (path) The id of the notification. 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func pushGet(notificationId: String, ownerName: String, appName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: InlineResponse20035?,_ error: Error?) -> Void)) {
        pushGetWithRequestBuilder(notificationId: notificationId, ownerName: ownerName, appName: appName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/push/notifications/{notification_id}
     - Get details about a specific notification.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter notificationId: (path) The id of the notification. 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - returns: RequestBuilder<InlineResponse20035> 
     */
    open class func pushGetWithRequestBuilder(notificationId: String, ownerName: String, appName: String) -> RequestBuilder<InlineResponse20035> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/push/notifications/{notification_id}"
        let notificationIdPreEscape = "\(APIHelper.mapValueToPathItem(notificationId))"
        let notificationIdPostEscape = notificationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{notification_id}", with: notificationIdPostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<InlineResponse20035>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func pushGetConfig(ownerName: String, appName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        pushGetConfigWithRequestBuilder(ownerName: ownerName, appName: appName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/push/notifications_config
     - Get the push configuration for the selected app.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - returns: RequestBuilder<Any> 
     */
    open class func pushGetConfigWithRequestBuilder(ownerName: String, appName: String) -> RequestBuilder<Any> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/push/notifications_config"
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Any>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter inlinecount
     */
    public enum Inlinecount_pushList: String, CaseIterable {
        case allpages = "allpages"
        case _none = "none"
    }

    /**

     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter top: (query) The maximum number of results to return. (0 will fetch all results) (optional, default to 30)
     - parameter skiptoken: (query) The value identifies a starting point in the collection of entities. This parameter along with limit is used to perform pagination. (optional)
     - parameter orderby: (query) controls the sorting order and sorting based on which column (optional, default to "count desc")
     - parameter inlinecount: (query) Controls whether or not to include a count of all the items across all pages. (optional, default to ._none)
     - parameter includeArchived: (query) Include arhived push notifications (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func pushList(ownerName: String, appName: String, top: Int64? = nil, skiptoken: String? = nil, orderby: String? = nil, inlinecount: Inlinecount_pushList? = nil, includeArchived: Bool? = nil, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: InlineResponse20036?,_ error: Error?) -> Void)) {
        pushListWithRequestBuilder(ownerName: ownerName, appName: appName, top: top, skiptoken: skiptoken, orderby: orderby, inlinecount: inlinecount, includeArchived: includeArchived).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/push/notifications
     - Get a list of notifications from the service.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter top: (query) The maximum number of results to return. (0 will fetch all results) (optional, default to 30)
     - parameter skiptoken: (query) The value identifies a starting point in the collection of entities. This parameter along with limit is used to perform pagination. (optional)
     - parameter orderby: (query) controls the sorting order and sorting based on which column (optional, default to "count desc")
     - parameter inlinecount: (query) Controls whether or not to include a count of all the items across all pages. (optional, default to ._none)
     - parameter includeArchived: (query) Include arhived push notifications (optional)
     - returns: RequestBuilder<InlineResponse20036> 
     */
    open class func pushListWithRequestBuilder(ownerName: String, appName: String, top: Int64? = nil, skiptoken: String? = nil, orderby: String? = nil, inlinecount: Inlinecount_pushList? = nil, includeArchived: Bool? = nil) -> RequestBuilder<InlineResponse20036> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/push/notifications"
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "$top": top?.encodeToJSON(), 
            "$skiptoken": skiptoken?.encodeToJSON(), 
            "$orderby": orderby?.encodeToJSON(), 
            "$inlinecount": inlinecount?.encodeToJSON(), 
            "include_archived": includeArchived?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<InlineResponse20036>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter properties: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func pushSend(ownerName: String, appName: String, properties: InlineObject40, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        pushSendWithRequestBuilder(ownerName: ownerName, appName: appName, properties: properties).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /v0.1/apps/{owner_name}/{app_name}/push/notifications
     - Send a notification to one or more devices.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - responseHeaders: [Location(String)]
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter properties: (body)  
     - returns: RequestBuilder<Any> 
     */
    open class func pushSendWithRequestBuilder(ownerName: String, appName: String, properties: InlineObject40) -> RequestBuilder<Any> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/push/notifications"
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: properties)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Any>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter properties: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func pushSetConfig(ownerName: String, appName: String, properties: InlineObject39, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        pushSetConfigWithRequestBuilder(ownerName: ownerName, appName: appName, properties: properties).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /v0.1/apps/{owner_name}/{app_name}/push/notifications_config
     - Set the push configuration for the selected app.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter properties: (body)  
     - returns: RequestBuilder<Any> 
     */
    open class func pushSetConfigWithRequestBuilder(ownerName: String, appName: String, properties: InlineObject39) -> RequestBuilder<Any> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/push/notifications_config"
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: properties)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Any>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
