//
// CrashAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation



open class CrashAPI {
    /**

     - parameter crashGroupId: (path) id of a specific group 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func crashGroupsGet(crashGroupId: String, ownerName: String, appName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: InlineResponse20075?,_ error: Error?) -> Void)) {
        crashGroupsGetWithRequestBuilder(crashGroupId: crashGroupId, ownerName: ownerName, appName: appName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}
     - Gets a specific group.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter crashGroupId: (path) id of a specific group 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - returns: RequestBuilder<InlineResponse20075> 
     */
    open class func crashGroupsGetWithRequestBuilder(crashGroupId: String, ownerName: String, appName: String) -> RequestBuilder<InlineResponse20075> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}"
        let crashGroupIdPreEscape = "\(APIHelper.mapValueToPathItem(crashGroupId))"
        let crashGroupIdPostEscape = crashGroupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{crash_group_id}", with: crashGroupIdPostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<InlineResponse20075>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter crashGroupId: (path) id of a specific group 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter groupingOnly: (query) true if the stacktrace should be only the relevant thread / exception. Default is false (optional, default to false)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func crashGroupsGetStacktrace(crashGroupId: String, ownerName: String, appName: String, groupingOnly: Bool? = nil, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Stacktrace?,_ error: Error?) -> Void)) {
        crashGroupsGetStacktraceWithRequestBuilder(crashGroupId: crashGroupId, ownerName: ownerName, appName: appName, groupingOnly: groupingOnly).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}/stacktrace
     - Gets a stacktrace for a specific crash.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter crashGroupId: (path) id of a specific group 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter groupingOnly: (query) true if the stacktrace should be only the relevant thread / exception. Default is false (optional, default to false)
     - returns: RequestBuilder<Stacktrace> 
     */
    open class func crashGroupsGetStacktraceWithRequestBuilder(crashGroupId: String, ownerName: String, appName: String, groupingOnly: Bool? = nil) -> RequestBuilder<Stacktrace> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}/stacktrace"
        let crashGroupIdPreEscape = "\(APIHelper.mapValueToPathItem(crashGroupId))"
        let crashGroupIdPostEscape = crashGroupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{crash_group_id}", with: crashGroupIdPostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "grouping_only": groupingOnly?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<Stacktrace>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter groupType
     */
    public enum GroupType_crashGroupsList: String, CaseIterable {
        case groupType1 = "GroupType1"
        case groupType2 = "GroupType2"
    }

    /**
     * enum for parameter groupStatus
     */
    public enum GroupStatus_crashGroupsList: String, CaseIterable {
        case _open = "open"
        case closed = "closed"
        case ignored = "ignored"
    }

    /**
     * enum for parameter orderby
     */
    public enum Orderby_crashGroupsList: String, CaseIterable {
        case lastOccurrenceAsc = "last_occurrence asc"
        case lastOccurrenceDesc = "last_occurrence desc"
        case countAsc = "count asc"
        case countDesc = "count desc"
        case displayIdAsc = "display_id asc"
        case displayIdDesc = "display_id desc"
        case impactedUsersAsc = "impacted_users asc"
        case impactedUsersDesc = "impacted_users desc"
    }

    /**

     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter lastOccurrenceFrom: (query) Earliest date when the last time a crash occured in a crash group (optional)
     - parameter lastOccurrenceTo: (query) Latest date when the last time a crash occured in a crash group (optional)
     - parameter appVersion: (query) version (optional)
     - parameter groupType: (query)  (optional)
     - parameter groupStatus: (query)  (optional)
     - parameter groupTextSearch: (query) A freetext search that matches in crash, crash types, crash stack_traces and crash user (optional)
     - parameter orderby: (query) the OData-like $orderby argument (optional, default to .lastOccurrenceDesc)
     - parameter continuationToken: (query) Cassandra request continuation token. The token is used for pagination. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func crashGroupsList(ownerName: String, appName: String, lastOccurrenceFrom: Date? = nil, lastOccurrenceTo: Date? = nil, appVersion: String? = nil, groupType: GroupType_crashGroupsList? = nil, groupStatus: GroupStatus_crashGroupsList? = nil, groupTextSearch: String? = nil, orderby: Orderby_crashGroupsList? = nil, continuationToken: String? = nil, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: InlineResponse20076?,_ error: Error?) -> Void)) {
        crashGroupsListWithRequestBuilder(ownerName: ownerName, appName: appName, lastOccurrenceFrom: lastOccurrenceFrom, lastOccurrenceTo: lastOccurrenceTo, appVersion: appVersion, groupType: groupType, groupStatus: groupStatus, groupTextSearch: groupTextSearch, orderby: orderby, continuationToken: continuationToken).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/crash_groups
     - Gets a list of crash groups and whether the list contains all available groups.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter lastOccurrenceFrom: (query) Earliest date when the last time a crash occured in a crash group (optional)
     - parameter lastOccurrenceTo: (query) Latest date when the last time a crash occured in a crash group (optional)
     - parameter appVersion: (query) version (optional)
     - parameter groupType: (query)  (optional)
     - parameter groupStatus: (query)  (optional)
     - parameter groupTextSearch: (query) A freetext search that matches in crash, crash types, crash stack_traces and crash user (optional)
     - parameter orderby: (query) the OData-like $orderby argument (optional, default to .lastOccurrenceDesc)
     - parameter continuationToken: (query) Cassandra request continuation token. The token is used for pagination. (optional)
     - returns: RequestBuilder<InlineResponse20076> 
     */
    open class func crashGroupsListWithRequestBuilder(ownerName: String, appName: String, lastOccurrenceFrom: Date? = nil, lastOccurrenceTo: Date? = nil, appVersion: String? = nil, groupType: GroupType_crashGroupsList? = nil, groupStatus: GroupStatus_crashGroupsList? = nil, groupTextSearch: String? = nil, orderby: Orderby_crashGroupsList? = nil, continuationToken: String? = nil) -> RequestBuilder<InlineResponse20076> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/crash_groups"
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "last_occurrence_from": lastOccurrenceFrom?.encodeToJSON(), 
            "last_occurrence_to": lastOccurrenceTo?.encodeToJSON(), 
            "app_version": appVersion?.encodeToJSON(), 
            "group_type": groupType?.encodeToJSON(), 
            "group_status": groupStatus?.encodeToJSON(), 
            "group_text_search": groupTextSearch?.encodeToJSON(), 
            "$orderby": orderby?.encodeToJSON(), 
            "continuation_token": continuationToken?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<InlineResponse20076>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter crashGroupId: (path) id of a specific group 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter group: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func crashGroupsUpdate(crashGroupId: String, ownerName: String, appName: String, group: InlineObject61, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: InlineResponse20075?,_ error: Error?) -> Void)) {
        crashGroupsUpdateWithRequestBuilder(crashGroupId: crashGroupId, ownerName: ownerName, appName: appName, group: group).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}
     - Updates a group.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter crashGroupId: (path) id of a specific group 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter group: (body)  
     - returns: RequestBuilder<InlineResponse20075> 
     */
    open class func crashGroupsUpdateWithRequestBuilder(crashGroupId: String, ownerName: String, appName: String, group: InlineObject61) -> RequestBuilder<InlineResponse20075> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}"
        let crashGroupIdPreEscape = "\(APIHelper.mapValueToPathItem(crashGroupId))"
        let crashGroupIdPostEscape = crashGroupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{crash_group_id}", with: crashGroupIdPostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: group)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<InlineResponse20075>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter crashGroupId: (path) id of a specific group 
     - parameter crashId: (path) id of a specific crash 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter retentionDelete: (query) true in that case if the method should skip update counts (optional, default to false)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func crashesDelete(crashGroupId: String, crashId: String, ownerName: String, appName: String, retentionDelete: Bool? = nil, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: InlineResponse20074?,_ error: Error?) -> Void)) {
        crashesDeleteWithRequestBuilder(crashGroupId: crashGroupId, crashId: crashId, ownerName: ownerName, appName: appName, retentionDelete: retentionDelete).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}/crashes/{crash_id}
     - Delete a specific crash and related attachments and blobs for an app.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter crashGroupId: (path) id of a specific group 
     - parameter crashId: (path) id of a specific crash 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter retentionDelete: (query) true in that case if the method should skip update counts (optional, default to false)
     - returns: RequestBuilder<InlineResponse20074> 
     */
    open class func crashesDeleteWithRequestBuilder(crashGroupId: String, crashId: String, ownerName: String, appName: String, retentionDelete: Bool? = nil) -> RequestBuilder<InlineResponse20074> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}/crashes/{crash_id}"
        let crashGroupIdPreEscape = "\(APIHelper.mapValueToPathItem(crashGroupId))"
        let crashGroupIdPostEscape = crashGroupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{crash_group_id}", with: crashGroupIdPostEscape, options: .literal, range: nil)
        let crashIdPreEscape = "\(APIHelper.mapValueToPathItem(crashId))"
        let crashIdPostEscape = crashIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{crash_id}", with: crashIdPostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "retention_delete": retentionDelete?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<InlineResponse20074>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter crashGroupId: (path) id of a specific group 
     - parameter crashId: (path) id of a specific crash 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter includeReport: (query) true if the crash should include the raw crash report. Default is false (optional, default to false)
     - parameter includeLog: (query) true if the crash should include the custom log report. Default is false (optional, default to false)
     - parameter includeDetails: (query) true if the crash should include in depth crash details (optional, default to false)
     - parameter includeStacktrace: (query) true if the crash should include the stacktrace information (optional, default to false)
     - parameter groupingOnly: (query) true if the stacktrace should be only the relevant thread / exception. Default is false (optional, default to false)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func crashesGet(crashGroupId: String, crashId: String, ownerName: String, appName: String, includeReport: Bool? = nil, includeLog: Bool? = nil, includeDetails: Bool? = nil, includeStacktrace: Bool? = nil, groupingOnly: Bool? = nil, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Crash?,_ error: Error?) -> Void)) {
        crashesGetWithRequestBuilder(crashGroupId: crashGroupId, crashId: crashId, ownerName: ownerName, appName: appName, includeReport: includeReport, includeLog: includeLog, includeDetails: includeDetails, includeStacktrace: includeStacktrace, groupingOnly: groupingOnly).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}/crashes/{crash_id}
     - Gets a specific crash for an app.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter crashGroupId: (path) id of a specific group 
     - parameter crashId: (path) id of a specific crash 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter includeReport: (query) true if the crash should include the raw crash report. Default is false (optional, default to false)
     - parameter includeLog: (query) true if the crash should include the custom log report. Default is false (optional, default to false)
     - parameter includeDetails: (query) true if the crash should include in depth crash details (optional, default to false)
     - parameter includeStacktrace: (query) true if the crash should include the stacktrace information (optional, default to false)
     - parameter groupingOnly: (query) true if the stacktrace should be only the relevant thread / exception. Default is false (optional, default to false)
     - returns: RequestBuilder<Crash> 
     */
    open class func crashesGetWithRequestBuilder(crashGroupId: String, crashId: String, ownerName: String, appName: String, includeReport: Bool? = nil, includeLog: Bool? = nil, includeDetails: Bool? = nil, includeStacktrace: Bool? = nil, groupingOnly: Bool? = nil) -> RequestBuilder<Crash> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}/crashes/{crash_id}"
        let crashGroupIdPreEscape = "\(APIHelper.mapValueToPathItem(crashGroupId))"
        let crashGroupIdPostEscape = crashGroupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{crash_group_id}", with: crashGroupIdPostEscape, options: .literal, range: nil)
        let crashIdPreEscape = "\(APIHelper.mapValueToPathItem(crashId))"
        let crashIdPostEscape = crashIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{crash_id}", with: crashIdPostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "include_report": includeReport?.encodeToJSON(), 
            "include_log": includeLog?.encodeToJSON(), 
            "include_details": includeDetails?.encodeToJSON(), 
            "include_stacktrace": includeStacktrace?.encodeToJSON(), 
            "grouping_only": groupingOnly?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<Crash>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func crashesGetAppCrashesInfo(ownerName: String, appName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: InlineResponse20069?,_ error: Error?) -> Void)) {
        crashesGetAppCrashesInfoWithRequestBuilder(ownerName: ownerName, appName: appName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/crashes_info
     - Gets whether the application has any crashes.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - returns: RequestBuilder<InlineResponse20069> 
     */
    open class func crashesGetAppCrashesInfoWithRequestBuilder(ownerName: String, appName: String) -> RequestBuilder<InlineResponse20069> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/crashes_info"
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<InlineResponse20069>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func crashesGetAppVersions(ownerName: String, appName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: [InlineResponse20019]?,_ error: Error?) -> Void)) {
        crashesGetAppVersionsWithRequestBuilder(ownerName: ownerName, appName: appName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/versions
     - Gets a list of application versions.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - returns: RequestBuilder<[InlineResponse20019]> 
     */
    open class func crashesGetAppVersionsWithRequestBuilder(ownerName: String, appName: String) -> RequestBuilder<[InlineResponse20019]> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/versions"
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[InlineResponse20019]>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter crashId: (path) id of a specific crash 
     - parameter attachmentId: (path) attachment id 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func crashesGetCrashAttachmentLocation(crashId: String, attachmentId: String, ownerName: String, appName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: InlineResponse20071?,_ error: Error?) -> Void)) {
        crashesGetCrashAttachmentLocationWithRequestBuilder(crashId: crashId, attachmentId: attachmentId, ownerName: ownerName, appName: appName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/crashes/{crash_id}/attachments/{attachment_id}/location
     - Gets the URI location to download crash attachment.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter crashId: (path) id of a specific crash 
     - parameter attachmentId: (path) attachment id 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - returns: RequestBuilder<InlineResponse20071> 
     */
    open class func crashesGetCrashAttachmentLocationWithRequestBuilder(crashId: String, attachmentId: String, ownerName: String, appName: String) -> RequestBuilder<InlineResponse20071> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/crashes/{crash_id}/attachments/{attachment_id}/location"
        let crashIdPreEscape = "\(APIHelper.mapValueToPathItem(crashId))"
        let crashIdPostEscape = crashIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{crash_id}", with: crashIdPostEscape, options: .literal, range: nil)
        let attachmentIdPreEscape = "\(APIHelper.mapValueToPathItem(attachmentId))"
        let attachmentIdPostEscape = attachmentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{attachment_id}", with: attachmentIdPostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<InlineResponse20071>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter crashId: (path) id of a specific crash 
     - parameter attachmentId: (path) attachment id 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func crashesGetCrashTextAttachmentContent(crashId: String, attachmentId: String, ownerName: String, appName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        crashesGetCrashTextAttachmentContentWithRequestBuilder(crashId: crashId, attachmentId: attachmentId, ownerName: ownerName, appName: appName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/crashes/{crash_id}/attachments/{attachment_id}/text
     - Gets content of the text attachment.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter crashId: (path) id of a specific crash 
     - parameter attachmentId: (path) attachment id 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - returns: RequestBuilder<String> 
     */
    open class func crashesGetCrashTextAttachmentContentWithRequestBuilder(crashId: String, attachmentId: String, ownerName: String, appName: String) -> RequestBuilder<String> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/crashes/{crash_id}/attachments/{attachment_id}/text"
        let crashIdPreEscape = "\(APIHelper.mapValueToPathItem(crashId))"
        let crashIdPostEscape = crashIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{crash_id}", with: crashIdPostEscape, options: .literal, range: nil)
        let attachmentIdPreEscape = "\(APIHelper.mapValueToPathItem(attachmentId))"
        let attachmentIdPostEscape = attachmentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{attachment_id}", with: attachmentIdPostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter crashGroupId: (path) id of a specific group 
     - parameter crashId: (path) id of a specific crash 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func crashesGetNativeCrash(crashGroupId: String, crashId: String, ownerName: String, appName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        crashesGetNativeCrashWithRequestBuilder(crashGroupId: crashGroupId, crashId: crashId, ownerName: ownerName, appName: appName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}/crashes/{crash_id}/native
     - Gets the native log of a specific crash.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter crashGroupId: (path) id of a specific group 
     - parameter crashId: (path) id of a specific crash 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - returns: RequestBuilder<String> 
     */
    open class func crashesGetNativeCrashWithRequestBuilder(crashGroupId: String, crashId: String, ownerName: String, appName: String) -> RequestBuilder<String> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}/crashes/{crash_id}/native"
        let crashGroupIdPreEscape = "\(APIHelper.mapValueToPathItem(crashGroupId))"
        let crashGroupIdPostEscape = crashGroupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{crash_group_id}", with: crashGroupIdPostEscape, options: .literal, range: nil)
        let crashIdPreEscape = "\(APIHelper.mapValueToPathItem(crashId))"
        let crashIdPostEscape = crashIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{crash_id}", with: crashIdPostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter crashGroupId: (path) id of a specific group 
     - parameter crashId: (path) id of a specific crash 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func crashesGetNativeCrashDownload(crashGroupId: String, crashId: String, ownerName: String, appName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        crashesGetNativeCrashDownloadWithRequestBuilder(crashGroupId: crashGroupId, crashId: crashId, ownerName: ownerName, appName: appName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}/crashes/{crash_id}/native/download
     - Gets the native log of a specific crash as a text attachment.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter crashGroupId: (path) id of a specific group 
     - parameter crashId: (path) id of a specific crash 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - returns: RequestBuilder<String> 
     */
    open class func crashesGetNativeCrashDownloadWithRequestBuilder(crashGroupId: String, crashId: String, ownerName: String, appName: String) -> RequestBuilder<String> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}/crashes/{crash_id}/native/download"
        let crashGroupIdPreEscape = "\(APIHelper.mapValueToPathItem(crashGroupId))"
        let crashGroupIdPostEscape = crashGroupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{crash_group_id}", with: crashGroupIdPostEscape, options: .literal, range: nil)
        let crashIdPreEscape = "\(APIHelper.mapValueToPathItem(crashId))"
        let crashIdPostEscape = crashIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{crash_id}", with: crashIdPostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter crashGroupId: (path) id of a specific group 
     - parameter crashId: (path) id of a specific crash 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func crashesGetRawCrashLocation(crashGroupId: String, crashId: String, ownerName: String, appName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: InlineResponse20073?,_ error: Error?) -> Void)) {
        crashesGetRawCrashLocationWithRequestBuilder(crashGroupId: crashGroupId, crashId: crashId, ownerName: ownerName, appName: appName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}/crashes/{crash_id}/raw/location
     - Gets the URI location to download json of a specific crash.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter crashGroupId: (path) id of a specific group 
     - parameter crashId: (path) id of a specific crash 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - returns: RequestBuilder<InlineResponse20073> 
     */
    open class func crashesGetRawCrashLocationWithRequestBuilder(crashGroupId: String, crashId: String, ownerName: String, appName: String) -> RequestBuilder<InlineResponse20073> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}/crashes/{crash_id}/raw/location"
        let crashGroupIdPreEscape = "\(APIHelper.mapValueToPathItem(crashGroupId))"
        let crashGroupIdPostEscape = crashGroupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{crash_group_id}", with: crashGroupIdPostEscape, options: .literal, range: nil)
        let crashIdPreEscape = "\(APIHelper.mapValueToPathItem(crashId))"
        let crashIdPostEscape = crashIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{crash_id}", with: crashIdPostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<InlineResponse20073>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter crashGroupId: (path) id of a specific group 
     - parameter crashId: (path) id of a specific crash 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter groupingOnly: (query) true if the stacktrace should be only the relevant thread / exception. Default is false (optional, default to false)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func crashesGetStacktrace(crashGroupId: String, crashId: String, ownerName: String, appName: String, groupingOnly: Bool? = nil, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Stacktrace?,_ error: Error?) -> Void)) {
        crashesGetStacktraceWithRequestBuilder(crashGroupId: crashGroupId, crashId: crashId, ownerName: ownerName, appName: appName, groupingOnly: groupingOnly).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}/crashes/{crash_id}/stacktrace
     - Gets a stacktrace for a specific crash.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter crashGroupId: (path) id of a specific group 
     - parameter crashId: (path) id of a specific crash 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter groupingOnly: (query) true if the stacktrace should be only the relevant thread / exception. Default is false (optional, default to false)
     - returns: RequestBuilder<Stacktrace> 
     */
    open class func crashesGetStacktraceWithRequestBuilder(crashGroupId: String, crashId: String, ownerName: String, appName: String, groupingOnly: Bool? = nil) -> RequestBuilder<Stacktrace> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}/crashes/{crash_id}/stacktrace"
        let crashGroupIdPreEscape = "\(APIHelper.mapValueToPathItem(crashGroupId))"
        let crashGroupIdPostEscape = crashGroupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{crash_group_id}", with: crashGroupIdPostEscape, options: .literal, range: nil)
        let crashIdPreEscape = "\(APIHelper.mapValueToPathItem(crashId))"
        let crashIdPostEscape = crashIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{crash_id}", with: crashIdPostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "grouping_only": groupingOnly?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<Stacktrace>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter errorType
     */
    public enum ErrorType_crashesList: String, CaseIterable {
        case crashingErrors = "CrashingErrors"
        case handledErrors = "HandledErrors"
    }

    /**

     - parameter crashGroupId: (path) id of a specific group 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter includeReport: (query) true if the crash should include the raw crash report. Default is false (optional, default to false)
     - parameter includeLog: (query) true if the crash should include the custom log report. Default is false (optional, default to false)
     - parameter dateFrom: (query)  (optional)
     - parameter dateTo: (query)  (optional)
     - parameter appVersion: (query) version (optional)
     - parameter errorType: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func crashesList(crashGroupId: String, ownerName: String, appName: String, includeReport: Bool? = nil, includeLog: Bool? = nil, dateFrom: Date? = nil, dateTo: Date? = nil, appVersion: String? = nil, errorType: ErrorType_crashesList? = nil, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: [Crash]?,_ error: Error?) -> Void)) {
        crashesListWithRequestBuilder(crashGroupId: crashGroupId, ownerName: ownerName, appName: appName, includeReport: includeReport, includeLog: includeLog, dateFrom: dateFrom, dateTo: dateTo, appVersion: appVersion, errorType: errorType).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}/crashes
     - Gets all crashes of a group.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter crashGroupId: (path) id of a specific group 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter includeReport: (query) true if the crash should include the raw crash report. Default is false (optional, default to false)
     - parameter includeLog: (query) true if the crash should include the custom log report. Default is false (optional, default to false)
     - parameter dateFrom: (query)  (optional)
     - parameter dateTo: (query)  (optional)
     - parameter appVersion: (query) version (optional)
     - parameter errorType: (query)  (optional)
     - returns: RequestBuilder<[Crash]> 
     */
    open class func crashesListWithRequestBuilder(crashGroupId: String, ownerName: String, appName: String, includeReport: Bool? = nil, includeLog: Bool? = nil, dateFrom: Date? = nil, dateTo: Date? = nil, appVersion: String? = nil, errorType: ErrorType_crashesList? = nil) -> RequestBuilder<[Crash]> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}/crashes"
        let crashGroupIdPreEscape = "\(APIHelper.mapValueToPathItem(crashGroupId))"
        let crashGroupIdPostEscape = crashGroupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{crash_group_id}", with: crashGroupIdPostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "include_report": includeReport?.encodeToJSON(), 
            "include_log": includeLog?.encodeToJSON(), 
            "date_from": dateFrom?.encodeToJSON(), 
            "date_to": dateTo?.encodeToJSON(), 
            "app_version": appVersion?.encodeToJSON(), 
            "error_type": errorType?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[Crash]>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter crashId: (path) id of a specific crash 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func crashesListAttachments(crashId: String, ownerName: String, appName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: [InlineResponse20072]?,_ error: Error?) -> Void)) {
        crashesListAttachmentsWithRequestBuilder(crashId: crashId, ownerName: ownerName, appName: appName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/crashes/{crash_id}/attachments
     - Gets all attachments for a specific crash.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter crashId: (path) id of a specific crash 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - returns: RequestBuilder<[InlineResponse20072]> 
     */
    open class func crashesListAttachmentsWithRequestBuilder(crashId: String, ownerName: String, appName: String) -> RequestBuilder<[InlineResponse20072]> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/crashes/{crash_id}/attachments"
        let crashIdPreEscape = "\(APIHelper.mapValueToPathItem(crashId))"
        let crashIdPostEscape = crashIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{crash_id}", with: crashIdPostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[InlineResponse20072]>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Gets missing symbol crash group by its id
     
     - parameter symbolGroupId: (path) missing symbol crash group id 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func missingSymbolGroupsGet(symbolGroupId: String, ownerName: String, appName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        missingSymbolGroupsGetWithRequestBuilder(symbolGroupId: symbolGroupId, ownerName: ownerName, appName: appName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Gets missing symbol crash group by its id
     - GET /v0.1/apps/{owner_name}/{app_name}/diagnostics/symbol_groups/{symbol_group_id}
     - Gets missing symbol crash group by its id
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter symbolGroupId: (path) missing symbol crash group id 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - returns: RequestBuilder<Any> 
     */
    open class func missingSymbolGroupsGetWithRequestBuilder(symbolGroupId: String, ownerName: String, appName: String) -> RequestBuilder<Any> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/diagnostics/symbol_groups/{symbol_group_id}"
        let symbolGroupIdPreEscape = "\(APIHelper.mapValueToPathItem(symbolGroupId))"
        let symbolGroupIdPostEscape = symbolGroupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{symbol_group_id}", with: symbolGroupIdPostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Any>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Gets application level statistics for all missing symbol groups
     
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func missingSymbolGroupsInfo(ownerName: String, appName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        missingSymbolGroupsInfoWithRequestBuilder(ownerName: ownerName, appName: appName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Gets application level statistics for all missing symbol groups
     - GET /v0.1/apps/{owner_name}/{app_name}/diagnostics/symbol_groups_info
     - Gets application level statistics for all missing symbol groups
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - returns: RequestBuilder<Any> 
     */
    open class func missingSymbolGroupsInfoWithRequestBuilder(ownerName: String, appName: String) -> RequestBuilder<Any> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/diagnostics/symbol_groups_info"
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Any>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Gets top N (ordered by crash count) of crash groups by missing symbol
     
     - parameter top: (query) top N elements 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter filter: (query) query filter (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func missingSymbolGroupsList(top: Int, ownerName: String, appName: String, filter: String? = nil, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        missingSymbolGroupsListWithRequestBuilder(top: top, ownerName: ownerName, appName: appName, filter: filter).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Gets top N (ordered by crash count) of crash groups by missing symbol
     - GET /v0.1/apps/{owner_name}/{app_name}/diagnostics/symbol_groups
     - Gets top N (ordered by crash count) of crash groups by missing symbol
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter top: (query) top N elements 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter filter: (query) query filter (optional)
     - returns: RequestBuilder<Any> 
     */
    open class func missingSymbolGroupsListWithRequestBuilder(top: Int, ownerName: String, appName: String, filter: String? = nil) -> RequestBuilder<Any> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/diagnostics/symbol_groups"
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "top": top.encodeToJSON(), 
            "filter": filter?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<Any>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter symbolUploadId: (path) The ID of the symbol upload 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter body: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func symbolUploadsComplete(symbolUploadId: String, ownerName: String, appName: String, body: InlineObject29, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        symbolUploadsCompleteWithRequestBuilder(symbolUploadId: symbolUploadId, ownerName: ownerName, appName: appName, body: body).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /v0.1/apps/{owner_name}/{app_name}/symbol_uploads/{symbol_upload_id}
     - Commits or aborts the symbol upload process for a new set of symbols for the specified application
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter symbolUploadId: (path) The ID of the symbol upload 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter body: (body)  
     - returns: RequestBuilder<Any> 
     */
    open class func symbolUploadsCompleteWithRequestBuilder(symbolUploadId: String, ownerName: String, appName: String, body: InlineObject29) -> RequestBuilder<Any> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/symbol_uploads/{symbol_upload_id}"
        let symbolUploadIdPreEscape = "\(APIHelper.mapValueToPathItem(symbolUploadId))"
        let symbolUploadIdPostEscape = symbolUploadIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{symbol_upload_id}", with: symbolUploadIdPostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Any>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter body: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func symbolUploadsCreate(ownerName: String, appName: String, body: InlineObject30, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        symbolUploadsCreateWithRequestBuilder(ownerName: ownerName, appName: appName, body: body).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /v0.1/apps/{owner_name}/{app_name}/symbol_uploads
     - Begins the symbol upload process for a new set of symbols for the specified application
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter body: (body)  
     - returns: RequestBuilder<Any> 
     */
    open class func symbolUploadsCreateWithRequestBuilder(ownerName: String, appName: String, body: InlineObject30) -> RequestBuilder<Any> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/symbol_uploads"
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Any>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter symbolUploadId: (path) The ID of the symbol upload 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func symbolUploadsDelete(symbolUploadId: String, ownerName: String, appName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        symbolUploadsDeleteWithRequestBuilder(symbolUploadId: symbolUploadId, ownerName: ownerName, appName: appName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /v0.1/apps/{owner_name}/{app_name}/symbol_uploads/{symbol_upload_id}
     - Deletes a symbol upload by id for the specified application
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter symbolUploadId: (path) The ID of the symbol upload 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - returns: RequestBuilder<Any> 
     */
    open class func symbolUploadsDeleteWithRequestBuilder(symbolUploadId: String, ownerName: String, appName: String) -> RequestBuilder<Any> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/symbol_uploads/{symbol_upload_id}"
        let symbolUploadIdPreEscape = "\(APIHelper.mapValueToPathItem(symbolUploadId))"
        let symbolUploadIdPostEscape = symbolUploadIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{symbol_upload_id}", with: symbolUploadIdPostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Any>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter symbolUploadId: (path) The ID of the symbol upload 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func symbolUploadsGet(symbolUploadId: String, ownerName: String, appName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        symbolUploadsGetWithRequestBuilder(symbolUploadId: symbolUploadId, ownerName: ownerName, appName: appName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/symbol_uploads/{symbol_upload_id}
     - Gets a symbol upload by id for the specified application
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter symbolUploadId: (path) The ID of the symbol upload 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - returns: RequestBuilder<Any> 
     */
    open class func symbolUploadsGetWithRequestBuilder(symbolUploadId: String, ownerName: String, appName: String) -> RequestBuilder<Any> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/symbol_uploads/{symbol_upload_id}"
        let symbolUploadIdPreEscape = "\(APIHelper.mapValueToPathItem(symbolUploadId))"
        let symbolUploadIdPostEscape = symbolUploadIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{symbol_upload_id}", with: symbolUploadIdPostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Any>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter symbolUploadId: (path) The ID of the symbol upload 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func symbolUploadsGetLocation(symbolUploadId: String, ownerName: String, appName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: InlineResponse20030?,_ error: Error?) -> Void)) {
        symbolUploadsGetLocationWithRequestBuilder(symbolUploadId: symbolUploadId, ownerName: ownerName, appName: appName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/symbol_uploads/{symbol_upload_id}/location
     - Gets the URL to download the symbol upload
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter symbolUploadId: (path) The ID of the symbol upload 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - returns: RequestBuilder<InlineResponse20030> 
     */
    open class func symbolUploadsGetLocationWithRequestBuilder(symbolUploadId: String, ownerName: String, appName: String) -> RequestBuilder<InlineResponse20030> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/symbol_uploads/{symbol_upload_id}/location"
        let symbolUploadIdPreEscape = "\(APIHelper.mapValueToPathItem(symbolUploadId))"
        let symbolUploadIdPostEscape = symbolUploadIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{symbol_upload_id}", with: symbolUploadIdPostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<InlineResponse20030>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter status
     */
    public enum Status_symbolUploadsList: String, CaseIterable {
        case all = "all"
        case uploaded = "uploaded"
        case processed = "processed"
    }

    /**
     * enum for parameter symbolType
     */
    public enum SymbolType_symbolUploadsList: String, CaseIterable {
        case androidProguard = "AndroidProguard"
        case apple = "Apple"
        case breakpad = "Breakpad"
        case javaScript = "JavaScript"
        case uwp = "UWP"
    }

    /**

     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter top: (query) The maximum number of results to return. (optional, default to 30)
     - parameter status: (query) Filter results by the current status of a symbol upload: * all: all states in the symbol upload process. Includes created, aborted, committed, processing, indexed and failed states * uploaded: all states after package is uploaded. Includes committed, processing, indexed and failed states * processed: symbol upload processing is completed. Includes indexed and failed states.  (optional)
     - parameter symbolType: (query) The type of symbols (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func symbolUploadsList(ownerName: String, appName: String, top: Int64? = nil, status: Status_symbolUploadsList? = nil, symbolType: SymbolType_symbolUploadsList? = nil, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: [InlineResponse20031]?,_ error: Error?) -> Void)) {
        symbolUploadsListWithRequestBuilder(ownerName: ownerName, appName: appName, top: top, status: status, symbolType: symbolType).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/symbol_uploads
     - Gets a list of all uploads for the specified application
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter top: (query) The maximum number of results to return. (optional, default to 30)
     - parameter status: (query) Filter results by the current status of a symbol upload: * all: all states in the symbol upload process. Includes created, aborted, committed, processing, indexed and failed states * uploaded: all states after package is uploaded. Includes committed, processing, indexed and failed states * processed: symbol upload processing is completed. Includes indexed and failed states.  (optional)
     - parameter symbolType: (query) The type of symbols (optional)
     - returns: RequestBuilder<[InlineResponse20031]> 
     */
    open class func symbolUploadsListWithRequestBuilder(ownerName: String, appName: String, top: Int64? = nil, status: Status_symbolUploadsList? = nil, symbolType: SymbolType_symbolUploadsList? = nil) -> RequestBuilder<[InlineResponse20031]> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/symbol_uploads"
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "top": top?.encodeToJSON(), 
            "status": status?.encodeToJSON(), 
            "symbol_type": symbolType?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[InlineResponse20031]>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter symbolId: (path) The ID of the symbol (uuid of the symbol) 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func symbolsGet(symbolId: String, ownerName: String, appName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        symbolsGetWithRequestBuilder(symbolId: symbolId, ownerName: ownerName, appName: appName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/symbols/{symbol_id}
     - Returns a particular symbol by id (uuid) for the provided application
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter symbolId: (path) The ID of the symbol (uuid of the symbol) 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - returns: RequestBuilder<Any> 
     */
    open class func symbolsGetWithRequestBuilder(symbolId: String, ownerName: String, appName: String) -> RequestBuilder<Any> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/symbols/{symbol_id}"
        let symbolIdPreEscape = "\(APIHelper.mapValueToPathItem(symbolId))"
        let symbolIdPostEscape = symbolIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{symbol_id}", with: symbolIdPostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Any>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter symbolId: (path) The ID of the symbol (uuid of the symbol) 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func symbolsGetLocation(symbolId: String, ownerName: String, appName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: InlineResponse20028?,_ error: Error?) -> Void)) {
        symbolsGetLocationWithRequestBuilder(symbolId: symbolId, ownerName: ownerName, appName: appName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/symbols/{symbol_id}/location
     - Gets the URL to download the symbol
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter symbolId: (path) The ID of the symbol (uuid of the symbol) 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - returns: RequestBuilder<InlineResponse20028> 
     */
    open class func symbolsGetLocationWithRequestBuilder(symbolId: String, ownerName: String, appName: String) -> RequestBuilder<InlineResponse20028> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/symbols/{symbol_id}/location"
        let symbolIdPreEscape = "\(APIHelper.mapValueToPathItem(symbolId))"
        let symbolIdPostEscape = symbolIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{symbol_id}", with: symbolIdPostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<InlineResponse20028>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter symbolId: (path) The ID of the symbol (uuid of the symbol) 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func symbolsGetStatus(symbolId: String, ownerName: String, appName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        symbolsGetStatusWithRequestBuilder(symbolId: symbolId, ownerName: ownerName, appName: appName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/symbols/{symbol_id}/status
     - Returns a particular symbol by id (uuid) for the provided application
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter symbolId: (path) The ID of the symbol (uuid of the symbol) 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - returns: RequestBuilder<Any> 
     */
    open class func symbolsGetStatusWithRequestBuilder(symbolId: String, ownerName: String, appName: String) -> RequestBuilder<Any> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/symbols/{symbol_id}/status"
        let symbolIdPreEscape = "\(APIHelper.mapValueToPathItem(symbolId))"
        let symbolIdPostEscape = symbolIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{symbol_id}", with: symbolIdPostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Any>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter symbolId: (path) The ID of the symbol (uuid of the symbol) 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func symbolsIgnore(symbolId: String, ownerName: String, appName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        symbolsIgnoreWithRequestBuilder(symbolId: symbolId, ownerName: ownerName, appName: appName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /v0.1/apps/{owner_name}/{app_name}/symbols/{symbol_id}/ignore
     - Marks a symbol by id (uuid) as ignored
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter symbolId: (path) The ID of the symbol (uuid of the symbol) 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - returns: RequestBuilder<Any> 
     */
    open class func symbolsIgnoreWithRequestBuilder(symbolId: String, ownerName: String, appName: String) -> RequestBuilder<Any> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/symbols/{symbol_id}/ignore"
        let symbolIdPreEscape = "\(APIHelper.mapValueToPathItem(symbolId))"
        let symbolIdPostEscape = symbolIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{symbol_id}", with: symbolIdPostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Any>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func symbolsList(ownerName: String, appName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: [InlineResponse20029]?,_ error: Error?) -> Void)) {
        symbolsListWithRequestBuilder(ownerName: ownerName, appName: appName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/symbols
     - Returns the list of all symbols for the provided application
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - returns: RequestBuilder<[InlineResponse20029]> 
     */
    open class func symbolsListWithRequestBuilder(ownerName: String, appName: String) -> RequestBuilder<[InlineResponse20029]> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/symbols"
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[InlineResponse20029]>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
