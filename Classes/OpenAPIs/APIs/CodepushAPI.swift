//
// CodepushAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation



open class CodepushAPI {
    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func codePushAcquisitionGetAcquisitionStatus(apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        codePushAcquisitionGetAcquisitionStatusWithRequestBuilder().execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/public/codepush/status
     - Returns the acquisition service status to the caller
     - returns: RequestBuilder<Any> 
     */
    open class func codePushAcquisitionGetAcquisitionStatusWithRequestBuilder() -> RequestBuilder<Any> {
        let path = "/v0.1/public/codepush/status"
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Any>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter deploymentKey: (query)  
     - parameter appVersion: (query)  
     - parameter packageHash: (query)  (optional)
     - parameter label: (query)  (optional)
     - parameter clientUniqueId: (query)  (optional)
     - parameter isCompanion: (query)  (optional)
     - parameter previousLabelOrAppVersion: (query)  (optional)
     - parameter previousDeploymentKey: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func codePushAcquisitionUpdateCheck(deploymentKey: String, appVersion: String, packageHash: String? = nil, label: String? = nil, clientUniqueId: String? = nil, isCompanion: Bool? = nil, previousLabelOrAppVersion: String? = nil, previousDeploymentKey: String? = nil, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        codePushAcquisitionUpdateCheckWithRequestBuilder(deploymentKey: deploymentKey, appVersion: appVersion, packageHash: packageHash, label: label, clientUniqueId: clientUniqueId, isCompanion: isCompanion, previousLabelOrAppVersion: previousLabelOrAppVersion, previousDeploymentKey: previousDeploymentKey).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/public/codepush/update_check
     - Check for updates
     - parameter deploymentKey: (query)  
     - parameter appVersion: (query)  
     - parameter packageHash: (query)  (optional)
     - parameter label: (query)  (optional)
     - parameter clientUniqueId: (query)  (optional)
     - parameter isCompanion: (query)  (optional)
     - parameter previousLabelOrAppVersion: (query)  (optional)
     - parameter previousDeploymentKey: (query)  (optional)
     - returns: RequestBuilder<Any> 
     */
    open class func codePushAcquisitionUpdateCheckWithRequestBuilder(deploymentKey: String, appVersion: String, packageHash: String? = nil, label: String? = nil, clientUniqueId: String? = nil, isCompanion: Bool? = nil, previousLabelOrAppVersion: String? = nil, previousDeploymentKey: String? = nil) -> RequestBuilder<Any> {
        let path = "/v0.1/public/codepush/update_check"
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "deployment_key": deploymentKey.encodeToJSON(), 
            "app_version": appVersion.encodeToJSON(), 
            "package_hash": packageHash?.encodeToJSON(), 
            "label": label?.encodeToJSON(), 
            "client_unique_id": clientUniqueId?.encodeToJSON(), 
            "is_companion": isCompanion?.encodeToJSON(), 
            "previous_label_or_app_version": previousLabelOrAppVersion?.encodeToJSON(), 
            "previous_deployment_key": previousDeploymentKey?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<Any>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter releaseMetadata: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func codePushAcquisitionUpdateDeployStatus(releaseMetadata: InlineObject4, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        codePushAcquisitionUpdateDeployStatusWithRequestBuilder(releaseMetadata: releaseMetadata).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /v0.1/public/codepush/report_status/deploy
     - Report Deployment status metric
     - parameter releaseMetadata: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func codePushAcquisitionUpdateDeployStatusWithRequestBuilder(releaseMetadata: InlineObject4) -> RequestBuilder<Void> {
        let path = "/v0.1/public/codepush/report_status/deploy"
        let URLString = API.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: releaseMetadata)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = API.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter releaseMetadata: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func codePushAcquisitionUpdateDownloadStatus(releaseMetadata: InlineObject3, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        codePushAcquisitionUpdateDownloadStatusWithRequestBuilder(releaseMetadata: releaseMetadata).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /v0.1/public/codepush/report_status/download
     - Report download of specified release
     - parameter releaseMetadata: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func codePushAcquisitionUpdateDownloadStatusWithRequestBuilder(releaseMetadata: InlineObject3) -> RequestBuilder<Void> {
        let path = "/v0.1/public/codepush/report_status/download"
        let URLString = API.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: releaseMetadata)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = API.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter deploymentName: (path) deployment name 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func codePushDeploymentMetricsGet(deploymentName: String, ownerName: String, appName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: [InlineResponse20065]?,_ error: Error?) -> Void)) {
        codePushDeploymentMetricsGetWithRequestBuilder(deploymentName: deploymentName, ownerName: ownerName, appName: appName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}/metrics
     - Gets all releases metrics for specified Deployment
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter deploymentName: (path) deployment name 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - returns: RequestBuilder<[InlineResponse20065]> 
     */
    open class func codePushDeploymentMetricsGetWithRequestBuilder(deploymentName: String, ownerName: String, appName: String) -> RequestBuilder<[InlineResponse20065]> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}/metrics"
        let deploymentNamePreEscape = "\(APIHelper.mapValueToPathItem(deploymentName))"
        let deploymentNamePostEscape = deploymentNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deployment_name}", with: deploymentNamePostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[InlineResponse20065]>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter deploymentName: (path) deployment name 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter releaseLabel: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func codePushDeploymentReleaseRollback(deploymentName: String, ownerName: String, appName: String, releaseLabel: InlineObject56? = nil, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        codePushDeploymentReleaseRollbackWithRequestBuilder(deploymentName: deploymentName, ownerName: ownerName, appName: appName, releaseLabel: releaseLabel).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}/rollback_release
     - Rollback the latest or a specific release for an app deployment
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter deploymentName: (path) deployment name 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter releaseLabel: (body)  (optional)
     - returns: RequestBuilder<Any> 
     */
    open class func codePushDeploymentReleaseRollbackWithRequestBuilder(deploymentName: String, ownerName: String, appName: String, releaseLabel: InlineObject56? = nil) -> RequestBuilder<Any> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}/rollback_release"
        let deploymentNamePreEscape = "\(APIHelper.mapValueToPathItem(deploymentName))"
        let deploymentNamePostEscape = deploymentNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deployment_name}", with: deploymentNamePostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: releaseLabel)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Any>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter deploymentName: (path) deployment name 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter uploadedRelease: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func codePushDeploymentReleasesCreate(deploymentName: String, ownerName: String, appName: String, uploadedRelease: InlineObject57, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        codePushDeploymentReleasesCreateWithRequestBuilder(deploymentName: deploymentName, ownerName: ownerName, appName: appName, uploadedRelease: uploadedRelease).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}/releases
     - Create a new CodePush release for the specified deployment
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter deploymentName: (path) deployment name 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter uploadedRelease: (body)  
     - returns: RequestBuilder<Any> 
     */
    open class func codePushDeploymentReleasesCreateWithRequestBuilder(deploymentName: String, ownerName: String, appName: String, uploadedRelease: InlineObject57) -> RequestBuilder<Any> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}/releases"
        let deploymentNamePreEscape = "\(APIHelper.mapValueToPathItem(deploymentName))"
        let deploymentNamePostEscape = deploymentNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deployment_name}", with: deploymentNamePostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: uploadedRelease)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Any>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter deploymentName: (path) deployment name 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func codePushDeploymentReleasesDelete(deploymentName: String, ownerName: String, appName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        codePushDeploymentReleasesDeleteWithRequestBuilder(deploymentName: deploymentName, ownerName: ownerName, appName: appName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}/releases
     - Clears a Deployment of releases
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter deploymentName: (path) deployment name 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - returns: RequestBuilder<Void> 
     */
    open class func codePushDeploymentReleasesDeleteWithRequestBuilder(deploymentName: String, ownerName: String, appName: String) -> RequestBuilder<Void> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}/releases"
        let deploymentNamePreEscape = "\(APIHelper.mapValueToPathItem(deploymentName))"
        let deploymentNamePostEscape = deploymentNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deployment_name}", with: deploymentNamePostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = API.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter deploymentName: (path) deployment name 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func codePushDeploymentReleasesGet(deploymentName: String, ownerName: String, appName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: [Any]?,_ error: Error?) -> Void)) {
        codePushDeploymentReleasesGetWithRequestBuilder(deploymentName: deploymentName, ownerName: ownerName, appName: appName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}/releases
     - Gets the history of releases on a Deployment
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter deploymentName: (path) deployment name 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - returns: RequestBuilder<[Any]> 
     */
    open class func codePushDeploymentReleasesGetWithRequestBuilder(deploymentName: String, ownerName: String, appName: String) -> RequestBuilder<[Any]> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}/releases"
        let deploymentNamePreEscape = "\(APIHelper.mapValueToPathItem(deploymentName))"
        let deploymentNamePostEscape = deploymentNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deployment_name}", with: deploymentNamePostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Any]>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter deploymentName: (path) deployment name 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func codePushDeploymentUploadCreate(deploymentName: String, ownerName: String, appName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        codePushDeploymentUploadCreateWithRequestBuilder(deploymentName: deploymentName, ownerName: ownerName, appName: appName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}/uploads
     - Create a new CodePush release upload for the specified deployment
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter deploymentName: (path) deployment name 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - returns: RequestBuilder<Any> 
     */
    open class func codePushDeploymentUploadCreateWithRequestBuilder(deploymentName: String, ownerName: String, appName: String) -> RequestBuilder<Any> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}/uploads"
        let deploymentNamePreEscape = "\(APIHelper.mapValueToPathItem(deploymentName))"
        let deploymentNamePostEscape = deploymentNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deployment_name}", with: deploymentNamePostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Any>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter deployment: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func codePushDeploymentsCreate(ownerName: String, appName: String, deployment: InlineObject59, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: InlineResponse20066?,_ error: Error?) -> Void)) {
        codePushDeploymentsCreateWithRequestBuilder(ownerName: ownerName, appName: appName, deployment: deployment).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /v0.1/apps/{owner_name}/{app_name}/deployments
     - Creates a CodePush Deployment for the given app
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter deployment: (body)  
     - returns: RequestBuilder<InlineResponse20066> 
     */
    open class func codePushDeploymentsCreateWithRequestBuilder(ownerName: String, appName: String, deployment: InlineObject59) -> RequestBuilder<InlineResponse20066> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/deployments"
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: deployment)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<InlineResponse20066>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter deploymentName: (path) deployment name 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter body: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func codePushDeploymentsDelete(deploymentName: String, ownerName: String, appName: String, body: Any? = nil, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        codePushDeploymentsDeleteWithRequestBuilder(deploymentName: deploymentName, ownerName: ownerName, appName: appName, body: body).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}
     - Deletes a CodePush Deployment for the given app
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter deploymentName: (path) deployment name 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter body: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func codePushDeploymentsDeleteWithRequestBuilder(deploymentName: String, ownerName: String, appName: String, body: Any? = nil) -> RequestBuilder<Void> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}"
        let deploymentNamePreEscape = "\(APIHelper.mapValueToPathItem(deploymentName))"
        let deploymentNamePostEscape = deploymentNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deployment_name}", with: deploymentNamePostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = API.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter deploymentName: (path) deployment name 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func codePushDeploymentsGet(deploymentName: String, ownerName: String, appName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: InlineResponse20066?,_ error: Error?) -> Void)) {
        codePushDeploymentsGetWithRequestBuilder(deploymentName: deploymentName, ownerName: ownerName, appName: appName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}
     - Gets a CodePush Deployment for the given app
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter deploymentName: (path) deployment name 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - returns: RequestBuilder<InlineResponse20066> 
     */
    open class func codePushDeploymentsGetWithRequestBuilder(deploymentName: String, ownerName: String, appName: String) -> RequestBuilder<InlineResponse20066> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}"
        let deploymentNamePreEscape = "\(APIHelper.mapValueToPathItem(deploymentName))"
        let deploymentNamePostEscape = deploymentNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deployment_name}", with: deploymentNamePostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<InlineResponse20066>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func codePushDeploymentsList(ownerName: String, appName: String, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: [InlineResponse20066]?,_ error: Error?) -> Void)) {
        codePushDeploymentsListWithRequestBuilder(ownerName: ownerName, appName: appName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/apps/{owner_name}/{app_name}/deployments
     - Gets a list of CodePush deployments for the given app
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - returns: RequestBuilder<[InlineResponse20066]> 
     */
    open class func codePushDeploymentsListWithRequestBuilder(ownerName: String, appName: String) -> RequestBuilder<[InlineResponse20066]> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/deployments"
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[InlineResponse20066]>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter deploymentName: (path) deployment name 
     - parameter promoteDeploymentName: (path) deployment name 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter release: (body) Release to be promoted, only needs to provide optional fields, description, label, disabled, mandatory, rollout, targetBinaryVersion (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func codePushDeploymentsPromote(deploymentName: String, promoteDeploymentName: String, ownerName: String, appName: String, release: UNKNOWN_BASE_TYPE? = nil, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        codePushDeploymentsPromoteWithRequestBuilder(deploymentName: deploymentName, promoteDeploymentName: promoteDeploymentName, ownerName: ownerName, appName: appName, release: release).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}/promote_release/{promote_deployment_name}
     - Promote one release (default latest one) from one deployment to another
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter deploymentName: (path) deployment name 
     - parameter promoteDeploymentName: (path) deployment name 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter release: (body) Release to be promoted, only needs to provide optional fields, description, label, disabled, mandatory, rollout, targetBinaryVersion (optional)
     - returns: RequestBuilder<Any> 
     */
    open class func codePushDeploymentsPromoteWithRequestBuilder(deploymentName: String, promoteDeploymentName: String, ownerName: String, appName: String, release: UNKNOWN_BASE_TYPE? = nil) -> RequestBuilder<Any> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}/promote_release/{promote_deployment_name}"
        let deploymentNamePreEscape = "\(APIHelper.mapValueToPathItem(deploymentName))"
        let deploymentNamePostEscape = deploymentNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deployment_name}", with: deploymentNamePostEscape, options: .literal, range: nil)
        let promoteDeploymentNamePreEscape = "\(APIHelper.mapValueToPathItem(promoteDeploymentName))"
        let promoteDeploymentNamePostEscape = promoteDeploymentNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{promote_deployment_name}", with: promoteDeploymentNamePostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: release)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Any>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter deploymentName: (path) deployment name 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter deployment: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func codePushDeploymentsUpdate(deploymentName: String, ownerName: String, appName: String, deployment: InlineObject58, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        codePushDeploymentsUpdateWithRequestBuilder(deploymentName: deploymentName, ownerName: ownerName, appName: appName, deployment: deployment).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}
     - Modifies a CodePush Deployment for the given app
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter deploymentName: (path) deployment name 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter deployment: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func codePushDeploymentsUpdateWithRequestBuilder(deploymentName: String, ownerName: String, appName: String, deployment: InlineObject58) -> RequestBuilder<Void> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}"
        let deploymentNamePreEscape = "\(APIHelper.mapValueToPathItem(deploymentName))"
        let deploymentNamePostEscape = deploymentNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deployment_name}", with: deploymentNamePostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: deployment)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = API.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter deploymentName: (path) deployment name 
     - parameter releaseLabel: (path) release label 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter release: (body) Release modification. All fields are optional and only provided fields will get updated. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deploymentReleasesUpdate(deploymentName: String, releaseLabel: String, ownerName: String, appName: String, release: UNKNOWN_BASE_TYPE, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        deploymentReleasesUpdateWithRequestBuilder(deploymentName: deploymentName, releaseLabel: releaseLabel, ownerName: ownerName, appName: appName, release: release).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}/releases/{release_label}
     - Modifies a CodePush release metadata under the given Deployment
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter deploymentName: (path) deployment name 
     - parameter releaseLabel: (path) release label 
     - parameter ownerName: (path) The name of the owner 
     - parameter appName: (path) The name of the application 
     - parameter release: (body) Release modification. All fields are optional and only provided fields will get updated. 
     - returns: RequestBuilder<Any> 
     */
    open class func deploymentReleasesUpdateWithRequestBuilder(deploymentName: String, releaseLabel: String, ownerName: String, appName: String, release: UNKNOWN_BASE_TYPE) -> RequestBuilder<Any> {
        var path = "/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}/releases/{release_label}"
        let deploymentNamePreEscape = "\(APIHelper.mapValueToPathItem(deploymentName))"
        let deploymentNamePostEscape = deploymentNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deployment_name}", with: deploymentNamePostEscape, options: .literal, range: nil)
        let releaseLabelPreEscape = "\(APIHelper.mapValueToPathItem(releaseLabel))"
        let releaseLabelPostEscape = releaseLabelPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{release_label}", with: releaseLabelPostEscape, options: .literal, range: nil)
        let ownerNamePreEscape = "\(APIHelper.mapValueToPathItem(ownerName))"
        let ownerNamePostEscape = ownerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner_name}", with: ownerNamePostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app_name}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = API.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: release)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Any>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter deploymentKey: (query)  (optional)
     - parameter appVersion: (query)  (optional)
     - parameter packageHash: (query)  (optional)
     - parameter label: (query)  (optional)
     - parameter clientUniqueId: (query)  (optional)
     - parameter isCompanion: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func legacyCodePushAcquisitionUpdateCheck(deploymentKey: String? = nil, appVersion: String? = nil, packageHash: String? = nil, label: String? = nil, clientUniqueId: String? = nil, isCompanion: String? = nil, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        legacyCodePushAcquisitionUpdateCheckWithRequestBuilder(deploymentKey: deploymentKey, appVersion: appVersion, packageHash: packageHash, label: label, clientUniqueId: clientUniqueId, isCompanion: isCompanion).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v0.1/legacy/updateCheck
     - Check for updates
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter deploymentKey: (query)  (optional)
     - parameter appVersion: (query)  (optional)
     - parameter packageHash: (query)  (optional)
     - parameter label: (query)  (optional)
     - parameter clientUniqueId: (query)  (optional)
     - parameter isCompanion: (query)  (optional)
     - returns: RequestBuilder<Any> 
     */
    open class func legacyCodePushAcquisitionUpdateCheckWithRequestBuilder(deploymentKey: String? = nil, appVersion: String? = nil, packageHash: String? = nil, label: String? = nil, clientUniqueId: String? = nil, isCompanion: String? = nil) -> RequestBuilder<Any> {
        let path = "/v0.1/legacy/updateCheck"
        let URLString = API.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "deploymentKey": deploymentKey?.encodeToJSON(), 
            "appVersion": appVersion?.encodeToJSON(), 
            "packageHash": packageHash?.encodeToJSON(), 
            "label": label?.encodeToJSON(), 
            "clientUniqueId": clientUniqueId?.encodeToJSON(), 
            "isCompanion": isCompanion?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<Any>.Type = API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter releaseMetadata: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func legacyCodePushAcquisitionUpdateDownloadStatus(releaseMetadata: InlineObject26, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        legacyCodePushAcquisitionUpdateDownloadStatusWithRequestBuilder(releaseMetadata: releaseMetadata).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /v0.1/legacy/reportStatus/download
     - Report download of specified release
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter releaseMetadata: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func legacyCodePushAcquisitionUpdateDownloadStatusWithRequestBuilder(releaseMetadata: InlineObject26) -> RequestBuilder<Void> {
        let path = "/v0.1/legacy/reportStatus/download"
        let URLString = API.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: releaseMetadata)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = API.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter releaseMetadata: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func legacyCodePushAcquisitionUpdateInstallsStatus(releaseMetadata: InlineObject27, apiResponseQueue: DispatchQueue = API.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        legacyCodePushAcquisitionUpdateInstallsStatusWithRequestBuilder(releaseMetadata: releaseMetadata).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /v0.1/legacy/reportStatus/deploy
     - Report deploy of specified release
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter releaseMetadata: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func legacyCodePushAcquisitionUpdateInstallsStatusWithRequestBuilder(releaseMetadata: InlineObject27) -> RequestBuilder<Void> {
        let path = "/v0.1/legacy/reportStatus/deploy"
        let URLString = API.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: releaseMetadata)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = API.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
