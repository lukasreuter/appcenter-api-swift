//
// BasicReleaseDetailsResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

/** Basic information on a release */
public struct BasicReleaseDetailsResponse: Codable {

    public enum Origin: String, Codable, CaseIterable {
        case hockeyapp = "hockeyapp"
        case appcenter = "appcenter"
    }
    public enum DestinationType: String, Codable, CaseIterable {
        case group = "group"
        case store = "store"
        case tester = "tester"
    }
    /** ID identifying this unique release. */
    public var id: Int
    /** The release&#39;s version.&lt;br&gt; For iOS: CFBundleVersion from info.plist.&lt;br&gt; For Android: android:versionCode from AppManifest.xml.  */
    public var version: String
    /** The release&#39;s origin */
    public var origin: Origin?
    /** The release&#39;s short version.&lt;br&gt; For iOS: CFBundleShortVersionString from info.plist.&lt;br&gt; For Android: android:versionName from AppManifest.xml.  */
    public var shortVersion: String
    /** This value determines the whether a release currently is enabled or disabled. */
    public var enabled: Bool
    /** UTC time in ISO 8601 format of the uploaded time. */
    public var uploadedAt: String
    /** OBSOLETE. Will be removed in next version. The destination type.&lt;br&gt; &lt;b&gt;group&lt;/b&gt;: The release distributed to internal groups and distribution_groups details will be returned.&lt;br&gt; &lt;b&gt;store&lt;/b&gt;: The release distributed to external stores and distribution_stores details will be returned. &lt;br&gt;  */
    public var destinationType: DestinationType?
    /** OBSOLETE. Will be removed in next version. A list of distribution groups that are associated with this release. */
    public var distributionGroups: [Any]?
    /** OBSOLETE. Will be removed in next version. A list of distribution stores that are associated with this release. */
    public var distributionStores: [Any]?
    /** A list of distribution groups or stores. */
    public var destinations: [Any]?
    public var build: V01AppsOwnerNameAppNameReleasesFilterByTesterBuild?
    /** This value determines if a release is external or not. */
    public var isExternalBuild: Bool?

    public init(id: Int, version: String, origin: Origin?, shortVersion: String, enabled: Bool, uploadedAt: String, destinationType: DestinationType?, distributionGroups: [Any]?, distributionStores: [Any]?, destinations: [Any]?, build: V01AppsOwnerNameAppNameReleasesFilterByTesterBuild?, isExternalBuild: Bool?) {
        self.id = id
        self.version = version
        self.origin = origin
        self.shortVersion = shortVersion
        self.enabled = enabled
        self.uploadedAt = uploadedAt
        self.destinationType = destinationType
        self.distributionGroups = distributionGroups
        self.distributionStores = distributionStores
        self.destinations = destinations
        self.build = build
        self.isExternalBuild = isExternalBuild
    }

    public enum CodingKeys: String, CodingKey, CaseIterable { 
        case id
        case version
        case origin
        case shortVersion = "short_version"
        case enabled
        case uploadedAt = "uploaded_at"
        case destinationType = "destination_type"
        case distributionGroups = "distribution_groups"
        case distributionStores = "distribution_stores"
        case destinations
        case build
        case isExternalBuild = "is_external_build"
    }

}
