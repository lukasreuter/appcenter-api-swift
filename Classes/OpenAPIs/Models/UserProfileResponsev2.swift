//
// UserProfileResponsev2.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation


public struct UserProfileResponsev2: Codable {

    public enum Origin: String, Codable, CaseIterable {
        case appcenter = "appcenter"
        case hockeyapp = "hockeyapp"
        case codepush = "codepush"
    }
    public enum AdminRole: String, Codable, CaseIterable {
        case superadmin = "superAdmin"
        case admin = "admin"
        case devops = "devOps"
        case customersupport = "customerSupport"
        case notadmin = "notAdmin"
    }
    /** The unique id (UUID) of the user */
    public var id: UUID
    /** The avatar URL of the user */
    public var avatarUrl: String?
    /** User is required to send an old password in order to change the password. */
    public var canChangePassword: Bool?
    /** The full name of the user. Might for example be first and last name */
    public var displayName: String
    /** The email address of the user */
    public var email: String
    /** The unique name that is used to identify the user. */
    public var name: String
    /** The created date of the user */
    public var createdAt: String?
    /** The date in the future when the user should be checked again for NPS eligibility */
    public var nextNpsSurveyDate: String?
    /** The creation origin of this user */
    public var origin: Origin
    /** The feature flags that are enabled for this user */
    public var featureFlags: [String]?
    /** The new admin_role */
    public var adminRole: AdminRole?
    /** The user&#39;s settings */
    public var settings: Any?
    /** The session hash of the user */
    public var sessionHash: String?

    public init(id: UUID, avatarUrl: String?, canChangePassword: Bool?, displayName: String, email: String, name: String, createdAt: String?, nextNpsSurveyDate: String?, origin: Origin, featureFlags: [String]?, adminRole: AdminRole?, settings: Any?, sessionHash: String?) {
        self.id = id
        self.avatarUrl = avatarUrl
        self.canChangePassword = canChangePassword
        self.displayName = displayName
        self.email = email
        self.name = name
        self.createdAt = createdAt
        self.nextNpsSurveyDate = nextNpsSurveyDate
        self.origin = origin
        self.featureFlags = featureFlags
        self.adminRole = adminRole
        self.settings = settings
        self.sessionHash = sessionHash
    }

    public enum CodingKeys: String, CodingKey, CaseIterable { 
        case id
        case avatarUrl = "avatar_url"
        case canChangePassword = "can_change_password"
        case displayName = "display_name"
        case email
        case name
        case createdAt = "created_at"
        case nextNpsSurveyDate = "next_nps_survey_date"
        case origin
        case featureFlags = "feature_flags"
        case adminRole = "admin_role"
        case settings
        case sessionHash = "session_hash"
    }

}
