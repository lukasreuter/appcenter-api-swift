//
// Device.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

/** Device characteristics. */
public struct Device: Codable {

    /** Name of the SDK. Consists of the name of the SDK and the platform, e.g. \&quot;appcenter.ios\&quot;, \&quot;hockeysdk.android\&quot;.  */
    public var sdkName: String
    /** Version of the SDK in semver format, e.g. \&quot;1.2.0\&quot; or \&quot;0.12.3-alpha.1\&quot;.  */
    public var sdkVersion: String
    /** Version of the wrapper SDK in semver format. When the SDK is embedding another base SDK (for example Xamarin.Android wraps Android), the Xamarin specific version is populated into this field while sdkVersion refers to the original Android SDK.  */
    public var wrapperSdkVersion: String?
    /** Name of the wrapper SDK. Consists of the name of the SDK and the wrapper platform, e.g. \&quot;appcenter.xamarin\&quot;, \&quot;hockeysdk.cordova\&quot;.  */
    public var wrapperSdkName: String?
    /** Device model (example: iPad2,3).  */
    public var model: String?
    /** Device manufacturer (example: HTC).  */
    public var oemName: String?
    /** OS name (example: iOS). The following OS names are standardized (non-exclusive): Android, iOS, macOS, tvOS, Windows.  */
    public var osName: String
    /** OS version (example: 9.3.0).  */
    public var osVersion: String
    /** OS build code (example: LMY47X).  */
    public var osBuild: String?
    /** API level when applicable like in Android (example: 15).  */
    public var osApiLevel: Int?
    /** Language code (example: en_US).  */
    public var locale: String
    /** The offset in minutes from UTC for the device time zone, including daylight savings time.  */
    public var timeZoneOffset: Int
    /** Screen size of the device in pixels (example: 640x480).  */
    public var screenSize: String?
    /** Application version name, e.g. 1.1.0  */
    public var appVersion: String
    /** Carrier name (for mobile devices).  */
    public var carrierName: String?
    /** Carrier country code (for mobile devices).  */
    public var carrierCode: String?
    /** Carrier country.  */
    public var carrierCountry: String?
    /** The app&#39;s build number, e.g. 42.  */
    public var appBuild: String
    /** The bundle identifier, package identifier, or namespace, depending on what the individual plattforms use,  .e.g com.microsoft.example.  */
    public var appNamespace: String?
    /** Label that is used to identify application code &#39;version&#39; released via Live Update beacon running on device  */
    public var liveUpdateReleaseLabel: String?
    /** Identifier of environment that current application release belongs to, deployment key then maps to environment like Production, Staging.  */
    public var liveUpdateDeploymentKey: String?
    /** Hash of all files (ReactNative or Cordova) deployed to device via LiveUpdate beacon. Helps identify the Release version on device or need to download updates in future.  */
    public var liveUpdatePackageHash: String?
    /** Version of the wrapper technology framework (Xamarin runtime version or ReactNative or Cordova etc...). See wrapper_sdk_name to see if this version refers to Xamarin or ReactNative or other.  */
    public var wrapperRuntimeVersion: String?

    public init(sdkName: String, sdkVersion: String, wrapperSdkVersion: String?, wrapperSdkName: String?, model: String?, oemName: String?, osName: String, osVersion: String, osBuild: String?, osApiLevel: Int?, locale: String, timeZoneOffset: Int, screenSize: String?, appVersion: String, carrierName: String?, carrierCode: String?, carrierCountry: String?, appBuild: String, appNamespace: String?, liveUpdateReleaseLabel: String?, liveUpdateDeploymentKey: String?, liveUpdatePackageHash: String?, wrapperRuntimeVersion: String?) {
        self.sdkName = sdkName
        self.sdkVersion = sdkVersion
        self.wrapperSdkVersion = wrapperSdkVersion
        self.wrapperSdkName = wrapperSdkName
        self.model = model
        self.oemName = oemName
        self.osName = osName
        self.osVersion = osVersion
        self.osBuild = osBuild
        self.osApiLevel = osApiLevel
        self.locale = locale
        self.timeZoneOffset = timeZoneOffset
        self.screenSize = screenSize
        self.appVersion = appVersion
        self.carrierName = carrierName
        self.carrierCode = carrierCode
        self.carrierCountry = carrierCountry
        self.appBuild = appBuild
        self.appNamespace = appNamespace
        self.liveUpdateReleaseLabel = liveUpdateReleaseLabel
        self.liveUpdateDeploymentKey = liveUpdateDeploymentKey
        self.liveUpdatePackageHash = liveUpdatePackageHash
        self.wrapperRuntimeVersion = wrapperRuntimeVersion
    }

    public enum CodingKeys: String, CodingKey, CaseIterable { 
        case sdkName = "sdk_name"
        case sdkVersion = "sdk_version"
        case wrapperSdkVersion = "wrapper_sdk_version"
        case wrapperSdkName = "wrapper_sdk_name"
        case model
        case oemName = "oem_name"
        case osName = "os_name"
        case osVersion = "os_version"
        case osBuild = "os_build"
        case osApiLevel = "os_api_level"
        case locale
        case timeZoneOffset = "time_zone_offset"
        case screenSize = "screen_size"
        case appVersion = "app_version"
        case carrierName = "carrier_name"
        case carrierCode = "carrier_code"
        case carrierCountry = "carrier_country"
        case appBuild = "app_build"
        case appNamespace = "app_namespace"
        case liveUpdateReleaseLabel = "live_update_release_label"
        case liveUpdateDeploymentKey = "live_update_deployment_key"
        case liveUpdatePackageHash = "live_update_package_hash"
        case wrapperRuntimeVersion = "wrapper_runtime_version"
    }

}
