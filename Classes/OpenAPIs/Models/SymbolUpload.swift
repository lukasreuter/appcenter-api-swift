//
// SymbolUpload.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

/** A single symbol upload entity */
public struct SymbolUpload: Codable {

    public enum Status: String, Codable, CaseIterable {
        case created = "created"
        case committed = "committed"
        case aborted = "aborted"
        case processing = "processing"
        case indexed = "indexed"
        case failed = "failed"
    }
    public enum SymbolType: String, Codable, CaseIterable {
        case apple = "Apple"
        case javaScript = "JavaScript"
        case breakpad = "Breakpad"
        case androidProguard = "AndroidProguard"
        case uwp = "UWP"
    }
    public enum Origin: String, Codable, CaseIterable {
        case user = "User"
        case system = "System"
    }
    /** The id for the current symbol upload */
    public var symbolUploadId: String
    /** The application that this symbol upload belongs to */
    public var appId: String
    public var user: V01AppsOwnerNameAppNameSymbolUploadsUser?
    /** The current status for the symbol upload */
    public var status: Status
    /** The type of the symbol for the current symbol upload */
    public var symbolType: SymbolType
    /** The symbols found in the upload. This may be empty until the status is indexed */
    public var symbolsUploaded: [V01AppsOwnerNameAppNameSymbolUploadsSymbolsUploaded]?
    /** The origin of the symbol upload */
    public var origin: Origin?
    /** The file name for the symbol upload */
    public var fileName: String?
    /** The size of the file in Mebibytes. This may be 0 until the status is indexed */
    public var fileSize: Double?
    /** When the symbol upload was committed, or last transaction time if not committed */
    public var timestamp: Date?

    public init(symbolUploadId: String, appId: String, user: V01AppsOwnerNameAppNameSymbolUploadsUser?, status: Status, symbolType: SymbolType, symbolsUploaded: [V01AppsOwnerNameAppNameSymbolUploadsSymbolsUploaded]?, origin: Origin?, fileName: String?, fileSize: Double?, timestamp: Date?) {
        self.symbolUploadId = symbolUploadId
        self.appId = appId
        self.user = user
        self.status = status
        self.symbolType = symbolType
        self.symbolsUploaded = symbolsUploaded
        self.origin = origin
        self.fileName = fileName
        self.fileSize = fileSize
        self.timestamp = timestamp
    }

    public enum CodingKeys: String, CodingKey, CaseIterable { 
        case symbolUploadId = "symbol_upload_id"
        case appId = "app_id"
        case user
        case status
        case symbolType = "symbol_type"
        case symbolsUploaded = "symbols_uploaded"
        case origin
        case fileName = "file_name"
        case fileSize = "file_size"
        case timestamp
    }

}
