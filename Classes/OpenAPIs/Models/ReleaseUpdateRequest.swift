//
// ReleaseUpdateRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

/** A request containing information for updating a release. */
public struct ReleaseUpdateRequest: Codable {

    /** OBSOLETE. Will be removed in future releases - use destinations instead. Name of a distribution group. The release will be associated with this distribution group. If the distribution group doesn&#39;t exist a 400 is returned. If both distribution group name and id are passed, the id is taking precedence.  */
    public var distributionGroupName: String?
    /** OBSOLETE. Will be removed in future releases - use destinations instead. Id of a distribution group. The release will be associated with this distribution group. If the distribution group doesn&#39;t exist a 400 is returned. If both distribution group name and id are passed, the id is taking precedence.  */
    public var distributionGroupId: String?
    /** OBSOLETE. Will be removed in future releases - use destinations instead. Name of a destination. The release will be associated with this destination. If the destination doesn&#39;t exist a 400 is returned. If both distribution group name and id are passed, the id is taking precedence.  */
    public var destinationName: String?
    /** OBSOLETE. Will be removed in future releases - use destinations instead. Id of a destination. The release will be associated with this destination. If the destination doesn&#39;t exist a 400 is returned. If both destination name and id are passed, the id is taking precedence.  */
    public var destinationId: String?
    /** Not used anymore. */
    public var destinationType: String?
    /** Release notes for this release. */
    public var releaseNotes: String?
    /** A boolean which determines whether this version should be a mandatory update or not. */
    public var mandatoryUpdate: Bool?
    /** Distribute this release under the following list of destinations (store groups or distribution groups). */
    public var destinations: [V01AppsOwnerNameAppNameReleasesReleaseIdDestinations]?
    public var build: V01AppsOwnerNameAppNameReleasesReleaseIdBuild?
    /** A boolean which determines whether to notify testers of a new release, default to true. */
    public var notifyTesters: Bool? = true
    public var metadata: V01AppsOwnerNameAppNameReleasesReleaseIdMetadata?

    public init(distributionGroupName: String?, distributionGroupId: String?, destinationName: String?, destinationId: String?, destinationType: String?, releaseNotes: String?, mandatoryUpdate: Bool?, destinations: [V01AppsOwnerNameAppNameReleasesReleaseIdDestinations]?, build: V01AppsOwnerNameAppNameReleasesReleaseIdBuild?, notifyTesters: Bool?, metadata: V01AppsOwnerNameAppNameReleasesReleaseIdMetadata?) {
        self.distributionGroupName = distributionGroupName
        self.distributionGroupId = distributionGroupId
        self.destinationName = destinationName
        self.destinationId = destinationId
        self.destinationType = destinationType
        self.releaseNotes = releaseNotes
        self.mandatoryUpdate = mandatoryUpdate
        self.destinations = destinations
        self.build = build
        self.notifyTesters = notifyTesters
        self.metadata = metadata
    }

    public enum CodingKeys: String, CodingKey, CaseIterable { 
        case distributionGroupName = "distribution_group_name"
        case distributionGroupId = "distribution_group_id"
        case destinationName = "destination_name"
        case destinationId = "destination_id"
        case destinationType = "destination_type"
        case releaseNotes = "release_notes"
        case mandatoryUpdate = "mandatory_update"
        case destinations
        case build
        case notifyTesters = "notify_testers"
        case metadata
    }

}
