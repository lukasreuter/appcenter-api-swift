//
// ExceptionFrames.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

/** a single frame of a stack trace */
public struct ExceptionFrames: Codable {

    public enum Language: String, Codable, CaseIterable {
        case javaScript = "JavaScript"
        case csharp = "CSharp"
        case objectiveC = "Objective-C"
        case objectiveCpp = "Objective-Cpp"
        case cpp = "Cpp"
        case c = "C"
        case swift = "Swift"
        case java = "Java"
        case unknown = "Unknown"
    }
    /** address of the frame */
    public var address: String?
    /** name of the class */
    public var className: String?
    /** name of the method */
    public var method: String?
    /** is a class method */
    public var classMethod: Bool?
    /** name of the file */
    public var file: String?
    /** line number */
    public var line: Int?
    /** this line isn&#39;t from any framework */
    public var appCode: Bool
    /** Name of the framework */
    public var frameworkName: String?
    /** Raw frame string */
    public var codeRaw: String
    /** Formatted frame string */
    public var codeFormatted: String
    /** programming language of the frame */
    public var language: Language?
    /** frame should be shown always */
    public var relevant: Bool?
    /** parameters of the frames method */
    public var methodParams: String?

    public init(address: String?, className: String?, method: String?, classMethod: Bool?, file: String?, line: Int?, appCode: Bool, frameworkName: String?, codeRaw: String, codeFormatted: String, language: Language?, relevant: Bool?, methodParams: String?) {
        self.address = address
        self.className = className
        self.method = method
        self.classMethod = classMethod
        self.file = file
        self.line = line
        self.appCode = appCode
        self.frameworkName = frameworkName
        self.codeRaw = codeRaw
        self.codeFormatted = codeFormatted
        self.language = language
        self.relevant = relevant
        self.methodParams = methodParams
    }

    public enum CodingKeys: String, CodingKey, CaseIterable { 
        case address
        case className = "class_name"
        case method
        case classMethod = "class_method"
        case file
        case line
        case appCode = "app_code"
        case frameworkName = "framework_name"
        case codeRaw = "code_raw"
        case codeFormatted = "code_formatted"
        case language
        case relevant
        case methodParams = "method_params"
    }

}
